class org.simpleframework.xml.strategy.WriteGraph extends java.util.IdentityHashMap
{
    private final java.lang.String label;
    private final java.lang.String length;
    private final java.lang.String mark;
    private final java.lang.String refer;

    public void <init>(org.simpleframework.xml.strategy.Contract)
    {
        java.lang.String $r0, $r3, $r4, $r5;
        org.simpleframework.xml.strategy.Contract $r1;
        org.simpleframework.xml.strategy.WriteGraph $r2;

        $r2 := @this: org.simpleframework.xml.strategy.WriteGraph;

        $r1 := @parameter0: org.simpleframework.xml.strategy.Contract;

        specialinvoke $r2.<java.util.IdentityHashMap: void <init>()>();

        $r0 = virtualinvoke $r1.<org.simpleframework.xml.strategy.Contract: java.lang.String getReference()>();

        $r2.<org.simpleframework.xml.strategy.WriteGraph: java.lang.String refer> = $r0;

        $r3 = virtualinvoke $r1.<org.simpleframework.xml.strategy.Contract: java.lang.String getIdentity()>();

        $r2.<org.simpleframework.xml.strategy.WriteGraph: java.lang.String mark> = $r3;

        $r4 = virtualinvoke $r1.<org.simpleframework.xml.strategy.Contract: java.lang.String getLength()>();

        $r2.<org.simpleframework.xml.strategy.WriteGraph: java.lang.String length> = $r4;

        $r5 = virtualinvoke $r1.<org.simpleframework.xml.strategy.Contract: java.lang.String getLabel()>();

        $r2.<org.simpleframework.xml.strategy.WriteGraph: java.lang.String label> = $r5;

        return;
    }

    private java.lang.Class writeArray(java.lang.Class, java.lang.Object, org.simpleframework.xml.stream.NodeMap)
    {
        java.lang.String $r0, $r1;
        boolean $z0;
        int $i0;
        org.simpleframework.xml.stream.NodeMap $r2;
        java.lang.Object $r3;
        java.lang.Class $r4, $r6;
        org.simpleframework.xml.strategy.WriteGraph $r5;

        $r5 := @this: org.simpleframework.xml.strategy.WriteGraph;

        $r4 := @parameter0: java.lang.Class;

        $r3 := @parameter1: java.lang.Object;

        $r2 := @parameter2: org.simpleframework.xml.stream.NodeMap;

        $i0 = staticinvoke <java.lang.reflect.Array: int getLength(java.lang.Object)>($r3);

        $z0 = virtualinvoke $r5.<org.simpleframework.xml.strategy.WriteGraph: boolean containsKey(java.lang.Object)>($r3);

        if $z0 != 0 goto label1;

        $r0 = $r5.<org.simpleframework.xml.strategy.WriteGraph: java.lang.String length>;

        $r1 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>($i0);

        interfaceinvoke $r2.<org.simpleframework.xml.stream.NodeMap: org.simpleframework.xml.stream.Node put(java.lang.String,java.lang.String)>($r0, $r1);

     label1:
        $r6 = virtualinvoke $r4.<java.lang.Class: java.lang.Class getComponentType()>();

        return $r6;
    }

    private boolean writeReference(java.lang.Object, org.simpleframework.xml.stream.NodeMap)
    {
        int $i0;
        java.lang.String $r0, $r1, $r6, $r7;
        org.simpleframework.xml.stream.NodeMap $r2;
        java.lang.Object $r3, $r4;
        org.simpleframework.xml.strategy.WriteGraph $r5;

        $r5 := @this: org.simpleframework.xml.strategy.WriteGraph;

        $r3 := @parameter0: java.lang.Object;

        $r2 := @parameter1: org.simpleframework.xml.stream.NodeMap;

        $r4 = virtualinvoke $r5.<org.simpleframework.xml.strategy.WriteGraph: java.lang.Object get(java.lang.Object)>($r3);

        $r1 = (java.lang.String) $r4;

        $i0 = virtualinvoke $r5.<org.simpleframework.xml.strategy.WriteGraph: int size()>();

        if $r1 == null goto label1;

        $r0 = $r5.<org.simpleframework.xml.strategy.WriteGraph: java.lang.String refer>;

        interfaceinvoke $r2.<org.simpleframework.xml.stream.NodeMap: org.simpleframework.xml.stream.Node put(java.lang.String,java.lang.String)>($r0, $r1);

        return 1;

     label1:
        $r6 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>($i0);

        $r7 = $r5.<org.simpleframework.xml.strategy.WriteGraph: java.lang.String mark>;

        interfaceinvoke $r2.<org.simpleframework.xml.stream.NodeMap: org.simpleframework.xml.stream.Node put(java.lang.String,java.lang.String)>($r7, $r6);

        virtualinvoke $r5.<org.simpleframework.xml.strategy.WriteGraph: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, $r6);

        return 0;
    }

    public boolean write(org.simpleframework.xml.strategy.Type, java.lang.Object, org.simpleframework.xml.stream.NodeMap)
    {
        java.lang.String $r0, $r1;
        boolean $z0, $z1;
        java.lang.Class $r2, $r3, $r4;
        org.simpleframework.xml.stream.NodeMap $r5;
        java.lang.Object $r6;
        org.simpleframework.xml.strategy.Type $r7;
        org.simpleframework.xml.strategy.WriteGraph $r8;

        $r8 := @this: org.simpleframework.xml.strategy.WriteGraph;

        $r7 := @parameter0: org.simpleframework.xml.strategy.Type;

        $r6 := @parameter1: java.lang.Object;

        $r5 := @parameter2: org.simpleframework.xml.stream.NodeMap;

        $r3 = virtualinvoke $r6.<java.lang.Object: java.lang.Class getClass()>();

        $r4 = interfaceinvoke $r7.<org.simpleframework.xml.strategy.Type: java.lang.Class getType()>();

        $r2 = $r3;

        $z0 = virtualinvoke $r3.<java.lang.Class: boolean isArray()>();

        if $z0 == 0 goto label1;

        $r2 = specialinvoke $r8.<org.simpleframework.xml.strategy.WriteGraph: java.lang.Class writeArray(java.lang.Class,java.lang.Object,org.simpleframework.xml.stream.NodeMap)>($r3, $r6, $r5);

     label1:
        if $r3 == $r4 goto label2;

        $r0 = $r8.<org.simpleframework.xml.strategy.WriteGraph: java.lang.String label>;

        $r1 = virtualinvoke $r2.<java.lang.Class: java.lang.String getName()>();

        interfaceinvoke $r5.<org.simpleframework.xml.stream.NodeMap: org.simpleframework.xml.stream.Node put(java.lang.String,java.lang.String)>($r0, $r1);

     label2:
        $z1 = specialinvoke $r8.<org.simpleframework.xml.strategy.WriteGraph: boolean writeReference(java.lang.Object,org.simpleframework.xml.stream.NodeMap)>($r6, $r5);

        return $z1;
    }
}
