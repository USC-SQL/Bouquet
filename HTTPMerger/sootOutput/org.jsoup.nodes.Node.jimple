public abstract class org.jsoup.nodes.Node extends java.lang.Object implements java.lang.Cloneable
{
    org.jsoup.nodes.Attributes attributes;
    java.lang.String baseUri;
    java.util.List childNodes;
    org.jsoup.nodes.Node parentNode;
    int siblingIndex;

    protected void <init>()
    {
        java.util.List $r0;
        org.jsoup.nodes.Node $r1;

        $r1 := @this: org.jsoup.nodes.Node;

        specialinvoke $r1.<java.lang.Object: void <init>()>();

        $r0 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        $r1.<org.jsoup.nodes.Node: java.util.List childNodes> = $r0;

        $r1.<org.jsoup.nodes.Node: org.jsoup.nodes.Attributes attributes> = null;

        return;
    }

    protected void <init>(java.lang.String)
    {
        org.jsoup.nodes.Attributes $r0;
        java.lang.String $r1;
        org.jsoup.nodes.Node $r2;

        $r2 := @this: org.jsoup.nodes.Node;

        $r1 := @parameter0: java.lang.String;

        $r0 = new org.jsoup.nodes.Attributes;

        specialinvoke $r0.<org.jsoup.nodes.Attributes: void <init>()>();

        specialinvoke $r2.<org.jsoup.nodes.Node: void <init>(java.lang.String,org.jsoup.nodes.Attributes)>($r1, $r0);

        return;
    }

    protected void <init>(java.lang.String, org.jsoup.nodes.Attributes)
    {
        java.util.ArrayList $r0;
        org.jsoup.nodes.Attributes $r1;
        java.lang.String $r2, $r4;
        org.jsoup.nodes.Node $r3;

        $r3 := @this: org.jsoup.nodes.Node;

        $r2 := @parameter0: java.lang.String;

        $r1 := @parameter1: org.jsoup.nodes.Attributes;

        specialinvoke $r3.<java.lang.Object: void <init>()>();

        staticinvoke <org.jsoup.helper.Validate: void notNull(java.lang.Object)>($r2);

        staticinvoke <org.jsoup.helper.Validate: void notNull(java.lang.Object)>($r1);

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>(int)>(4);

        $r3.<org.jsoup.nodes.Node: java.util.List childNodes> = $r0;

        $r4 = virtualinvoke $r2.<java.lang.String: java.lang.String trim()>();

        $r3.<org.jsoup.nodes.Node: java.lang.String baseUri> = $r4;

        $r3.<org.jsoup.nodes.Node: org.jsoup.nodes.Attributes attributes> = $r1;

        return;
    }

    private void addSiblingHtml(int, java.lang.String)
    {
        java.lang.Object[] $r0;
        org.jsoup.nodes.Node[] $r1, $r11;
        java.util.List $r2;
        boolean $z0;
        org.jsoup.nodes.Element $r3;
        java.lang.String $r4, $r5;
        int $i0, $i1;
        org.jsoup.nodes.Node $r6, $r7, $r8, $r9, $r10;

        $r6 := @this: org.jsoup.nodes.Node;

        $i0 := @parameter0: int;

        $r4 := @parameter1: java.lang.String;

        staticinvoke <org.jsoup.helper.Validate: void notNull(java.lang.Object)>($r4);

        $r7 = $r6.<org.jsoup.nodes.Node: org.jsoup.nodes.Node parentNode>;

        staticinvoke <org.jsoup.helper.Validate: void notNull(java.lang.Object)>($r7);

        $r8 = virtualinvoke $r6.<org.jsoup.nodes.Node: org.jsoup.nodes.Node parent()>();

        $z0 = $r8 instanceof org.jsoup.nodes.Element;

        if $z0 == 0 goto label2;

        $r9 = virtualinvoke $r6.<org.jsoup.nodes.Node: org.jsoup.nodes.Node parent()>();

        $r3 = (org.jsoup.nodes.Element) $r9;

     label1:
        $r5 = virtualinvoke $r6.<org.jsoup.nodes.Node: java.lang.String baseUri()>();

        $r2 = staticinvoke <org.jsoup.parser.Parser: java.util.List parseFragment(java.lang.String,org.jsoup.nodes.Element,java.lang.String)>($r4, $r3, $r5);

        $r10 = $r6.<org.jsoup.nodes.Node: org.jsoup.nodes.Node parentNode>;

        $i1 = interfaceinvoke $r2.<java.util.List: int size()>();

        $r1 = newarray (org.jsoup.nodes.Node)[$i1];

        $r0 = interfaceinvoke $r2.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r1);

        $r11 = (org.jsoup.nodes.Node[]) $r0;

        virtualinvoke $r10.<org.jsoup.nodes.Node: void addChildren(int,org.jsoup.nodes.Node[])>($i0, $r11);

        return;

     label2:
        $r3 = null;

        goto label1;
    }

    private org.jsoup.nodes.Element getDeepChild(org.jsoup.nodes.Element)
    {
        java.lang.Object $r0;
        int $i0;
        org.jsoup.select.Elements $r1;
        org.jsoup.nodes.Element $r2, $r4, $r5;
        org.jsoup.nodes.Node $r3;

        $r3 := @this: org.jsoup.nodes.Node;

        $r2 := @parameter0: org.jsoup.nodes.Element;

        $r1 = virtualinvoke $r2.<org.jsoup.nodes.Element: org.jsoup.select.Elements children()>();

        $i0 = interfaceinvoke $r1.<java.util.List: int size()>();

        if $i0 <= 0 goto label1;

        $r0 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(0);

        $r4 = (org.jsoup.nodes.Element) $r0;

        $r5 = specialinvoke $r3.<org.jsoup.nodes.Node: org.jsoup.nodes.Element getDeepChild(org.jsoup.nodes.Element)>($r4);

        return $r5;

     label1:
        return $r2;
    }

    private org.jsoup.nodes.Document$OutputSettings getOutputSettings()
    {
        org.jsoup.nodes.Document$OutputSettings $r0, $r5;
        org.jsoup.nodes.Document $r1, $r3, $r4;
        org.jsoup.nodes.Node $r2;

        $r2 := @this: org.jsoup.nodes.Node;

        $r1 = virtualinvoke $r2.<org.jsoup.nodes.Node: org.jsoup.nodes.Document ownerDocument()>();

        if $r1 == null goto label1;

        $r3 = virtualinvoke $r2.<org.jsoup.nodes.Node: org.jsoup.nodes.Document ownerDocument()>();

        $r0 = virtualinvoke $r3.<org.jsoup.nodes.Document: org.jsoup.nodes.Document$OutputSettings outputSettings()>();

        return $r0;

     label1:
        $r4 = new org.jsoup.nodes.Document;

        specialinvoke $r4.<org.jsoup.nodes.Document: void <init>(java.lang.String)>("");

        $r5 = virtualinvoke $r4.<org.jsoup.nodes.Document: org.jsoup.nodes.Document$OutputSettings outputSettings()>();

        return $r5;
    }

    private void reindexChildren()
    {
        java.lang.Object $r0;
        java.util.List $r1, $r4;
        int $i0, $i1;
        org.jsoup.nodes.Node $r2, $r3;

        $r2 := @this: org.jsoup.nodes.Node;

        $i0 = 0;

     label1:
        $r1 = $r2.<org.jsoup.nodes.Node: java.util.List childNodes>;

        $i1 = interfaceinvoke $r1.<java.util.List: int size()>();

        if $i0 >= $i1 goto label2;

        $r4 = $r2.<org.jsoup.nodes.Node: java.util.List childNodes>;

        $r0 = interfaceinvoke $r4.<java.util.List: java.lang.Object get(int)>($i0);

        $r3 = (org.jsoup.nodes.Node) $r0;

        virtualinvoke $r3.<org.jsoup.nodes.Node: void setSiblingIndex(int)>($i0);

        $i0 = $i0 + 1;

        goto label1;

     label2:
        return;
    }

    private void reparentChild(org.jsoup.nodes.Node)
    {
        org.jsoup.nodes.Node $r0, $r1, $r2, $r3;

        $r0 := @this: org.jsoup.nodes.Node;

        $r1 := @parameter0: org.jsoup.nodes.Node;

        $r2 = $r1.<org.jsoup.nodes.Node: org.jsoup.nodes.Node parentNode>;

        if $r2 == null goto label1;

        $r3 = $r1.<org.jsoup.nodes.Node: org.jsoup.nodes.Node parentNode>;

        virtualinvoke $r3.<org.jsoup.nodes.Node: void removeChild(org.jsoup.nodes.Node)>($r1);

     label1:
        virtualinvoke $r1.<org.jsoup.nodes.Node: void setParentNode(org.jsoup.nodes.Node)>($r0);

        return;
    }

    public java.lang.String absUrl(java.lang.String)
    {
        java.lang.StringBuilder $r0, $r11, $r12;
        boolean $z0, $z1;
        java.net.MalformedURLException $r1, $r2;
        java.net.URL $r3, $r4, $r15;
        java.lang.String $r5, $r6, $r7, $r9, $r10, $r13, $r14, $r16;
        org.jsoup.nodes.Node $r8;

        $r8 := @this: org.jsoup.nodes.Node;

        $r5 := @parameter0: java.lang.String;

        staticinvoke <org.jsoup.helper.Validate: void notEmpty(java.lang.String)>($r5);

        $r7 = virtualinvoke $r8.<org.jsoup.nodes.Node: java.lang.String attr(java.lang.String)>($r5);

        $r6 = $r7;

        $z0 = virtualinvoke $r8.<org.jsoup.nodes.Node: boolean hasAttr(java.lang.String)>($r5);

        if $z0 != 0 goto label01;

        return "";

     label01:
        $r4 = new java.net.URL;

        $r9 = $r8.<org.jsoup.nodes.Node: java.lang.String baseUri>;

     label02:
        specialinvoke $r4.<java.net.URL: void <init>(java.lang.String)>($r9);

     label03:
        $z1 = virtualinvoke $r7.<java.lang.String: boolean startsWith(java.lang.String)>("?");

     label04:
        if $z1 == 0 goto label07;

     label05:
        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r4.<java.net.URL: java.lang.String getPath()>();

        $r11 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

     label06:
        $r6 = $r13;

     label07:
        $r3 = new java.net.URL;

        specialinvoke $r3.<java.net.URL: void <init>(java.net.URL,java.lang.String)>($r4, $r6);

        $r14 = virtualinvoke $r3.<java.net.URL: java.lang.String toExternalForm()>();

     label08:
        return $r14;

     label09:
        $r1 := @caughtexception;

     label10:
        $r15 = new java.net.URL;

        specialinvoke $r15.<java.net.URL: void <init>(java.lang.String)>($r7);

        $r16 = virtualinvoke $r15.<java.net.URL: java.lang.String toExternalForm()>();

     label11:
        return $r16;

     label12:
        $r2 := @caughtexception;

        return "";

        catch java.net.MalformedURLException from label02 to label03 with label09;
        catch java.net.MalformedURLException from label03 to label04 with label12;
        catch java.net.MalformedURLException from label05 to label06 with label12;
        catch java.net.MalformedURLException from label07 to label08 with label12;
        catch java.net.MalformedURLException from label10 to label11 with label12;
    }

    protected transient void addChildren(int, org.jsoup.nodes.Node[])
    {
        java.util.List $r0;
        org.jsoup.nodes.Node[] $r1;
        int $i0, $i1, $i2;
        org.jsoup.nodes.Node $r2, $r3;

        $r2 := @this: org.jsoup.nodes.Node;

        $i0 := @parameter0: int;

        $r1 := @parameter1: org.jsoup.nodes.Node[];

        staticinvoke <org.jsoup.helper.Validate: void noNullElements(java.lang.Object[])>($r1);

        $i1 = lengthof $r1;

        $i2 = $i1 + -1;

     label1:
        if $i2 < 0 goto label2;

        $r3 = $r1[$i2];

        specialinvoke $r2.<org.jsoup.nodes.Node: void reparentChild(org.jsoup.nodes.Node)>($r3);

        $r0 = $r2.<org.jsoup.nodes.Node: java.util.List childNodes>;

        interfaceinvoke $r0.<java.util.List: void add(int,java.lang.Object)>($i0, $r3);

        $i2 = $i2 + -1;

        goto label1;

     label2:
        specialinvoke $r2.<org.jsoup.nodes.Node: void reindexChildren()>();

        return;
    }

    protected transient void addChildren(org.jsoup.nodes.Node[])
    {
        java.util.List $r0, $r4;
        int $i0, $i1, $i2, $i3;
        org.jsoup.nodes.Node[] $r1;
        org.jsoup.nodes.Node $r2, $r3;

        $r2 := @this: org.jsoup.nodes.Node;

        $r1 := @parameter0: org.jsoup.nodes.Node[];

        $i1 = lengthof $r1;

        $i0 = 0;

     label1:
        if $i0 >= $i1 goto label2;

        $r3 = $r1[$i0];

        specialinvoke $r2.<org.jsoup.nodes.Node: void reparentChild(org.jsoup.nodes.Node)>($r3);

        $r0 = $r2.<org.jsoup.nodes.Node: java.util.List childNodes>;

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r3);

        $r4 = $r2.<org.jsoup.nodes.Node: java.util.List childNodes>;

        $i2 = interfaceinvoke $r4.<java.util.List: int size()>();

        $i3 = $i2 + -1;

        virtualinvoke $r3.<org.jsoup.nodes.Node: void setSiblingIndex(int)>($i3);

        $i0 = $i0 + 1;

        goto label1;

     label2:
        return;
    }

    public org.jsoup.nodes.Node after(java.lang.String)
    {
        int $i0, $i1;
        java.lang.String $r0;
        org.jsoup.nodes.Node $r1;

        $r1 := @this: org.jsoup.nodes.Node;

        $r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke $r1.<org.jsoup.nodes.Node: int siblingIndex()>();

        $i1 = $i0 + 1;

        specialinvoke $r1.<org.jsoup.nodes.Node: void addSiblingHtml(int,java.lang.String)>($i1, $r0);

        return $r1;
    }

    public org.jsoup.nodes.Node after(org.jsoup.nodes.Node)
    {
        org.jsoup.nodes.Node[] $r0;
        int $i0, $i1;
        org.jsoup.nodes.Node $r1, $r2, $r3, $r4;

        $r1 := @this: org.jsoup.nodes.Node;

        $r2 := @parameter0: org.jsoup.nodes.Node;

        staticinvoke <org.jsoup.helper.Validate: void notNull(java.lang.Object)>($r2);

        $r3 = $r1.<org.jsoup.nodes.Node: org.jsoup.nodes.Node parentNode>;

        staticinvoke <org.jsoup.helper.Validate: void notNull(java.lang.Object)>($r3);

        $r4 = $r1.<org.jsoup.nodes.Node: org.jsoup.nodes.Node parentNode>;

        $i0 = virtualinvoke $r1.<org.jsoup.nodes.Node: int siblingIndex()>();

        $i1 = $i0 + 1;

        $r0 = newarray (org.jsoup.nodes.Node)[1];

        $r0[0] = $r2;

        virtualinvoke $r4.<org.jsoup.nodes.Node: void addChildren(int,org.jsoup.nodes.Node[])>($i1, $r0);

        return $r1;
    }

    public java.lang.String attr(java.lang.String)
    {
        int $i0;
        boolean $z0, $z1;
        org.jsoup.nodes.Attributes $r0, $r4;
        java.lang.String $r1, $r2, $r5, $r6, $r7, $r8;
        org.jsoup.nodes.Node $r3;

        $r3 := @this: org.jsoup.nodes.Node;

        $r1 := @parameter0: java.lang.String;

        staticinvoke <org.jsoup.helper.Validate: void notNull(java.lang.Object)>($r1);

        $r0 = $r3.<org.jsoup.nodes.Node: org.jsoup.nodes.Attributes attributes>;

        $z0 = virtualinvoke $r0.<org.jsoup.nodes.Attributes: boolean hasKey(java.lang.String)>($r1);

        if $z0 == 0 goto label1;

        $r4 = $r3.<org.jsoup.nodes.Node: org.jsoup.nodes.Attributes attributes>;

        $r5 = virtualinvoke $r4.<org.jsoup.nodes.Attributes: java.lang.String get(java.lang.String)>($r1);

        return $r5;

     label1:
        $r2 = virtualinvoke $r1.<java.lang.String: java.lang.String toLowerCase()>();

        $z1 = virtualinvoke $r2.<java.lang.String: boolean startsWith(java.lang.String)>("abs:");

        if $z1 == 0 goto label2;

        $r6 = "abs:";

        $i0 = virtualinvoke $r6.<java.lang.String: int length()>();

        $r7 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int)>($i0);

        $r8 = virtualinvoke $r3.<org.jsoup.nodes.Node: java.lang.String absUrl(java.lang.String)>($r7);

        return $r8;

     label2:
        return "";
    }

    public org.jsoup.nodes.Node attr(java.lang.String, java.lang.String)
    {
        org.jsoup.nodes.Attributes $r0;
        java.lang.String $r1, $r2;
        org.jsoup.nodes.Node $r3;

        $r3 := @this: org.jsoup.nodes.Node;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r0 = $r3.<org.jsoup.nodes.Node: org.jsoup.nodes.Attributes attributes>;

        virtualinvoke $r0.<org.jsoup.nodes.Attributes: void put(java.lang.String,java.lang.String)>($r1, $r2);

        return $r3;
    }

    public org.jsoup.nodes.Attributes attributes()
    {
        org.jsoup.nodes.Attributes r0;
        org.jsoup.nodes.Node $r1;

        $r1 := @this: org.jsoup.nodes.Node;

        r0 = $r1.<org.jsoup.nodes.Node: org.jsoup.nodes.Attributes attributes>;

        return r0;
    }

    public java.lang.String baseUri()
    {
        java.lang.String r0;
        org.jsoup.nodes.Node $r1;

        $r1 := @this: org.jsoup.nodes.Node;

        r0 = $r1.<org.jsoup.nodes.Node: java.lang.String baseUri>;

        return r0;
    }

    public org.jsoup.nodes.Node before(java.lang.String)
    {
        int $i0;
        java.lang.String $r0;
        org.jsoup.nodes.Node $r1;

        $r1 := @this: org.jsoup.nodes.Node;

        $r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke $r1.<org.jsoup.nodes.Node: int siblingIndex()>();

        specialinvoke $r1.<org.jsoup.nodes.Node: void addSiblingHtml(int,java.lang.String)>($i0, $r0);

        return $r1;
    }

    public org.jsoup.nodes.Node before(org.jsoup.nodes.Node)
    {
        org.jsoup.nodes.Node[] $r0;
        int $i0;
        org.jsoup.nodes.Node $r1, $r2, $r3, $r4;

        $r1 := @this: org.jsoup.nodes.Node;

        $r2 := @parameter0: org.jsoup.nodes.Node;

        staticinvoke <org.jsoup.helper.Validate: void notNull(java.lang.Object)>($r2);

        $r3 = $r1.<org.jsoup.nodes.Node: org.jsoup.nodes.Node parentNode>;

        staticinvoke <org.jsoup.helper.Validate: void notNull(java.lang.Object)>($r3);

        $r4 = $r1.<org.jsoup.nodes.Node: org.jsoup.nodes.Node parentNode>;

        $i0 = virtualinvoke $r1.<org.jsoup.nodes.Node: int siblingIndex()>();

        $r0 = newarray (org.jsoup.nodes.Node)[1];

        $r0[0] = $r2;

        virtualinvoke $r4.<org.jsoup.nodes.Node: void addChildren(int,org.jsoup.nodes.Node[])>($i0, $r0);

        return $r1;
    }

    public org.jsoup.nodes.Node childNode(int)
    {
        java.lang.Object $r0;
        java.util.List $r1;
        int $i0;
        org.jsoup.nodes.Node $r2, $r3;

        $r2 := @this: org.jsoup.nodes.Node;

        $i0 := @parameter0: int;

        $r1 = $r2.<org.jsoup.nodes.Node: java.util.List childNodes>;

        $r0 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>($i0);

        $r3 = (org.jsoup.nodes.Node) $r0;

        return $r3;
    }

    public java.util.List childNodes()
    {
        java.util.List $r0, $r2;
        org.jsoup.nodes.Node $r1;

        $r1 := @this: org.jsoup.nodes.Node;

        $r0 = $r1.<org.jsoup.nodes.Node: java.util.List childNodes>;

        $r2 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r0);

        return $r2;
    }

    protected org.jsoup.nodes.Node[] childNodesAsArray()
    {
        java.lang.Object[] $r0;
        org.jsoup.nodes.Node[] $r1, $r5;
        int $i0;
        java.util.List $r2, $r3;
        org.jsoup.nodes.Node $r4;

        $r4 := @this: org.jsoup.nodes.Node;

        $r2 = $r4.<org.jsoup.nodes.Node: java.util.List childNodes>;

        $r3 = virtualinvoke $r4.<org.jsoup.nodes.Node: java.util.List childNodes()>();

        $i0 = interfaceinvoke $r3.<java.util.List: int size()>();

        $r1 = newarray (org.jsoup.nodes.Node)[$i0];

        $r0 = interfaceinvoke $r2.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r1);

        $r5 = (org.jsoup.nodes.Node[]) $r0;

        return $r5;
    }

    public volatile java.lang.Object clone() throws java.lang.CloneNotSupportedException
    {
        org.jsoup.nodes.Node $r0, $r1;

        $r0 := @this: org.jsoup.nodes.Node;

        $r1 = virtualinvoke $r0.<org.jsoup.nodes.Node: org.jsoup.nodes.Node clone()>();

        return $r1;
    }

    public org.jsoup.nodes.Node clone()
    {
        org.jsoup.nodes.Node $r0, $r1;

        $r0 := @this: org.jsoup.nodes.Node;

        $r1 = virtualinvoke $r0.<org.jsoup.nodes.Node: org.jsoup.nodes.Node doClone(org.jsoup.nodes.Node)>(null);

        return $r1;
    }

    protected org.jsoup.nodes.Node doClone(org.jsoup.nodes.Node)
    {
        java.lang.RuntimeException $r0;
        boolean $z0;
        java.util.Iterator $r1;
        java.util.ArrayList $r2;
        java.lang.String $r3;
        org.jsoup.nodes.Attributes $r4, $r11, $r12;
        java.lang.Object $r5, $r14;
        java.util.List $r6, $r13, $r16;
        int $i0, $i1;
        java.lang.CloneNotSupportedException $r7;
        org.jsoup.nodes.Node $r8, $r9, $r10, $r15, $r17;

        $r8 := @this: org.jsoup.nodes.Node;

        $r9 := @parameter0: org.jsoup.nodes.Node;

     label1:
        $r5 = specialinvoke $r8.<java.lang.Object: java.lang.Object clone()>();

     label2:
        $r10 = (org.jsoup.nodes.Node) $r5;

        $r10.<org.jsoup.nodes.Node: org.jsoup.nodes.Node parentNode> = $r9;

        if $r9 != null goto label7;

        $i0 = 0;

     label3:
        $r10.<org.jsoup.nodes.Node: int siblingIndex> = $i0;

        $r4 = $r8.<org.jsoup.nodes.Node: org.jsoup.nodes.Attributes attributes>;

        if $r4 == null goto label8;

        $r11 = $r8.<org.jsoup.nodes.Node: org.jsoup.nodes.Attributes attributes>;

        $r12 = virtualinvoke $r11.<org.jsoup.nodes.Attributes: org.jsoup.nodes.Attributes clone()>();

     label4:
        $r10.<org.jsoup.nodes.Node: org.jsoup.nodes.Attributes attributes> = $r12;

        $r3 = $r8.<org.jsoup.nodes.Node: java.lang.String baseUri>;

        $r10.<org.jsoup.nodes.Node: java.lang.String baseUri> = $r3;

        $r2 = new java.util.ArrayList;

        $r6 = $r8.<org.jsoup.nodes.Node: java.util.List childNodes>;

        $i1 = interfaceinvoke $r6.<java.util.List: int size()>();

        specialinvoke $r2.<java.util.ArrayList: void <init>(int)>($i1);

        $r10.<org.jsoup.nodes.Node: java.util.List childNodes> = $r2;

        $r13 = $r8.<org.jsoup.nodes.Node: java.util.List childNodes>;

        $r1 = interfaceinvoke $r13.<java.util.List: java.util.Iterator iterator()>();

     label5:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label9;

        $r14 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r15 = (org.jsoup.nodes.Node) $r14;

        $r16 = $r10.<org.jsoup.nodes.Node: java.util.List childNodes>;

        $r17 = virtualinvoke $r15.<org.jsoup.nodes.Node: org.jsoup.nodes.Node doClone(org.jsoup.nodes.Node)>($r10);

        interfaceinvoke $r16.<java.util.List: boolean add(java.lang.Object)>($r17);

        goto label5;

     label6:
        $r7 := @caughtexception;

        $r0 = new java.lang.RuntimeException;

        specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r7);

        throw $r0;

     label7:
        $i0 = $r8.<org.jsoup.nodes.Node: int siblingIndex>;

        goto label3;

     label8:
        $r12 = null;

        goto label4;

     label9:
        return $r10;

        catch java.lang.CloneNotSupportedException from label1 to label2 with label6;
    }

    public boolean equals(java.lang.Object)
    {
        java.lang.Object $r0;
        org.jsoup.nodes.Node $r1;

        $r1 := @this: org.jsoup.nodes.Node;

        $r0 := @parameter0: java.lang.Object;

        if $r1 != $r0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public boolean hasAttr(java.lang.String)
    {
        org.jsoup.nodes.Attributes $r0, $r7;
        int $i0;
        boolean $z0, $z1, $z2, $z3;
        java.lang.String $r1, $r2, $r4, $r5, $r6;
        org.jsoup.nodes.Node $r3;

        $r3 := @this: org.jsoup.nodes.Node;

        $r1 := @parameter0: java.lang.String;

        staticinvoke <org.jsoup.helper.Validate: void notNull(java.lang.Object)>($r1);

        $r2 = virtualinvoke $r1.<java.lang.String: java.lang.String toLowerCase()>();

        $z0 = virtualinvoke $r2.<java.lang.String: boolean startsWith(java.lang.String)>("abs:");

        if $z0 == 0 goto label1;

        $r4 = "abs:";

        $i0 = virtualinvoke $r4.<java.lang.String: int length()>();

        $r5 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int)>($i0);

        $r0 = $r3.<org.jsoup.nodes.Node: org.jsoup.nodes.Attributes attributes>;

        $z1 = virtualinvoke $r0.<org.jsoup.nodes.Attributes: boolean hasKey(java.lang.String)>($r5);

        if $z1 == 0 goto label1;

        $r6 = virtualinvoke $r3.<org.jsoup.nodes.Node: java.lang.String absUrl(java.lang.String)>($r5);

        $z2 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>("");

        if $z2 != 0 goto label1;

        return 1;

     label1:
        $r7 = $r3.<org.jsoup.nodes.Node: org.jsoup.nodes.Attributes attributes>;

        $z3 = virtualinvoke $r7.<org.jsoup.nodes.Attributes: boolean hasKey(java.lang.String)>($r1);

        return $z3;
    }

    public int hashCode()
    {
        org.jsoup.nodes.Attributes $r0, $r4;
        int $i0, $i1, $i2, $i3;
        org.jsoup.nodes.Node $r1, $r2, $r3;

        $r1 := @this: org.jsoup.nodes.Node;

        $i1 = 0;

        $r2 = $r1.<org.jsoup.nodes.Node: org.jsoup.nodes.Node parentNode>;

        if $r2 == null goto label3;

        $r3 = $r1.<org.jsoup.nodes.Node: org.jsoup.nodes.Node parentNode>;

        $i0 = virtualinvoke $r3.<org.jsoup.nodes.Node: int hashCode()>();

     label1:
        $i2 = $i0 * 31;

        $r0 = $r1.<org.jsoup.nodes.Node: org.jsoup.nodes.Attributes attributes>;

        if $r0 == null goto label2;

        $r4 = $r1.<org.jsoup.nodes.Node: org.jsoup.nodes.Attributes attributes>;

        $i1 = virtualinvoke $r4.<org.jsoup.nodes.Attributes: int hashCode()>();

     label2:
        $i3 = $i2 + $i1;

        return $i3;

     label3:
        $i0 = 0;

        goto label1;
    }

    protected void indent(java.lang.StringBuilder, int, org.jsoup.nodes.Document$OutputSettings)
    {
        java.lang.String $r0;
        org.jsoup.nodes.Document$OutputSettings $r1;
        int $i0, $i1, $i2;
        java.lang.StringBuilder $r2, $r4;
        org.jsoup.nodes.Node $r3;

        $r3 := @this: org.jsoup.nodes.Node;

        $r2 := @parameter0: java.lang.StringBuilder;

        $i0 := @parameter1: int;

        $r1 := @parameter2: org.jsoup.nodes.Document$OutputSettings;

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $i1 = virtualinvoke $r1.<org.jsoup.nodes.Document$OutputSettings: int indentAmount()>();

        $i2 = $i1 * $i0;

        $r0 = staticinvoke <org.jsoup.helper.StringUtil: java.lang.String padding(int)>($i2);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        return;
    }

    public org.jsoup.nodes.Node nextSibling()
    {
        java.lang.Object $r0;
        java.lang.Integer $r1;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        java.util.List $r2;
        org.jsoup.nodes.Node $r3, $r4, $r5, $r6;

        $r3 := @this: org.jsoup.nodes.Node;

        $r4 = $r3.<org.jsoup.nodes.Node: org.jsoup.nodes.Node parentNode>;

        if $r4 != null goto label1;

        return null;

     label1:
        $r5 = $r3.<org.jsoup.nodes.Node: org.jsoup.nodes.Node parentNode>;

        $r2 = $r5.<org.jsoup.nodes.Node: java.util.List childNodes>;

        $i0 = virtualinvoke $r3.<org.jsoup.nodes.Node: int siblingIndex()>();

        $r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        staticinvoke <org.jsoup.helper.Validate: void notNull(java.lang.Object)>($r1);

        $i2 = interfaceinvoke $r2.<java.util.List: int size()>();

        $i1 = virtualinvoke $r1.<java.lang.Integer: int intValue()>();

        $i3 = $i1 + 1;

        if $i2 <= $i3 goto label2;

        $i4 = virtualinvoke $r1.<java.lang.Integer: int intValue()>();

        $i5 = $i4 + 1;

        $r0 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>($i5);

        $r6 = (org.jsoup.nodes.Node) $r0;

        return $r6;

     label2:
        return null;
    }

    public abstract java.lang.String nodeName();

    public java.lang.String outerHtml()
    {
        java.lang.String $r0;
        java.lang.StringBuilder $r1;
        org.jsoup.nodes.Node $r2;

        $r2 := @this: org.jsoup.nodes.Node;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>(int)>(128);

        virtualinvoke $r2.<org.jsoup.nodes.Node: void outerHtml(java.lang.StringBuilder)>($r1);

        $r0 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r0;
    }

    protected void outerHtml(java.lang.StringBuilder)
    {
        org.jsoup.nodes.Document$OutputSettings $r0;
        org.jsoup.nodes.Node$OuterHtmlVisitor $r1;
        org.jsoup.select.NodeTraversor $r2;
        java.lang.StringBuilder $r3;
        org.jsoup.nodes.Node $r4;

        $r4 := @this: org.jsoup.nodes.Node;

        $r3 := @parameter0: java.lang.StringBuilder;

        $r2 = new org.jsoup.select.NodeTraversor;

        $r1 = new org.jsoup.nodes.Node$OuterHtmlVisitor;

        $r0 = specialinvoke $r4.<org.jsoup.nodes.Node: org.jsoup.nodes.Document$OutputSettings getOutputSettings()>();

        specialinvoke $r1.<org.jsoup.nodes.Node$OuterHtmlVisitor: void <init>(java.lang.StringBuilder,org.jsoup.nodes.Document$OutputSettings)>($r3, $r0);

        specialinvoke $r2.<org.jsoup.select.NodeTraversor: void <init>(org.jsoup.select.NodeVisitor)>($r1);

        virtualinvoke $r2.<org.jsoup.select.NodeTraversor: void traverse(org.jsoup.nodes.Node)>($r4);

        return;
    }

    abstract void outerHtmlHead(java.lang.StringBuilder, int, org.jsoup.nodes.Document$OutputSettings);

    abstract void outerHtmlTail(java.lang.StringBuilder, int, org.jsoup.nodes.Document$OutputSettings);

    public org.jsoup.nodes.Document ownerDocument()
    {
        org.jsoup.nodes.Document $r0, $r4;
        boolean $z0;
        org.jsoup.nodes.Node $r1, $r2, $r3;

        $r1 := @this: org.jsoup.nodes.Node;

        $z0 = $r1 instanceof org.jsoup.nodes.Document;

        if $z0 == 0 goto label1;

        $r0 = (org.jsoup.nodes.Document) $r1;

        return $r0;

     label1:
        $r2 = $r1.<org.jsoup.nodes.Node: org.jsoup.nodes.Node parentNode>;

        if $r2 != null goto label2;

        return null;

     label2:
        $r3 = $r1.<org.jsoup.nodes.Node: org.jsoup.nodes.Node parentNode>;

        $r4 = virtualinvoke $r3.<org.jsoup.nodes.Node: org.jsoup.nodes.Document ownerDocument()>();

        return $r4;
    }

    public org.jsoup.nodes.Node parent()
    {
        org.jsoup.nodes.Node $r0, $r1;

        $r0 := @this: org.jsoup.nodes.Node;

        $r1 = $r0.<org.jsoup.nodes.Node: org.jsoup.nodes.Node parentNode>;

        return $r1;
    }

    public org.jsoup.nodes.Node previousSibling()
    {
        java.lang.Object $r0;
        java.lang.Integer $r1;
        int $i0, $i1, $i2, $i3;
        java.util.List $r2;
        org.jsoup.nodes.Node $r3, $r4, $r5, $r6;

        $r3 := @this: org.jsoup.nodes.Node;

        $r4 = $r3.<org.jsoup.nodes.Node: org.jsoup.nodes.Node parentNode>;

        if $r4 != null goto label1;

        return null;

     label1:
        $r5 = $r3.<org.jsoup.nodes.Node: org.jsoup.nodes.Node parentNode>;

        $r2 = $r5.<org.jsoup.nodes.Node: java.util.List childNodes>;

        $i0 = virtualinvoke $r3.<org.jsoup.nodes.Node: int siblingIndex()>();

        $r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        staticinvoke <org.jsoup.helper.Validate: void notNull(java.lang.Object)>($r1);

        $i1 = virtualinvoke $r1.<java.lang.Integer: int intValue()>();

        if $i1 <= 0 goto label2;

        $i2 = virtualinvoke $r1.<java.lang.Integer: int intValue()>();

        $i3 = $i2 + -1;

        $r0 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>($i3);

        $r6 = (org.jsoup.nodes.Node) $r0;

        return $r6;

     label2:
        return null;
    }

    public void remove()
    {
        org.jsoup.nodes.Node $r0, $r1, $r2;

        $r0 := @this: org.jsoup.nodes.Node;

        $r1 = $r0.<org.jsoup.nodes.Node: org.jsoup.nodes.Node parentNode>;

        staticinvoke <org.jsoup.helper.Validate: void notNull(java.lang.Object)>($r1);

        $r2 = $r0.<org.jsoup.nodes.Node: org.jsoup.nodes.Node parentNode>;

        virtualinvoke $r2.<org.jsoup.nodes.Node: void removeChild(org.jsoup.nodes.Node)>($r0);

        return;
    }

    public org.jsoup.nodes.Node removeAttr(java.lang.String)
    {
        org.jsoup.nodes.Attributes $r0;
        java.lang.String $r1;
        org.jsoup.nodes.Node $r2;

        $r2 := @this: org.jsoup.nodes.Node;

        $r1 := @parameter0: java.lang.String;

        staticinvoke <org.jsoup.helper.Validate: void notNull(java.lang.Object)>($r1);

        $r0 = $r2.<org.jsoup.nodes.Node: org.jsoup.nodes.Attributes attributes>;

        virtualinvoke $r0.<org.jsoup.nodes.Attributes: void remove(java.lang.String)>($r1);

        return $r2;
    }

    protected void removeChild(org.jsoup.nodes.Node)
    {
        java.util.List $r0;
        boolean $z0;
        int $i0;
        org.jsoup.nodes.Node $r1, $r2, $r3;

        $r1 := @this: org.jsoup.nodes.Node;

        $r2 := @parameter0: org.jsoup.nodes.Node;

        $r3 = $r2.<org.jsoup.nodes.Node: org.jsoup.nodes.Node parentNode>;

        if $r3 != $r1 goto label2;

        $z0 = 1;

     label1:
        staticinvoke <org.jsoup.helper.Validate: void isTrue(boolean)>($z0);

        $i0 = virtualinvoke $r2.<org.jsoup.nodes.Node: int siblingIndex()>();

        $r0 = $r1.<org.jsoup.nodes.Node: java.util.List childNodes>;

        interfaceinvoke $r0.<java.util.List: java.lang.Object remove(int)>($i0);

        specialinvoke $r1.<org.jsoup.nodes.Node: void reindexChildren()>();

        $r2.<org.jsoup.nodes.Node: org.jsoup.nodes.Node parentNode> = null;

        return;

     label2:
        $z0 = 0;

        goto label1;
    }

    protected void replaceChild(org.jsoup.nodes.Node, org.jsoup.nodes.Node)
    {
        java.util.List $r0;
        java.lang.Integer $r1;
        boolean $z0;
        int $i0, $i1, $i2;
        org.jsoup.nodes.Node $r2, $r3, $r4, $r5, $r6, $r7;

        $r2 := @this: org.jsoup.nodes.Node;

        $r3 := @parameter0: org.jsoup.nodes.Node;

        $r4 := @parameter1: org.jsoup.nodes.Node;

        $r5 = $r3.<org.jsoup.nodes.Node: org.jsoup.nodes.Node parentNode>;

        if $r5 != $r2 goto label3;

        $z0 = 1;

     label1:
        staticinvoke <org.jsoup.helper.Validate: void isTrue(boolean)>($z0);

        staticinvoke <org.jsoup.helper.Validate: void notNull(java.lang.Object)>($r4);

        $r6 = $r4.<org.jsoup.nodes.Node: org.jsoup.nodes.Node parentNode>;

        if $r6 == null goto label2;

        $r7 = $r4.<org.jsoup.nodes.Node: org.jsoup.nodes.Node parentNode>;

        virtualinvoke $r7.<org.jsoup.nodes.Node: void removeChild(org.jsoup.nodes.Node)>($r4);

     label2:
        $i0 = virtualinvoke $r3.<org.jsoup.nodes.Node: int siblingIndex()>();

        $r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r0 = $r2.<org.jsoup.nodes.Node: java.util.List childNodes>;

        $i1 = virtualinvoke $r1.<java.lang.Integer: int intValue()>();

        interfaceinvoke $r0.<java.util.List: java.lang.Object set(int,java.lang.Object)>($i1, $r4);

        $r4.<org.jsoup.nodes.Node: org.jsoup.nodes.Node parentNode> = $r2;

        $i2 = virtualinvoke $r1.<java.lang.Integer: int intValue()>();

        virtualinvoke $r4.<org.jsoup.nodes.Node: void setSiblingIndex(int)>($i2);

        $r3.<org.jsoup.nodes.Node: org.jsoup.nodes.Node parentNode> = null;

        return;

     label3:
        $z0 = 0;

        goto label1;
    }

    public void replaceWith(org.jsoup.nodes.Node)
    {
        org.jsoup.nodes.Node $r0, $r1, $r2, $r3;

        $r0 := @this: org.jsoup.nodes.Node;

        $r1 := @parameter0: org.jsoup.nodes.Node;

        staticinvoke <org.jsoup.helper.Validate: void notNull(java.lang.Object)>($r1);

        $r2 = $r0.<org.jsoup.nodes.Node: org.jsoup.nodes.Node parentNode>;

        staticinvoke <org.jsoup.helper.Validate: void notNull(java.lang.Object)>($r2);

        $r3 = $r0.<org.jsoup.nodes.Node: org.jsoup.nodes.Node parentNode>;

        virtualinvoke $r3.<org.jsoup.nodes.Node: void replaceChild(org.jsoup.nodes.Node,org.jsoup.nodes.Node)>($r0, $r1);

        return;
    }

    public void setBaseUri(java.lang.String)
    {
        org.jsoup.nodes.Node$1 $r0;
        java.lang.String $r1;
        org.jsoup.nodes.Node $r2;

        $r2 := @this: org.jsoup.nodes.Node;

        $r1 := @parameter0: java.lang.String;

        staticinvoke <org.jsoup.helper.Validate: void notNull(java.lang.Object)>($r1);

        $r0 = new org.jsoup.nodes.Node$1;

        specialinvoke $r0.<org.jsoup.nodes.Node$1: void <init>(org.jsoup.nodes.Node,java.lang.String)>($r2, $r1);

        virtualinvoke $r2.<org.jsoup.nodes.Node: org.jsoup.nodes.Node traverse(org.jsoup.select.NodeVisitor)>($r0);

        return;
    }

    protected void setParentNode(org.jsoup.nodes.Node)
    {
        org.jsoup.nodes.Node $r0, $r1, $r2, $r3;

        $r0 := @this: org.jsoup.nodes.Node;

        $r1 := @parameter0: org.jsoup.nodes.Node;

        $r2 = $r0.<org.jsoup.nodes.Node: org.jsoup.nodes.Node parentNode>;

        if $r2 == null goto label1;

        $r3 = $r0.<org.jsoup.nodes.Node: org.jsoup.nodes.Node parentNode>;

        virtualinvoke $r3.<org.jsoup.nodes.Node: void removeChild(org.jsoup.nodes.Node)>($r0);

     label1:
        $r0.<org.jsoup.nodes.Node: org.jsoup.nodes.Node parentNode> = $r1;

        return;
    }

    protected void setSiblingIndex(int)
    {
        int $i0;
        org.jsoup.nodes.Node $r0;

        $r0 := @this: org.jsoup.nodes.Node;

        $i0 := @parameter0: int;

        $r0.<org.jsoup.nodes.Node: int siblingIndex> = $i0;

        return;
    }

    public int siblingIndex()
    {
        int i0;
        org.jsoup.nodes.Node $r0;

        $r0 := @this: org.jsoup.nodes.Node;

        i0 = $r0.<org.jsoup.nodes.Node: int siblingIndex>;

        return i0;
    }

    public java.util.List siblingNodes()
    {
        java.lang.Object $r0;
        boolean $z0;
        java.util.Iterator $r1;
        int $i0, $i1;
        java.util.ArrayList $r2;
        java.util.List $r3, $r7;
        org.jsoup.nodes.Node $r4, $r5, $r6, $r8;

        $r4 := @this: org.jsoup.nodes.Node;

        $r5 = $r4.<org.jsoup.nodes.Node: org.jsoup.nodes.Node parentNode>;

        if $r5 != null goto label1;

        $r3 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        return $r3;

     label1:
        $r6 = $r4.<org.jsoup.nodes.Node: org.jsoup.nodes.Node parentNode>;

        $r7 = $r6.<org.jsoup.nodes.Node: java.util.List childNodes>;

        $r2 = new java.util.ArrayList;

        $i0 = interfaceinvoke $r7.<java.util.List: int size()>();

        $i1 = $i0 + -1;

        specialinvoke $r2.<java.util.ArrayList: void <init>(int)>($i1);

        $r1 = interfaceinvoke $r7.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r0 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r8 = (org.jsoup.nodes.Node) $r0;

        if $r8 == $r4 goto label2;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r8);

        goto label2;

     label3:
        return $r2;
    }

    public java.lang.String toString()
    {
        java.lang.String $r0;
        org.jsoup.nodes.Node $r1;

        $r1 := @this: org.jsoup.nodes.Node;

        $r0 = virtualinvoke $r1.<org.jsoup.nodes.Node: java.lang.String outerHtml()>();

        return $r0;
    }

    public org.jsoup.nodes.Node traverse(org.jsoup.select.NodeVisitor)
    {
        org.jsoup.select.NodeTraversor $r0;
        org.jsoup.select.NodeVisitor $r1;
        org.jsoup.nodes.Node $r2;

        $r2 := @this: org.jsoup.nodes.Node;

        $r1 := @parameter0: org.jsoup.select.NodeVisitor;

        staticinvoke <org.jsoup.helper.Validate: void notNull(java.lang.Object)>($r1);

        $r0 = new org.jsoup.select.NodeTraversor;

        specialinvoke $r0.<org.jsoup.select.NodeTraversor: void <init>(org.jsoup.select.NodeVisitor)>($r1);

        virtualinvoke $r0.<org.jsoup.select.NodeTraversor: void traverse(org.jsoup.nodes.Node)>($r2);

        return $r2;
    }

    public org.jsoup.nodes.Node unwrap()
    {
        org.jsoup.nodes.Node[] $r0;
        java.lang.Object $r1;
        java.util.List $r2, $r6;
        int $i0, $i1;
        org.jsoup.nodes.Node $r3, $r4, $r5, $r7;

        $r3 := @this: org.jsoup.nodes.Node;

        $r4 = $r3.<org.jsoup.nodes.Node: org.jsoup.nodes.Node parentNode>;

        staticinvoke <org.jsoup.helper.Validate: void notNull(java.lang.Object)>($r4);

        $i0 = $r3.<org.jsoup.nodes.Node: int siblingIndex>;

        $r2 = $r3.<org.jsoup.nodes.Node: java.util.List childNodes>;

        $i1 = interfaceinvoke $r2.<java.util.List: int size()>();

        if $i1 <= 0 goto label2;

        $r6 = $r3.<org.jsoup.nodes.Node: java.util.List childNodes>;

        $r1 = interfaceinvoke $r6.<java.util.List: java.lang.Object get(int)>(0);

        $r7 = (org.jsoup.nodes.Node) $r1;

     label1:
        $r5 = $r3.<org.jsoup.nodes.Node: org.jsoup.nodes.Node parentNode>;

        $r0 = virtualinvoke $r3.<org.jsoup.nodes.Node: org.jsoup.nodes.Node[] childNodesAsArray()>();

        virtualinvoke $r5.<org.jsoup.nodes.Node: void addChildren(int,org.jsoup.nodes.Node[])>($i0, $r0);

        virtualinvoke $r3.<org.jsoup.nodes.Node: void remove()>();

        return $r7;

     label2:
        $r7 = null;

        goto label1;
    }

    public org.jsoup.nodes.Node wrap(java.lang.String)
    {
        org.jsoup.nodes.Node[] $r0;
        java.lang.Object $r1, $r14;
        java.util.List $r2;
        boolean $z0, $z1;
        int $i0, $i1, $i2;
        org.jsoup.nodes.Element $r3, $r4, $r12;
        java.lang.String $r5, $r6;
        org.jsoup.nodes.Node $r7, $r8, $r9, $r10, $r11, $r13, $r15;

        $r7 := @this: org.jsoup.nodes.Node;

        $r5 := @parameter0: java.lang.String;

        staticinvoke <org.jsoup.helper.Validate: void notEmpty(java.lang.String)>($r5);

        $r8 = virtualinvoke $r7.<org.jsoup.nodes.Node: org.jsoup.nodes.Node parent()>();

        $z0 = $r8 instanceof org.jsoup.nodes.Element;

        if $z0 == 0 goto label3;

        $r10 = virtualinvoke $r7.<org.jsoup.nodes.Node: org.jsoup.nodes.Node parent()>();

        $r3 = (org.jsoup.nodes.Element) $r10;

     label1:
        $r6 = virtualinvoke $r7.<org.jsoup.nodes.Node: java.lang.String baseUri()>();

        $r2 = staticinvoke <org.jsoup.parser.Parser: java.util.List parseFragment(java.lang.String,org.jsoup.nodes.Element,java.lang.String)>($r5, $r3, $r6);

        $r1 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>(0);

        $r11 = (org.jsoup.nodes.Node) $r1;

        if $r11 == null goto label2;

        $z1 = $r11 instanceof org.jsoup.nodes.Element;

        if $z1 != 0 goto label4;

     label2:
        return null;

     label3:
        $r3 = null;

        goto label1;

     label4:
        $r12 = (org.jsoup.nodes.Element) $r11;

        $r4 = specialinvoke $r7.<org.jsoup.nodes.Node: org.jsoup.nodes.Element getDeepChild(org.jsoup.nodes.Element)>($r12);

        $r13 = $r7.<org.jsoup.nodes.Node: org.jsoup.nodes.Node parentNode>;

        virtualinvoke $r13.<org.jsoup.nodes.Node: void replaceChild(org.jsoup.nodes.Node,org.jsoup.nodes.Node)>($r7, $r12);

        $r0 = newarray (org.jsoup.nodes.Node)[1];

        $r0[0] = $r7;

        virtualinvoke $r4.<org.jsoup.nodes.Element: void addChildren(org.jsoup.nodes.Node[])>($r0);

        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        if $i0 <= 0 goto label6;

        $i2 = 0;

     label5:
        $i1 = interfaceinvoke $r2.<java.util.List: int size()>();

        if $i2 >= $i1 goto label7;

        $r14 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>($i2);

        $r15 = (org.jsoup.nodes.Node) $r14;

        $r9 = $r15.<org.jsoup.nodes.Node: org.jsoup.nodes.Node parentNode>;

        virtualinvoke $r9.<org.jsoup.nodes.Node: void removeChild(org.jsoup.nodes.Node)>($r15);

        virtualinvoke $r12.<org.jsoup.nodes.Element: org.jsoup.nodes.Element appendChild(org.jsoup.nodes.Node)>($r15);

        $i2 = $i2 + 1;

        goto label5;

     label6:
        return $r7;

     label7:
        return $r7;
    }
}
