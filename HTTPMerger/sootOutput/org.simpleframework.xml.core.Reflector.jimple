final class org.simpleframework.xml.core.Reflector extends java.lang.Object
{

    void <init>()
    {
        org.simpleframework.xml.core.Reflector $r0;

        $r0 := @this: org.simpleframework.xml.core.Reflector;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    private static java.lang.Class getArrayClass(java.lang.reflect.Type)
    {
        java.lang.Object $r0;
        java.lang.Class $r1, $r5;
        java.lang.reflect.GenericArrayType $r2;
        java.lang.reflect.Type $r3, $r4;

        $r3 := @parameter0: java.lang.reflect.Type;

        $r2 = (java.lang.reflect.GenericArrayType) $r3;

        $r4 = interfaceinvoke $r2.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>();

        $r1 = staticinvoke <org.simpleframework.xml.core.Reflector: java.lang.Class getClass(java.lang.reflect.Type)>($r4);

        if $r1 == null goto label1;

        $r0 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>($r1, 0);

        $r5 = virtualinvoke $r0.<java.lang.Object: java.lang.Class getClass()>();

        return $r5;

     label1:
        return null;
    }

    private static java.lang.Class getClass(java.lang.reflect.ParameterizedType)
    {
        java.lang.Class $r0;
        java.lang.reflect.Type $r1;
        java.lang.reflect.Type[] $r2;
        int $i0;
        java.lang.reflect.ParameterizedType $r3;

        $r3 := @parameter0: java.lang.reflect.ParameterizedType;

        $r2 = interfaceinvoke $r3.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>();

        $i0 = lengthof $r2;

        if $i0 <= 0 goto label1;

        $r1 = $r2[0];

        $r0 = staticinvoke <org.simpleframework.xml.core.Reflector: java.lang.Class getClass(java.lang.reflect.Type)>($r1);

        return $r0;

     label1:
        return null;
    }

    private static java.lang.Class getClass(java.lang.reflect.Type)
    {
        java.lang.Class $r0, $r2;
        boolean $z0;
        java.lang.reflect.Type $r1;

        $r1 := @parameter0: java.lang.reflect.Type;

        $z0 = $r1 instanceof java.lang.Class;

        if $z0 == 0 goto label1;

        $r0 = (java.lang.Class) $r1;

        return $r0;

     label1:
        $r2 = staticinvoke <org.simpleframework.xml.core.Reflector: java.lang.Class getGenericClass(java.lang.reflect.Type)>($r1);

        return $r2;
    }

    private static java.lang.Class[] getClasses(java.lang.reflect.ParameterizedType)
    {
        java.lang.Class $r0;
        java.lang.reflect.Type $r1;
        java.lang.reflect.Type[] $r2;
        java.lang.Class[] $r3;
        int $i0, $i1, $i2;
        java.lang.reflect.ParameterizedType $r4;

        $r4 := @parameter0: java.lang.reflect.ParameterizedType;

        $r2 = interfaceinvoke $r4.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>();

        $i0 = lengthof $r2;

        $r3 = newarray (java.lang.Class)[$i0];

        $i2 = 0;

     label1:
        $i1 = lengthof $r2;

        if $i2 >= $i1 goto label2;

        $r1 = $r2[$i2];

        $r0 = staticinvoke <org.simpleframework.xml.core.Reflector: java.lang.Class getClass(java.lang.reflect.Type)>($r1);

        $r3[$i2] = $r0;

        $i2 = $i2 + 1;

        goto label1;

     label2:
        return $r3;
    }

    public static java.lang.Class getDependent(java.lang.reflect.Field)
    {
        java.lang.Class $r0;
        java.lang.reflect.ParameterizedType $r1;
        java.lang.reflect.Field $r2;

        $r2 := @parameter0: java.lang.reflect.Field;

        $r1 = staticinvoke <org.simpleframework.xml.core.Reflector: java.lang.reflect.ParameterizedType getType(java.lang.reflect.Field)>($r2);

        if $r1 == null goto label1;

        $r0 = staticinvoke <org.simpleframework.xml.core.Reflector: java.lang.Class getClass(java.lang.reflect.ParameterizedType)>($r1);

        return $r0;

     label1:
        return null;
    }

    public static java.lang.Class[] getDependents(java.lang.reflect.Field)
    {
        java.lang.reflect.ParameterizedType $r0;
        java.lang.Class[] $r1, $r3;
        java.lang.reflect.Field $r2;

        $r2 := @parameter0: java.lang.reflect.Field;

        $r0 = staticinvoke <org.simpleframework.xml.core.Reflector: java.lang.reflect.ParameterizedType getType(java.lang.reflect.Field)>($r2);

        if $r0 == null goto label1;

        $r1 = staticinvoke <org.simpleframework.xml.core.Reflector: java.lang.Class[] getClasses(java.lang.reflect.ParameterizedType)>($r0);

        return $r1;

     label1:
        $r3 = newarray (java.lang.Class)[0];

        return $r3;
    }

    private static java.lang.Class getGenericClass(java.lang.reflect.Type)
    {
        java.lang.Class $r0;
        boolean $z0;
        java.lang.reflect.Type $r1;

        $r1 := @parameter0: java.lang.reflect.Type;

        $z0 = $r1 instanceof java.lang.reflect.GenericArrayType;

        if $z0 == 0 goto label1;

        $r0 = staticinvoke <org.simpleframework.xml.core.Reflector: java.lang.Class getArrayClass(java.lang.reflect.Type)>($r1);

        return $r0;

     label1:
        return class "java/lang/Object";
    }

    public static java.lang.String getName(java.lang.String)
    {
        boolean $z0;
        char[] $r0;
        int $i0;
        char $c1, $c2;
        java.lang.String $r1, $r2;

        $r1 := @parameter0: java.lang.String;

        $i0 = virtualinvoke $r1.<java.lang.String: int length()>();

        if $i0 <= 0 goto label2;

        $r0 = virtualinvoke $r1.<java.lang.String: char[] toCharArray()>();

        $c1 = $r0[0];

        $z0 = staticinvoke <org.simpleframework.xml.core.Reflector: boolean isAcronym(char[])>($r0);

        if $z0 != 0 goto label1;

        $c2 = staticinvoke <org.simpleframework.xml.core.Reflector: char toLowerCase(char)>($c1);

        $r0[0] = $c2;

     label1:
        $r2 = new java.lang.String;

        specialinvoke $r2.<java.lang.String: void <init>(char[])>($r0);

        return $r2;

     label2:
        return $r1;
    }

    public static java.lang.Class getParameterDependent(java.lang.reflect.Constructor, int)
    {
        java.lang.Class $r0;
        java.lang.reflect.ParameterizedType $r1;
        int $i0;
        java.lang.reflect.Constructor $r2;

        $r2 := @parameter0: java.lang.reflect.Constructor;

        $i0 := @parameter1: int;

        $r1 = staticinvoke <org.simpleframework.xml.core.Reflector: java.lang.reflect.ParameterizedType getParameterType(java.lang.reflect.Constructor,int)>($r2, $i0);

        if $r1 == null goto label1;

        $r0 = staticinvoke <org.simpleframework.xml.core.Reflector: java.lang.Class getClass(java.lang.reflect.ParameterizedType)>($r1);

        return $r0;

     label1:
        return null;
    }

    public static java.lang.Class getParameterDependent(java.lang.reflect.Method, int)
    {
        java.lang.Class $r0;
        java.lang.reflect.ParameterizedType $r1;
        int $i0;
        java.lang.reflect.Method $r2;

        $r2 := @parameter0: java.lang.reflect.Method;

        $i0 := @parameter1: int;

        $r1 = staticinvoke <org.simpleframework.xml.core.Reflector: java.lang.reflect.ParameterizedType getParameterType(java.lang.reflect.Method,int)>($r2, $i0);

        if $r1 == null goto label1;

        $r0 = staticinvoke <org.simpleframework.xml.core.Reflector: java.lang.Class getClass(java.lang.reflect.ParameterizedType)>($r1);

        return $r0;

     label1:
        return null;
    }

    public static java.lang.Class[] getParameterDependents(java.lang.reflect.Constructor, int)
    {
        java.lang.reflect.ParameterizedType $r0;
        java.lang.Class[] $r1, $r3;
        int $i0;
        java.lang.reflect.Constructor $r2;

        $r2 := @parameter0: java.lang.reflect.Constructor;

        $i0 := @parameter1: int;

        $r0 = staticinvoke <org.simpleframework.xml.core.Reflector: java.lang.reflect.ParameterizedType getParameterType(java.lang.reflect.Constructor,int)>($r2, $i0);

        if $r0 == null goto label1;

        $r1 = staticinvoke <org.simpleframework.xml.core.Reflector: java.lang.Class[] getClasses(java.lang.reflect.ParameterizedType)>($r0);

        return $r1;

     label1:
        $r3 = newarray (java.lang.Class)[0];

        return $r3;
    }

    public static java.lang.Class[] getParameterDependents(java.lang.reflect.Method, int)
    {
        java.lang.reflect.ParameterizedType $r0;
        java.lang.Class[] $r1, $r3;
        int $i0;
        java.lang.reflect.Method $r2;

        $r2 := @parameter0: java.lang.reflect.Method;

        $i0 := @parameter1: int;

        $r0 = staticinvoke <org.simpleframework.xml.core.Reflector: java.lang.reflect.ParameterizedType getParameterType(java.lang.reflect.Method,int)>($r2, $i0);

        if $r0 == null goto label1;

        $r1 = staticinvoke <org.simpleframework.xml.core.Reflector: java.lang.Class[] getClasses(java.lang.reflect.ParameterizedType)>($r0);

        return $r1;

     label1:
        $r3 = newarray (java.lang.Class)[0];

        return $r3;
    }

    private static java.lang.reflect.ParameterizedType getParameterType(java.lang.reflect.Constructor, int)
    {
        java.lang.reflect.ParameterizedType $r0;
        boolean $z0;
        java.lang.reflect.Type[] $r1;
        java.lang.reflect.Type $r2;
        int $i0, $i1;
        java.lang.reflect.Constructor $r3;

        $r3 := @parameter0: java.lang.reflect.Constructor;

        $i0 := @parameter1: int;

        $r1 = virtualinvoke $r3.<java.lang.reflect.Constructor: java.lang.reflect.Type[] getGenericParameterTypes()>();

        $i1 = lengthof $r1;

        if $i1 <= $i0 goto label1;

        $r2 = $r1[$i0];

        $z0 = $r2 instanceof java.lang.reflect.ParameterizedType;

        if $z0 == 0 goto label1;

        $r0 = (java.lang.reflect.ParameterizedType) $r2;

        return $r0;

     label1:
        return null;
    }

    private static java.lang.reflect.ParameterizedType getParameterType(java.lang.reflect.Method, int)
    {
        java.lang.reflect.ParameterizedType $r0;
        boolean $z0;
        java.lang.reflect.Type[] $r1;
        java.lang.reflect.Type $r2;
        int $i0, $i1;
        java.lang.reflect.Method $r3;

        $r3 := @parameter0: java.lang.reflect.Method;

        $i0 := @parameter1: int;

        $r1 = virtualinvoke $r3.<java.lang.reflect.Method: java.lang.reflect.Type[] getGenericParameterTypes()>();

        $i1 = lengthof $r1;

        if $i1 <= $i0 goto label1;

        $r2 = $r1[$i0];

        $z0 = $r2 instanceof java.lang.reflect.ParameterizedType;

        if $z0 == 0 goto label1;

        $r0 = (java.lang.reflect.ParameterizedType) $r2;

        return $r0;

     label1:
        return null;
    }

    public static java.lang.Class getReturnDependent(java.lang.reflect.Method)
    {
        java.lang.Class $r0;
        java.lang.reflect.ParameterizedType $r1;
        java.lang.reflect.Method $r2;

        $r2 := @parameter0: java.lang.reflect.Method;

        $r1 = staticinvoke <org.simpleframework.xml.core.Reflector: java.lang.reflect.ParameterizedType getReturnType(java.lang.reflect.Method)>($r2);

        if $r1 == null goto label1;

        $r0 = staticinvoke <org.simpleframework.xml.core.Reflector: java.lang.Class getClass(java.lang.reflect.ParameterizedType)>($r1);

        return $r0;

     label1:
        return null;
    }

    public static java.lang.Class[] getReturnDependents(java.lang.reflect.Method)
    {
        java.lang.reflect.ParameterizedType $r0;
        java.lang.Class[] $r1, $r3;
        java.lang.reflect.Method $r2;

        $r2 := @parameter0: java.lang.reflect.Method;

        $r0 = staticinvoke <org.simpleframework.xml.core.Reflector: java.lang.reflect.ParameterizedType getReturnType(java.lang.reflect.Method)>($r2);

        if $r0 == null goto label1;

        $r1 = staticinvoke <org.simpleframework.xml.core.Reflector: java.lang.Class[] getClasses(java.lang.reflect.ParameterizedType)>($r0);

        return $r1;

     label1:
        $r3 = newarray (java.lang.Class)[0];

        return $r3;
    }

    private static java.lang.reflect.ParameterizedType getReturnType(java.lang.reflect.Method)
    {
        java.lang.reflect.ParameterizedType $r0;
        java.lang.reflect.Type $r1;
        boolean $z0;
        java.lang.reflect.Method $r2;

        $r2 := @parameter0: java.lang.reflect.Method;

        $r1 = virtualinvoke $r2.<java.lang.reflect.Method: java.lang.reflect.Type getGenericReturnType()>();

        $z0 = $r1 instanceof java.lang.reflect.ParameterizedType;

        if $z0 == 0 goto label1;

        $r0 = (java.lang.reflect.ParameterizedType) $r1;

        return $r0;

     label1:
        return null;
    }

    private static java.lang.reflect.ParameterizedType getType(java.lang.reflect.Field)
    {
        java.lang.reflect.ParameterizedType $r0;
        java.lang.reflect.Type $r1;
        boolean $z0;
        java.lang.reflect.Field $r2;

        $r2 := @parameter0: java.lang.reflect.Field;

        $r1 = virtualinvoke $r2.<java.lang.reflect.Field: java.lang.reflect.Type getGenericType()>();

        $z0 = $r1 instanceof java.lang.reflect.ParameterizedType;

        if $z0 == 0 goto label1;

        $r0 = (java.lang.reflect.ParameterizedType) $r1;

        return $r0;

     label1:
        return null;
    }

    private static boolean isAcronym(char[])
    {
        char $c0, $c2;
        boolean $z0, $z1;
        int $i1;
        char[] $r0;

        $r0 := @parameter0: char[];

        $i1 = lengthof $r0;

        if $i1 >= 2 goto label1;

        return 0;

     label1:
        $c0 = $r0[0];

        $z0 = staticinvoke <org.simpleframework.xml.core.Reflector: boolean isUpperCase(char)>($c0);

        if $z0 == 0 goto label2;

        $c2 = $r0[1];

        $z1 = staticinvoke <org.simpleframework.xml.core.Reflector: boolean isUpperCase(char)>($c2);

        return $z1;

     label2:
        return 0;
    }

    private static boolean isUpperCase(char)
    {
        boolean $z0;
        char $c0;

        $c0 := @parameter0: char;

        $z0 = staticinvoke <java.lang.Character: boolean isUpperCase(char)>($c0);

        return $z0;
    }

    private static char toLowerCase(char)
    {
        char $c0, $c1;

        $c0 := @parameter0: char;

        $c1 = staticinvoke <java.lang.Character: char toLowerCase(char)>($c0);

        return $c1;
    }
}
