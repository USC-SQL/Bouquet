class org.simpleframework.xml.core.MethodPartFactory extends java.lang.Object
{
    private final org.simpleframework.xml.core.AnnotationFactory factory;

    public void <init>()
    {
        org.simpleframework.xml.core.MethodPartFactory $r0;

        $r0 := @this: org.simpleframework.xml.core.MethodPartFactory;

        specialinvoke $r0.<org.simpleframework.xml.core.MethodPartFactory: void <init>(boolean)>(1);

        return;
    }

    public void <init>(boolean)
    {
        org.simpleframework.xml.core.AnnotationFactory $r0;
        boolean $z0;
        org.simpleframework.xml.core.MethodPartFactory $r1;

        $r1 := @this: org.simpleframework.xml.core.MethodPartFactory;

        $z0 := @parameter0: boolean;

        specialinvoke $r1.<java.lang.Object: void <init>()>();

        $r0 = new org.simpleframework.xml.core.AnnotationFactory;

        specialinvoke $r0.<org.simpleframework.xml.core.AnnotationFactory: void <init>(boolean)>($z0);

        $r1.<org.simpleframework.xml.core.MethodPartFactory: org.simpleframework.xml.core.AnnotationFactory factory> = $r0;

        return;
    }

    private java.lang.annotation.Annotation getAnnotation(java.lang.reflect.Method) throws java.lang.Exception
    {
        java.lang.annotation.Annotation $r0;
        java.lang.Class $r1;
        org.simpleframework.xml.core.AnnotationFactory $r2;
        java.lang.reflect.Method $r3;
        org.simpleframework.xml.core.MethodPartFactory $r4;

        $r4 := @this: org.simpleframework.xml.core.MethodPartFactory;

        $r3 := @parameter0: java.lang.reflect.Method;

        $r1 = virtualinvoke $r4.<org.simpleframework.xml.core.MethodPartFactory: java.lang.Class getType(java.lang.reflect.Method)>($r3);

        if $r1 == null goto label1;

        $r2 = $r4.<org.simpleframework.xml.core.MethodPartFactory: org.simpleframework.xml.core.AnnotationFactory factory>;

        $r0 = virtualinvoke $r2.<org.simpleframework.xml.core.AnnotationFactory: java.lang.annotation.Annotation getInstance(java.lang.Class)>($r1);

        return $r0;

     label1:
        return null;
    }

    private org.simpleframework.xml.core.MethodType getMethodType(java.lang.reflect.Method)
    {
        org.simpleframework.xml.core.MethodType r0, r4, r5, r6;
        boolean $z0, $z1, $z2;
        java.lang.String $r1;
        java.lang.reflect.Method $r2;
        org.simpleframework.xml.core.MethodPartFactory $r3;

        $r3 := @this: org.simpleframework.xml.core.MethodPartFactory;

        $r2 := @parameter0: java.lang.reflect.Method;

        $r1 = virtualinvoke $r2.<java.lang.reflect.Method: java.lang.String getName()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean startsWith(java.lang.String)>("get");

        if $z0 == 0 goto label1;

        r0 = <org.simpleframework.xml.core.MethodType: org.simpleframework.xml.core.MethodType GET>;

        return r0;

     label1:
        $z1 = virtualinvoke $r1.<java.lang.String: boolean startsWith(java.lang.String)>("is");

        if $z1 == 0 goto label2;

        r4 = <org.simpleframework.xml.core.MethodType: org.simpleframework.xml.core.MethodType IS>;

        return r4;

     label2:
        $z2 = virtualinvoke $r1.<java.lang.String: boolean startsWith(java.lang.String)>("set");

        if $z2 == 0 goto label3;

        r5 = <org.simpleframework.xml.core.MethodType: org.simpleframework.xml.core.MethodType SET>;

        return r5;

     label3:
        r6 = <org.simpleframework.xml.core.MethodType: org.simpleframework.xml.core.MethodType NONE>;

        return r6;
    }

    private org.simpleframework.xml.core.MethodName getName(java.lang.reflect.Method, java.lang.annotation.Annotation) throws java.lang.Exception
    {
        java.lang.Object[] $r0;
        org.simpleframework.xml.core.MethodException $r1;
        org.simpleframework.xml.core.MethodName $r2, $r9, $r11;
        org.simpleframework.xml.core.MethodType $r3, $r4, $r8, $r10;
        java.lang.annotation.Annotation $r5;
        java.lang.reflect.Method $r6;
        org.simpleframework.xml.core.MethodPartFactory $r7;

        $r7 := @this: org.simpleframework.xml.core.MethodPartFactory;

        $r6 := @parameter0: java.lang.reflect.Method;

        $r5 := @parameter1: java.lang.annotation.Annotation;

        $r4 = specialinvoke $r7.<org.simpleframework.xml.core.MethodPartFactory: org.simpleframework.xml.core.MethodType getMethodType(java.lang.reflect.Method)>($r6);

        $r3 = <org.simpleframework.xml.core.MethodType: org.simpleframework.xml.core.MethodType GET>;

        if $r4 != $r3 goto label1;

        $r2 = specialinvoke $r7.<org.simpleframework.xml.core.MethodPartFactory: org.simpleframework.xml.core.MethodName getRead(java.lang.reflect.Method,org.simpleframework.xml.core.MethodType)>($r6, $r4);

        return $r2;

     label1:
        $r8 = <org.simpleframework.xml.core.MethodType: org.simpleframework.xml.core.MethodType IS>;

        if $r4 != $r8 goto label2;

        $r9 = specialinvoke $r7.<org.simpleframework.xml.core.MethodPartFactory: org.simpleframework.xml.core.MethodName getRead(java.lang.reflect.Method,org.simpleframework.xml.core.MethodType)>($r6, $r4);

        return $r9;

     label2:
        $r10 = <org.simpleframework.xml.core.MethodType: org.simpleframework.xml.core.MethodType SET>;

        if $r4 != $r10 goto label3;

        $r11 = specialinvoke $r7.<org.simpleframework.xml.core.MethodPartFactory: org.simpleframework.xml.core.MethodName getWrite(java.lang.reflect.Method,org.simpleframework.xml.core.MethodType)>($r6, $r4);

        return $r11;

     label3:
        $r1 = new org.simpleframework.xml.core.MethodException;

        $r0 = newarray (java.lang.Object)[1];

        $r0[0] = $r5;

        specialinvoke $r1.<org.simpleframework.xml.core.MethodException: void <init>(java.lang.String,java.lang.Object[])>("Annotation %s must mark a set or get method", $r0);

        throw $r1;
    }

    private java.lang.Class getParameterType(java.lang.reflect.Method) throws java.lang.Exception
    {
        java.lang.Class $r0;
        java.lang.Class[] $r1, $r4;
        int $i0;
        java.lang.reflect.Method $r2;
        org.simpleframework.xml.core.MethodPartFactory $r3;

        $r3 := @this: org.simpleframework.xml.core.MethodPartFactory;

        $r2 := @parameter0: java.lang.reflect.Method;

        $r1 = virtualinvoke $r2.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        $i0 = lengthof $r1;

        if $i0 != 1 goto label1;

        $r4 = virtualinvoke $r2.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        $r0 = $r4[0];

        return $r0;

     label1:
        return null;
    }

    private org.simpleframework.xml.core.MethodName getRead(java.lang.reflect.Method, org.simpleframework.xml.core.MethodType) throws java.lang.Exception
    {
        org.simpleframework.xml.core.MethodName $r0;
        java.lang.Object[] $r1, $r10;
        org.simpleframework.xml.core.MethodException $r2, $r9;
        java.lang.String $r3, $r8;
        java.lang.Class[] $r4;
        int $i0;
        org.simpleframework.xml.core.MethodType $r5;
        java.lang.reflect.Method $r6;
        org.simpleframework.xml.core.MethodPartFactory $r7;

        $r7 := @this: org.simpleframework.xml.core.MethodPartFactory;

        $r6 := @parameter0: java.lang.reflect.Method;

        $r5 := @parameter1: org.simpleframework.xml.core.MethodType;

        $r4 = virtualinvoke $r6.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        $r3 = virtualinvoke $r6.<java.lang.reflect.Method: java.lang.String getName()>();

        $i0 = lengthof $r4;

        if $i0 == 0 goto label1;

        $r2 = new org.simpleframework.xml.core.MethodException;

        $r1 = newarray (java.lang.Object)[1];

        $r1[0] = $r6;

        specialinvoke $r2.<org.simpleframework.xml.core.MethodException: void <init>(java.lang.String,java.lang.Object[])>("Get method %s is not a valid property", $r1);

        throw $r2;

     label1:
        $r8 = specialinvoke $r7.<org.simpleframework.xml.core.MethodPartFactory: java.lang.String getTypeName(java.lang.String,org.simpleframework.xml.core.MethodType)>($r3, $r5);

        if $r8 != null goto label2;

        $r9 = new org.simpleframework.xml.core.MethodException;

        $r10 = newarray (java.lang.Object)[1];

        $r10[0] = $r6;

        specialinvoke $r9.<org.simpleframework.xml.core.MethodException: void <init>(java.lang.String,java.lang.Object[])>("Could not get name for %s", $r10);

        throw $r9;

     label2:
        $r0 = new org.simpleframework.xml.core.MethodName;

        specialinvoke $r0.<org.simpleframework.xml.core.MethodName: void <init>(java.lang.reflect.Method,org.simpleframework.xml.core.MethodType,java.lang.String)>($r6, $r5, $r8);

        return $r0;
    }

    private java.lang.Class getReturnType(java.lang.reflect.Method) throws java.lang.Exception
    {
        java.lang.Class $r0;
        java.lang.Class[] $r1;
        int $i0;
        java.lang.reflect.Method $r2;
        org.simpleframework.xml.core.MethodPartFactory $r3;

        $r3 := @this: org.simpleframework.xml.core.MethodPartFactory;

        $r2 := @parameter0: java.lang.reflect.Method;

        $r1 = virtualinvoke $r2.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        $i0 = lengthof $r1;

        if $i0 != 0 goto label1;

        $r0 = virtualinvoke $r2.<java.lang.reflect.Method: java.lang.Class getReturnType()>();

        return $r0;

     label1:
        return null;
    }

    private java.lang.String getTypeName(java.lang.String, org.simpleframework.xml.core.MethodType)
    {
        int $i0, $i1;
        org.simpleframework.xml.core.MethodType $r0;
        java.lang.String $r1, $r3;
        org.simpleframework.xml.core.MethodPartFactory $r2;

        $r2 := @this: org.simpleframework.xml.core.MethodPartFactory;

        $r1 := @parameter0: java.lang.String;

        $r0 := @parameter1: org.simpleframework.xml.core.MethodType;

        $i0 = virtualinvoke $r0.<org.simpleframework.xml.core.MethodType: int getPrefix()>();

        $i1 = virtualinvoke $r1.<java.lang.String: int length()>();

        if $i1 <= $i0 goto label1;

        $r1 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int,int)>($i0, $i1);

     label1:
        $r3 = staticinvoke <org.simpleframework.xml.core.Reflector: java.lang.String getName(java.lang.String)>($r1);

        return $r3;
    }

    private org.simpleframework.xml.core.MethodName getWrite(java.lang.reflect.Method, org.simpleframework.xml.core.MethodType) throws java.lang.Exception
    {
        org.simpleframework.xml.core.MethodName $r0;
        java.lang.Object[] $r1, $r10;
        org.simpleframework.xml.core.MethodException $r2, $r9;
        java.lang.String $r3, $r8;
        java.lang.Class[] $r4;
        int $i0;
        org.simpleframework.xml.core.MethodType $r5;
        java.lang.reflect.Method $r6;
        org.simpleframework.xml.core.MethodPartFactory $r7;

        $r7 := @this: org.simpleframework.xml.core.MethodPartFactory;

        $r6 := @parameter0: java.lang.reflect.Method;

        $r5 := @parameter1: org.simpleframework.xml.core.MethodType;

        $r4 = virtualinvoke $r6.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        $r3 = virtualinvoke $r6.<java.lang.reflect.Method: java.lang.String getName()>();

        $i0 = lengthof $r4;

        if $i0 == 1 goto label1;

        $r2 = new org.simpleframework.xml.core.MethodException;

        $r1 = newarray (java.lang.Object)[1];

        $r1[0] = $r6;

        specialinvoke $r2.<org.simpleframework.xml.core.MethodException: void <init>(java.lang.String,java.lang.Object[])>("Set method %s is not a valid property", $r1);

        throw $r2;

     label1:
        $r8 = specialinvoke $r7.<org.simpleframework.xml.core.MethodPartFactory: java.lang.String getTypeName(java.lang.String,org.simpleframework.xml.core.MethodType)>($r3, $r5);

        if $r8 != null goto label2;

        $r9 = new org.simpleframework.xml.core.MethodException;

        $r10 = newarray (java.lang.Object)[1];

        $r10[0] = $r6;

        specialinvoke $r9.<org.simpleframework.xml.core.MethodException: void <init>(java.lang.String,java.lang.Object[])>("Could not get name for %s", $r10);

        throw $r9;

     label2:
        $r0 = new org.simpleframework.xml.core.MethodName;

        specialinvoke $r0.<org.simpleframework.xml.core.MethodName: void <init>(java.lang.reflect.Method,org.simpleframework.xml.core.MethodType,java.lang.String)>($r6, $r5, $r8);

        return $r0;
    }

    public org.simpleframework.xml.core.MethodPart getInstance(java.lang.reflect.Method) throws java.lang.Exception
    {
        org.simpleframework.xml.core.MethodPart $r0;
        java.lang.annotation.Annotation $r1;
        java.lang.reflect.Method $r2;
        org.simpleframework.xml.core.MethodPartFactory $r3;

        $r3 := @this: org.simpleframework.xml.core.MethodPartFactory;

        $r2 := @parameter0: java.lang.reflect.Method;

        $r1 = specialinvoke $r3.<org.simpleframework.xml.core.MethodPartFactory: java.lang.annotation.Annotation getAnnotation(java.lang.reflect.Method)>($r2);

        if $r1 == null goto label1;

        $r0 = virtualinvoke $r3.<org.simpleframework.xml.core.MethodPartFactory: org.simpleframework.xml.core.MethodPart getInstance(java.lang.reflect.Method,java.lang.annotation.Annotation)>($r2, $r1);

        return $r0;

     label1:
        return null;
    }

    public org.simpleframework.xml.core.MethodPart getInstance(java.lang.reflect.Method, java.lang.annotation.Annotation) throws java.lang.Exception
    {
        org.simpleframework.xml.core.GetPart r0;
        org.simpleframework.xml.core.SetPart r1;
        org.simpleframework.xml.core.MethodName $r2;
        org.simpleframework.xml.core.MethodType $r3, $r4;
        java.lang.annotation.Annotation $r5;
        java.lang.reflect.Method $r6;
        org.simpleframework.xml.core.MethodPartFactory $r7;

        $r7 := @this: org.simpleframework.xml.core.MethodPartFactory;

        $r6 := @parameter0: java.lang.reflect.Method;

        $r5 := @parameter1: java.lang.annotation.Annotation;

        $r2 = specialinvoke $r7.<org.simpleframework.xml.core.MethodPartFactory: org.simpleframework.xml.core.MethodName getName(java.lang.reflect.Method,java.lang.annotation.Annotation)>($r6, $r5);

        $r4 = virtualinvoke $r2.<org.simpleframework.xml.core.MethodName: org.simpleframework.xml.core.MethodType getType()>();

        $r3 = <org.simpleframework.xml.core.MethodType: org.simpleframework.xml.core.MethodType SET>;

        if $r4 != $r3 goto label1;

        r1 = new org.simpleframework.xml.core.SetPart;

        specialinvoke r1.<org.simpleframework.xml.core.SetPart: void <init>(org.simpleframework.xml.core.MethodName,java.lang.annotation.Annotation)>($r2, $r5);

        return r1;

     label1:
        r0 = new org.simpleframework.xml.core.GetPart;

        specialinvoke r0.<org.simpleframework.xml.core.GetPart: void <init>(org.simpleframework.xml.core.MethodName,java.lang.annotation.Annotation)>($r2, $r5);

        return r0;
    }

    public java.lang.Class getType(java.lang.reflect.Method) throws java.lang.Exception
    {
        java.lang.Class $r0, $r6, $r8;
        org.simpleframework.xml.core.MethodType $r1, $r2, $r5, $r7;
        java.lang.reflect.Method $r3;
        org.simpleframework.xml.core.MethodPartFactory $r4;

        $r4 := @this: org.simpleframework.xml.core.MethodPartFactory;

        $r3 := @parameter0: java.lang.reflect.Method;

        $r2 = specialinvoke $r4.<org.simpleframework.xml.core.MethodPartFactory: org.simpleframework.xml.core.MethodType getMethodType(java.lang.reflect.Method)>($r3);

        $r1 = <org.simpleframework.xml.core.MethodType: org.simpleframework.xml.core.MethodType SET>;

        if $r2 != $r1 goto label1;

        $r0 = specialinvoke $r4.<org.simpleframework.xml.core.MethodPartFactory: java.lang.Class getParameterType(java.lang.reflect.Method)>($r3);

        return $r0;

     label1:
        $r5 = <org.simpleframework.xml.core.MethodType: org.simpleframework.xml.core.MethodType GET>;

        if $r2 != $r5 goto label2;

        $r6 = specialinvoke $r4.<org.simpleframework.xml.core.MethodPartFactory: java.lang.Class getReturnType(java.lang.reflect.Method)>($r3);

        return $r6;

     label2:
        $r7 = <org.simpleframework.xml.core.MethodType: org.simpleframework.xml.core.MethodType IS>;

        if $r2 != $r7 goto label3;

        $r8 = specialinvoke $r4.<org.simpleframework.xml.core.MethodPartFactory: java.lang.Class getReturnType(java.lang.reflect.Method)>($r3);

        return $r8;

     label3:
        return null;
    }
}
