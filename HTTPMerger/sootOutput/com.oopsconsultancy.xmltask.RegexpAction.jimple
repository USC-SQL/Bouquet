public class com.oopsconsultancy.xmltask.RegexpAction extends com.oopsconsultancy.xmltask.Action
{
    private final java.lang.String buffer;
    private boolean caseInsensitive;
    private final java.lang.String property;
    private final java.lang.String ptrn;
    private final java.lang.String replace;
    private com.oopsconsultancy.xmltask.ant.XmlTask task;
    private boolean unicodeCase;

    private void <init>(com.oopsconsultancy.xmltask.ant.XmlTask, java.lang.String, java.lang.String, java.lang.String, java.lang.String)
    {
        java.lang.IllegalArgumentException $r0;
        java.lang.String $r1, $r2, $r3, $r4;
        com.oopsconsultancy.xmltask.ant.XmlTask $r5;
        com.oopsconsultancy.xmltask.RegexpAction $r6;

        $r6 := @this: com.oopsconsultancy.xmltask.RegexpAction;

        $r5 := @parameter0: com.oopsconsultancy.xmltask.ant.XmlTask;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: java.lang.String;

        $r3 := @parameter3: java.lang.String;

        $r4 := @parameter4: java.lang.String;

        specialinvoke $r6.<com.oopsconsultancy.xmltask.Action: void <init>()>();

        $r6.<com.oopsconsultancy.xmltask.RegexpAction: com.oopsconsultancy.xmltask.ant.XmlTask task> = $r5;

        if $r1 != null goto label1;

        $r0 = new java.lang.IllegalArgumentException;

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Must specify a pattern");

        throw $r0;

     label1:
        $r6.<com.oopsconsultancy.xmltask.RegexpAction: java.lang.String ptrn> = $r1;

        $r6.<com.oopsconsultancy.xmltask.RegexpAction: java.lang.String replace> = $r2;

        $r6.<com.oopsconsultancy.xmltask.RegexpAction: java.lang.String property> = $r3;

        $r6.<com.oopsconsultancy.xmltask.RegexpAction: java.lang.String buffer> = $r4;

        return;
    }

    public static com.oopsconsultancy.xmltask.RegexpAction createCopyToBuffer(com.oopsconsultancy.xmltask.ant.XmlTask, java.lang.String, java.lang.String)
    {
        com.oopsconsultancy.xmltask.RegexpAction $r0;
        java.lang.String $r1, $r2;
        com.oopsconsultancy.xmltask.ant.XmlTask $r3;

        $r3 := @parameter0: com.oopsconsultancy.xmltask.ant.XmlTask;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: java.lang.String;

        $r0 = new com.oopsconsultancy.xmltask.RegexpAction;

        specialinvoke $r0.<com.oopsconsultancy.xmltask.RegexpAction: void <init>(com.oopsconsultancy.xmltask.ant.XmlTask,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>($r3, $r1, null, null, $r2);

        return $r0;
    }

    public static com.oopsconsultancy.xmltask.RegexpAction createCopyToProperty(com.oopsconsultancy.xmltask.ant.XmlTask, java.lang.String, java.lang.String)
    {
        com.oopsconsultancy.xmltask.RegexpAction $r0;
        java.lang.String $r1, $r2;
        com.oopsconsultancy.xmltask.ant.XmlTask $r3;

        $r3 := @parameter0: com.oopsconsultancy.xmltask.ant.XmlTask;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: java.lang.String;

        $r0 = new com.oopsconsultancy.xmltask.RegexpAction;

        specialinvoke $r0.<com.oopsconsultancy.xmltask.RegexpAction: void <init>(com.oopsconsultancy.xmltask.ant.XmlTask,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>($r3, $r1, null, $r2, null);

        return $r0;
    }

    public static com.oopsconsultancy.xmltask.RegexpAction createReplacement(com.oopsconsultancy.xmltask.ant.XmlTask, java.lang.String, java.lang.String)
    {
        com.oopsconsultancy.xmltask.RegexpAction $r0;
        java.lang.String $r1, $r2;
        com.oopsconsultancy.xmltask.ant.XmlTask $r3;

        $r3 := @parameter0: com.oopsconsultancy.xmltask.ant.XmlTask;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: java.lang.String;

        $r0 = new com.oopsconsultancy.xmltask.RegexpAction;

        specialinvoke $r0.<com.oopsconsultancy.xmltask.RegexpAction: void <init>(com.oopsconsultancy.xmltask.ant.XmlTask,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>($r3, $r1, $r2, null, null);

        return $r0;
    }

    private java.lang.String getGroupedOrMatched(java.util.regex.Matcher)
    {
        java.lang.String $r0, $r3;
        int $i0;
        java.util.regex.Matcher $r1;
        com.oopsconsultancy.xmltask.RegexpAction $r2;

        $r2 := @this: com.oopsconsultancy.xmltask.RegexpAction;

        $r1 := @parameter0: java.util.regex.Matcher;

        $i0 = virtualinvoke $r1.<java.util.regex.Matcher: int groupCount()>();

        if $i0 <= 0 goto label1;

        $r0 = virtualinvoke $r1.<java.util.regex.Matcher: java.lang.String group(int)>(1);

        return $r0;

     label1:
        $r3 = virtualinvoke $r1.<java.util.regex.Matcher: java.lang.String group()>();

        return $r3;
    }

    private java.lang.String performRegexp(org.w3c.dom.Node)
    {
        org.w3c.dom.Text $r0;
        org.w3c.dom.Document $r1;
        java.lang.IllegalStateException $r2, $r56;
        org.apache.tools.ant.Project $r3;
        com.oopsconsultancy.xmltask.ant.XmlTask $r4, $r29, $r42, $r55;
        java.util.regex.Matcher $r5, $r17, $r40;
        java.lang.String $r6, $r7, $r13, $r14, $r15, $r16, $r18, $r20, $r25, $r28, $r30, $r35, $r38, $r39, $r41, $r45, $r50, $r53, $r54, $r61, $r64;
        java.util.regex.Pattern $r8;
        java.lang.StringBuilder $r9, $r19, $r21, $r22, $r23, $r24, $r26, $r27, $r31, $r32, $r33, $r34, $r36, $r37, $r43, $r44, $r46, $r47, $r48, $r49, $r51, $r52, $r57, $r58, $r59, $r60, $r62, $r63;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.lang.StringBuffer $r10;
        byte $b0;
        org.w3c.dom.Node $r11;
        com.oopsconsultancy.xmltask.RegexpAction $r12;

        $r12 := @this: com.oopsconsultancy.xmltask.RegexpAction;

        $r11 := @parameter0: org.w3c.dom.Node;

        $b0 = 0;

        $z0 = $r12.<com.oopsconsultancy.xmltask.RegexpAction: boolean caseInsensitive>;

        if $z0 == 0 goto label01;

        $b0 = 0 | 2;

     label01:
        $z1 = $r12.<com.oopsconsultancy.xmltask.RegexpAction: boolean unicodeCase>;

        if $z1 == 0 goto label02;

        $b0 = $b0 | 64;

     label02:
        $r6 = $r12.<com.oopsconsultancy.xmltask.RegexpAction: java.lang.String ptrn>;

        $r8 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String,int)>($r6, $b0);

        $r13 = interfaceinvoke $r11.<org.w3c.dom.Node: java.lang.String getNodeValue()>();

        if $r13 != null goto label03;

        return null;

     label03:
        $r7 = $r12.<com.oopsconsultancy.xmltask.RegexpAction: java.lang.String replace>;

        if $r7 == null goto label06;

        $r5 = virtualinvoke $r8.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($r13);

        $r10 = new java.lang.StringBuffer;

        specialinvoke $r10.<java.lang.StringBuffer: void <init>()>();

     label04:
        $z2 = virtualinvoke $r5.<java.util.regex.Matcher: boolean find()>();

        if $z2 == 0 goto label05;

        $r14 = $r12.<com.oopsconsultancy.xmltask.RegexpAction: java.lang.String replace>;

        virtualinvoke $r5.<java.util.regex.Matcher: java.util.regex.Matcher appendReplacement(java.lang.StringBuffer,java.lang.String)>($r10, $r14);

        goto label04;

     label05:
        virtualinvoke $r5.<java.util.regex.Matcher: java.lang.StringBuffer appendTail(java.lang.StringBuffer)>($r10);

        $r15 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r15;

     label06:
        $r16 = $r12.<com.oopsconsultancy.xmltask.RegexpAction: java.lang.String property>;

        if $r16 == null goto label08;

        $r17 = virtualinvoke $r8.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($r13);

        $z3 = virtualinvoke $r17.<java.util.regex.Matcher: boolean matches()>();

        if $z3 == 0 goto label07;

        $r18 = specialinvoke $r12.<com.oopsconsultancy.xmltask.RegexpAction: java.lang.String getGroupedOrMatched(java.util.regex.Matcher)>($r17);

        $r4 = $r12.<com.oopsconsultancy.xmltask.RegexpAction: com.oopsconsultancy.xmltask.ant.XmlTask task>;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Setting property ");

        $r20 = $r12.<com.oopsconsultancy.xmltask.RegexpAction: java.lang.String property>;

        $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("=");

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" using \'");

        $r25 = virtualinvoke $r8.<java.util.regex.Pattern: java.lang.String pattern()>();

        $r26 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r25);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r4.<com.oopsconsultancy.xmltask.ant.XmlTask: void log(java.lang.String,int)>($r28, 3);

        $r29 = $r12.<com.oopsconsultancy.xmltask.RegexpAction: com.oopsconsultancy.xmltask.ant.XmlTask task>;

        $r3 = virtualinvoke $r29.<com.oopsconsultancy.xmltask.ant.XmlTask: org.apache.tools.ant.Project getProject()>();

        $r30 = $r12.<com.oopsconsultancy.xmltask.RegexpAction: java.lang.String property>;

        virtualinvoke $r3.<org.apache.tools.ant.Project: void setNewProperty(java.lang.String,java.lang.String)>($r30, $r18);

        return null;

     label07:
        $r2 = new java.lang.IllegalStateException;

        $r31 = new java.lang.StringBuilder;

        specialinvoke $r31.<java.lang.StringBuilder: void <init>()>();

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to match property value in \'");

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' using \'");

        $r35 = virtualinvoke $r8.<java.util.regex.Pattern: java.lang.String pattern()>();

        $r36 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r35);

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r38);

        throw $r2;

     label08:
        $r39 = $r12.<com.oopsconsultancy.xmltask.RegexpAction: java.lang.String buffer>;

        if $r39 == null goto label10;

        $r40 = virtualinvoke $r8.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($r13);

        $z4 = virtualinvoke $r40.<java.util.regex.Matcher: boolean matches()>();

        if $z4 == 0 goto label09;

        $r41 = specialinvoke $r12.<com.oopsconsultancy.xmltask.RegexpAction: java.lang.String getGroupedOrMatched(java.util.regex.Matcher)>($r40);

        $r42 = $r12.<com.oopsconsultancy.xmltask.RegexpAction: com.oopsconsultancy.xmltask.ant.XmlTask task>;

        $r43 = new java.lang.StringBuilder;

        specialinvoke $r43.<java.lang.StringBuilder: void <init>()>();

        $r44 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Setting buffer ");

        $r45 = $r12.<com.oopsconsultancy.xmltask.RegexpAction: java.lang.String buffer>;

        $r46 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r45);

        $r47 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("=");

        $r48 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r41);

        $r49 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" using \'");

        $r50 = virtualinvoke $r8.<java.util.regex.Pattern: java.lang.String pattern()>();

        $r51 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r50);

        $r52 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r53 = virtualinvoke $r52.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r42.<com.oopsconsultancy.xmltask.ant.XmlTask: void log(java.lang.String,int)>($r53, 3);

        $r1 = interfaceinvoke $r11.<org.w3c.dom.Node: org.w3c.dom.Document getOwnerDocument()>();

        $r0 = interfaceinvoke $r1.<org.w3c.dom.Document: org.w3c.dom.Text createTextNode(java.lang.String)>($r41);

        $r54 = $r12.<com.oopsconsultancy.xmltask.RegexpAction: java.lang.String buffer>;

        $r55 = $r12.<com.oopsconsultancy.xmltask.RegexpAction: com.oopsconsultancy.xmltask.ant.XmlTask task>;

        staticinvoke <com.oopsconsultancy.xmltask.BufferStore: void set(java.lang.String,org.w3c.dom.Node,boolean,org.apache.tools.ant.Task)>($r54, $r0, 0, $r55);

        return null;

     label09:
        $r56 = new java.lang.IllegalStateException;

        $r57 = new java.lang.StringBuilder;

        specialinvoke $r57.<java.lang.StringBuilder: void <init>()>();

        $r58 = virtualinvoke $r57.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to match buffer value in \'");

        $r59 = virtualinvoke $r58.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r60 = virtualinvoke $r59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' using \'");

        $r61 = virtualinvoke $r8.<java.util.regex.Pattern: java.lang.String pattern()>();

        $r62 = virtualinvoke $r60.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r61);

        $r63 = virtualinvoke $r62.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r64 = virtualinvoke $r63.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r56.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r64);

        throw $r56;

     label10:
        return null;
    }

    public boolean apply(org.w3c.dom.Node) throws java.lang.Exception
    {
        org.w3c.dom.Attr $r0;
        java.lang.String $r1, $r7;
        org.w3c.dom.Element $r2;
        org.w3c.dom.NodeList $r3;
        boolean $z0, $z1, $z2;
        int $i0, $i1;
        org.w3c.dom.Node $r4, $r6;
        com.oopsconsultancy.xmltask.RegexpAction $r5;

        $r5 := @this: com.oopsconsultancy.xmltask.RegexpAction;

        $r4 := @parameter0: org.w3c.dom.Node;

        $z0 = $r4 instanceof org.w3c.dom.Element;

        if $z0 == 0 goto label2;

        $r2 = (org.w3c.dom.Element) $r4;

        $r3 = interfaceinvoke $r2.<org.w3c.dom.Element: org.w3c.dom.NodeList getChildNodes()>();

        $i0 = 0;

     label1:
        $i1 = interfaceinvoke $r3.<org.w3c.dom.NodeList: int getLength()>();

        if $i0 >= $i1 goto label3;

        $r6 = interfaceinvoke $r3.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>($i0);

        virtualinvoke $r5.<com.oopsconsultancy.xmltask.RegexpAction: boolean apply(org.w3c.dom.Node)>($r6);

        $i0 = $i0 + 1;

        goto label1;

     label2:
        $z1 = staticinvoke <com.oopsconsultancy.xmltask.TextAction: boolean isTextNode(org.w3c.dom.Node)>($r4);

        if $z1 == 0 goto label4;

        $r1 = specialinvoke $r5.<com.oopsconsultancy.xmltask.RegexpAction: java.lang.String performRegexp(org.w3c.dom.Node)>($r4);

        if $r1 == null goto label3;

        interfaceinvoke $r4.<org.w3c.dom.Node: void setNodeValue(java.lang.String)>($r1);

     label3:
        return 0;

     label4:
        $z2 = $r4 instanceof org.w3c.dom.Attr;

        if $z2 == 0 goto label3;

        $r7 = specialinvoke $r5.<com.oopsconsultancy.xmltask.RegexpAction: java.lang.String performRegexp(org.w3c.dom.Node)>($r4);

        if $r7 == null goto label3;

        $r0 = (org.w3c.dom.Attr) $r4;

        interfaceinvoke $r0.<org.w3c.dom.Attr: void setValue(java.lang.String)>($r7);

        goto label3;
    }

    public void setCaseInsensitive(boolean)
    {
        boolean $z0;
        com.oopsconsultancy.xmltask.RegexpAction $r0;

        $r0 := @this: com.oopsconsultancy.xmltask.RegexpAction;

        $z0 := @parameter0: boolean;

        $r0.<com.oopsconsultancy.xmltask.RegexpAction: boolean caseInsensitive> = $z0;

        return;
    }

    public void setUnicodeCase(boolean)
    {
        boolean $z0;
        com.oopsconsultancy.xmltask.RegexpAction $r0;

        $r0 := @this: com.oopsconsultancy.xmltask.RegexpAction;

        $z0 := @parameter0: boolean;

        $r0.<com.oopsconsultancy.xmltask.RegexpAction: boolean unicodeCase> = $z0;

        return;
    }

    public java.lang.String toString()
    {
        com.oopsconsultancy.xmltask.RegexpAction $r0;

        $r0 := @this: com.oopsconsultancy.xmltask.RegexpAction;

        return "RegexpAction()";
    }
}
