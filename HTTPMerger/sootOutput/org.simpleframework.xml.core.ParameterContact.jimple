abstract class org.simpleframework.xml.core.ParameterContact extends java.lang.Object implements org.simpleframework.xml.core.Contact
{
    protected final java.lang.reflect.Constructor factory;
    protected final int index;
    protected final java.lang.annotation.Annotation label;
    protected final java.lang.annotation.Annotation[] labels;

    public void <init>(java.lang.annotation.Annotation, java.lang.reflect.Constructor, int)
    {
        java.lang.annotation.Annotation[] $r0;
        java.lang.annotation.Annotation[][] $r1;
        int $i0;
        java.lang.reflect.Constructor $r2;
        java.lang.annotation.Annotation $r3;
        org.simpleframework.xml.core.ParameterContact $r4;

        $r4 := @this: org.simpleframework.xml.core.ParameterContact;

        $r3 := @parameter0: java.lang.annotation.Annotation;

        $r2 := @parameter1: java.lang.reflect.Constructor;

        $i0 := @parameter2: int;

        specialinvoke $r4.<java.lang.Object: void <init>()>();

        $r1 = virtualinvoke $r2.<java.lang.reflect.Constructor: java.lang.annotation.Annotation[][] getParameterAnnotations()>();

        $r0 = $r1[$i0];

        $r4.<org.simpleframework.xml.core.ParameterContact: java.lang.annotation.Annotation[] labels> = $r0;

        $r4.<org.simpleframework.xml.core.ParameterContact: java.lang.reflect.Constructor factory> = $r2;

        $r4.<org.simpleframework.xml.core.ParameterContact: int index> = $i0;

        $r4.<org.simpleframework.xml.core.ParameterContact: java.lang.annotation.Annotation label> = $r3;

        return;
    }

    public java.lang.Object get(java.lang.Object)
    {
        java.lang.Object $r0;
        org.simpleframework.xml.core.ParameterContact $r1;

        $r1 := @this: org.simpleframework.xml.core.ParameterContact;

        $r0 := @parameter0: java.lang.Object;

        return null;
    }

    public java.lang.annotation.Annotation getAnnotation()
    {
        java.lang.annotation.Annotation r0;
        org.simpleframework.xml.core.ParameterContact $r1;

        $r1 := @this: org.simpleframework.xml.core.ParameterContact;

        r0 = $r1.<org.simpleframework.xml.core.ParameterContact: java.lang.annotation.Annotation label>;

        return r0;
    }

    public java.lang.annotation.Annotation getAnnotation(java.lang.Class)
    {
        boolean $z0;
        java.lang.annotation.Annotation $r0;
        int $i0, $i1;
        java.lang.annotation.Annotation[] $r1;
        java.lang.Class $r2, $r3;
        org.simpleframework.xml.core.ParameterContact $r4;

        $r4 := @this: org.simpleframework.xml.core.ParameterContact;

        $r2 := @parameter0: java.lang.Class;

        $r1 = $r4.<org.simpleframework.xml.core.ParameterContact: java.lang.annotation.Annotation[] labels>;

        $i1 = lengthof $r1;

        $i0 = 0;

     label1:
        if $i0 >= $i1 goto label3;

        $r0 = $r1[$i0];

        $r3 = interfaceinvoke $r0.<java.lang.annotation.Annotation: java.lang.Class annotationType()>();

        $z0 = virtualinvoke $r3.<java.lang.Object: boolean equals(java.lang.Object)>($r2);

        if $z0 == 0 goto label2;

        return $r0;

     label2:
        $i0 = $i0 + 1;

        goto label1;

     label3:
        return null;
    }

    public java.lang.Class getDependent()
    {
        java.lang.Class $r0;
        int $i0;
        java.lang.reflect.Constructor $r1;
        org.simpleframework.xml.core.ParameterContact $r2;

        $r2 := @this: org.simpleframework.xml.core.ParameterContact;

        $r1 = $r2.<org.simpleframework.xml.core.ParameterContact: java.lang.reflect.Constructor factory>;

        $i0 = $r2.<org.simpleframework.xml.core.ParameterContact: int index>;

        $r0 = staticinvoke <org.simpleframework.xml.core.Reflector: java.lang.Class getParameterDependent(java.lang.reflect.Constructor,int)>($r1, $i0);

        return $r0;
    }

    public java.lang.Class[] getDependents()
    {
        java.lang.Class[] $r0;
        int $i0;
        java.lang.reflect.Constructor $r1;
        org.simpleframework.xml.core.ParameterContact $r2;

        $r2 := @this: org.simpleframework.xml.core.ParameterContact;

        $r1 = $r2.<org.simpleframework.xml.core.ParameterContact: java.lang.reflect.Constructor factory>;

        $i0 = $r2.<org.simpleframework.xml.core.ParameterContact: int index>;

        $r0 = staticinvoke <org.simpleframework.xml.core.Reflector: java.lang.Class[] getParameterDependents(java.lang.reflect.Constructor,int)>($r1, $i0);

        return $r0;
    }

    public abstract java.lang.String getName();

    public java.lang.Class getType()
    {
        java.lang.Class $r0;
        java.lang.Class[] $r1;
        int $i0;
        java.lang.reflect.Constructor $r2;
        org.simpleframework.xml.core.ParameterContact $r3;

        $r3 := @this: org.simpleframework.xml.core.ParameterContact;

        $r2 = $r3.<org.simpleframework.xml.core.ParameterContact: java.lang.reflect.Constructor factory>;

        $r1 = virtualinvoke $r2.<java.lang.reflect.Constructor: java.lang.Class[] getParameterTypes()>();

        $i0 = $r3.<org.simpleframework.xml.core.ParameterContact: int index>;

        $r0 = $r1[$i0];

        return $r0;
    }

    public boolean isReadOnly()
    {
        org.simpleframework.xml.core.ParameterContact $r0;

        $r0 := @this: org.simpleframework.xml.core.ParameterContact;

        return 0;
    }

    public void set(java.lang.Object, java.lang.Object)
    {
        java.lang.Object $r0, $r1;
        org.simpleframework.xml.core.ParameterContact $r2;

        $r2 := @this: org.simpleframework.xml.core.ParameterContact;

        $r0 := @parameter0: java.lang.Object;

        $r1 := @parameter1: java.lang.Object;

        return;
    }

    public java.lang.String toString()
    {
        java.lang.String $r0;
        java.lang.reflect.Constructor $r1;
        java.lang.Object[] $r2;
        java.lang.Integer $r3;
        int $i0;
        org.simpleframework.xml.core.ParameterContact $r4;

        $r4 := @this: org.simpleframework.xml.core.ParameterContact;

        $r2 = newarray (java.lang.Object)[2];

        $i0 = $r4.<org.simpleframework.xml.core.ParameterContact: int index>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r2[0] = $r3;

        $r1 = $r4.<org.simpleframework.xml.core.ParameterContact: java.lang.reflect.Constructor factory>;

        $r2[1] = $r1;

        $r0 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("parameter %s of constructor %s", $r2);

        return $r0;
    }
}
