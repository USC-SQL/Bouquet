class org.simpleframework.xml.core.Composite extends java.lang.Object implements org.simpleframework.xml.core.Converter
{
    private final org.simpleframework.xml.core.Context context;
    private final org.simpleframework.xml.core.Criteria criteria;
    private final org.simpleframework.xml.core.ObjectFactory factory;
    private final org.simpleframework.xml.core.Primitive primitive;
    private final org.simpleframework.xml.core.Revision revision;
    private final org.simpleframework.xml.strategy.Type type;

    public void <init>(org.simpleframework.xml.core.Context, org.simpleframework.xml.strategy.Type)
    {
        org.simpleframework.xml.strategy.Type $r0;
        org.simpleframework.xml.core.Context $r1;
        org.simpleframework.xml.core.Composite $r2;

        $r2 := @this: org.simpleframework.xml.core.Composite;

        $r1 := @parameter0: org.simpleframework.xml.core.Context;

        $r0 := @parameter1: org.simpleframework.xml.strategy.Type;

        specialinvoke $r2.<org.simpleframework.xml.core.Composite: void <init>(org.simpleframework.xml.core.Context,org.simpleframework.xml.strategy.Type,java.lang.Class)>($r1, $r0, null);

        return;
    }

    public void <init>(org.simpleframework.xml.core.Context, org.simpleframework.xml.strategy.Type, java.lang.Class)
    {
        org.simpleframework.xml.core.Revision $r0;
        org.simpleframework.xml.core.Collector $r1;
        org.simpleframework.xml.core.Primitive $r2;
        org.simpleframework.xml.core.ObjectFactory $r3;
        java.lang.Class $r4;
        org.simpleframework.xml.strategy.Type $r5;
        org.simpleframework.xml.core.Context $r6;
        org.simpleframework.xml.core.Composite $r7;

        $r7 := @this: org.simpleframework.xml.core.Composite;

        $r6 := @parameter0: org.simpleframework.xml.core.Context;

        $r5 := @parameter1: org.simpleframework.xml.strategy.Type;

        $r4 := @parameter2: java.lang.Class;

        specialinvoke $r7.<java.lang.Object: void <init>()>();

        $r3 = new org.simpleframework.xml.core.ObjectFactory;

        specialinvoke $r3.<org.simpleframework.xml.core.ObjectFactory: void <init>(org.simpleframework.xml.core.Context,org.simpleframework.xml.strategy.Type,java.lang.Class)>($r6, $r5, $r4);

        $r7.<org.simpleframework.xml.core.Composite: org.simpleframework.xml.core.ObjectFactory factory> = $r3;

        $r2 = new org.simpleframework.xml.core.Primitive;

        specialinvoke $r2.<org.simpleframework.xml.core.Primitive: void <init>(org.simpleframework.xml.core.Context,org.simpleframework.xml.strategy.Type)>($r6, $r5);

        $r7.<org.simpleframework.xml.core.Composite: org.simpleframework.xml.core.Primitive primitive> = $r2;

        $r1 = new org.simpleframework.xml.core.Collector;

        specialinvoke $r1.<org.simpleframework.xml.core.Collector: void <init>()>();

        $r7.<org.simpleframework.xml.core.Composite: org.simpleframework.xml.core.Criteria criteria> = $r1;

        $r0 = new org.simpleframework.xml.core.Revision;

        specialinvoke $r0.<org.simpleframework.xml.core.Revision: void <init>()>();

        $r7.<org.simpleframework.xml.core.Composite: org.simpleframework.xml.core.Revision revision> = $r0;

        $r7.<org.simpleframework.xml.core.Composite: org.simpleframework.xml.core.Context context> = $r6;

        $r7.<org.simpleframework.xml.core.Composite: org.simpleframework.xml.strategy.Type type> = $r5;

        return;
    }

    private boolean isOverridden(org.simpleframework.xml.stream.OutputNode, java.lang.Object, org.simpleframework.xml.strategy.Type) throws java.lang.Exception
    {
        boolean $z0;
        org.simpleframework.xml.core.ObjectFactory $r0;
        org.simpleframework.xml.strategy.Type $r1;
        java.lang.Object $r2;
        org.simpleframework.xml.stream.OutputNode $r3;
        org.simpleframework.xml.core.Composite $r4;

        $r4 := @this: org.simpleframework.xml.core.Composite;

        $r3 := @parameter0: org.simpleframework.xml.stream.OutputNode;

        $r2 := @parameter1: java.lang.Object;

        $r1 := @parameter2: org.simpleframework.xml.strategy.Type;

        $r0 = $r4.<org.simpleframework.xml.core.Composite: org.simpleframework.xml.core.ObjectFactory factory>;

        $z0 = virtualinvoke $r0.<org.simpleframework.xml.core.ObjectFactory: boolean setOverride(org.simpleframework.xml.strategy.Type,java.lang.Object,org.simpleframework.xml.stream.OutputNode)>($r1, $r2, $r3);

        return $z0;
    }

    private java.lang.Object read(org.simpleframework.xml.stream.InputNode, org.simpleframework.xml.core.Instance, java.lang.Class) throws java.lang.Exception
    {
        java.lang.Object $r0, $r8;
        org.simpleframework.xml.core.Caller $r1;
        org.simpleframework.xml.core.Schema $r2;
        org.simpleframework.xml.core.Context $r3;
        java.lang.Class $r4;
        org.simpleframework.xml.core.Instance $r5;
        org.simpleframework.xml.stream.InputNode $r6;
        org.simpleframework.xml.core.Composite $r7;

        $r7 := @this: org.simpleframework.xml.core.Composite;

        $r6 := @parameter0: org.simpleframework.xml.stream.InputNode;

        $r5 := @parameter1: org.simpleframework.xml.core.Instance;

        $r4 := @parameter2: java.lang.Class;

        $r3 = $r7.<org.simpleframework.xml.core.Composite: org.simpleframework.xml.core.Context context>;

        $r2 = interfaceinvoke $r3.<org.simpleframework.xml.core.Context: org.simpleframework.xml.core.Schema getSchema(java.lang.Class)>($r4);

        $r1 = interfaceinvoke $r2.<org.simpleframework.xml.core.Schema: org.simpleframework.xml.core.Caller getCaller()>();

        $r0 = specialinvoke $r7.<org.simpleframework.xml.core.Composite: java.lang.Object read(org.simpleframework.xml.stream.InputNode,org.simpleframework.xml.core.Schema,org.simpleframework.xml.core.Instance)>($r6, $r2, $r5);

        virtualinvoke $r1.<org.simpleframework.xml.core.Caller: void validate(java.lang.Object)>($r0);

        virtualinvoke $r1.<org.simpleframework.xml.core.Caller: void commit(java.lang.Object)>($r0);

        interfaceinvoke $r5.<org.simpleframework.xml.core.Instance: java.lang.Object setInstance(java.lang.Object)>($r0);

        $r8 = specialinvoke $r7.<org.simpleframework.xml.core.Composite: java.lang.Object readResolve(org.simpleframework.xml.stream.InputNode,java.lang.Object,org.simpleframework.xml.core.Caller)>($r6, $r0, $r1);

        return $r8;
    }

    private java.lang.Object read(org.simpleframework.xml.stream.InputNode, org.simpleframework.xml.core.Schema, org.simpleframework.xml.core.Instance) throws java.lang.Exception
    {
        java.lang.Object $r0, $r6;
        boolean $z0;
        org.simpleframework.xml.core.Instantiator $r1;
        org.simpleframework.xml.core.Instance $r2;
        org.simpleframework.xml.core.Schema $r3;
        org.simpleframework.xml.stream.InputNode $r4;
        org.simpleframework.xml.core.Composite $r5;

        $r5 := @this: org.simpleframework.xml.core.Composite;

        $r4 := @parameter0: org.simpleframework.xml.stream.InputNode;

        $r3 := @parameter1: org.simpleframework.xml.core.Schema;

        $r2 := @parameter2: org.simpleframework.xml.core.Instance;

        $r1 = interfaceinvoke $r3.<org.simpleframework.xml.core.Schema: org.simpleframework.xml.core.Instantiator getInstantiator()>();

        $z0 = interfaceinvoke $r1.<org.simpleframework.xml.core.Instantiator: boolean isDefault()>();

        if $z0 == 0 goto label1;

        $r0 = specialinvoke $r5.<org.simpleframework.xml.core.Composite: java.lang.Object readDefault(org.simpleframework.xml.stream.InputNode,org.simpleframework.xml.core.Schema,org.simpleframework.xml.core.Instance)>($r4, $r3, $r2);

        return $r0;

     label1:
        specialinvoke $r5.<org.simpleframework.xml.core.Composite: void read(org.simpleframework.xml.stream.InputNode,java.lang.Object,org.simpleframework.xml.core.Schema)>($r4, null, $r3);

        $r6 = specialinvoke $r5.<org.simpleframework.xml.core.Composite: java.lang.Object readConstructor(org.simpleframework.xml.stream.InputNode,org.simpleframework.xml.core.Schema,org.simpleframework.xml.core.Instance)>($r4, $r3, $r2);

        return $r6;
    }

    private void read(org.simpleframework.xml.stream.InputNode, java.lang.Object, org.simpleframework.xml.core.Schema) throws java.lang.Exception
    {
        org.simpleframework.xml.core.Section $r0;
        org.simpleframework.xml.core.Schema $r1;
        java.lang.Object $r2;
        org.simpleframework.xml.stream.InputNode $r3;
        org.simpleframework.xml.core.Composite $r4;

        $r4 := @this: org.simpleframework.xml.core.Composite;

        $r3 := @parameter0: org.simpleframework.xml.stream.InputNode;

        $r2 := @parameter1: java.lang.Object;

        $r1 := @parameter2: org.simpleframework.xml.core.Schema;

        $r0 = interfaceinvoke $r1.<org.simpleframework.xml.core.Schema: org.simpleframework.xml.core.Section getSection()>();

        specialinvoke $r4.<org.simpleframework.xml.core.Composite: void readVersion(org.simpleframework.xml.stream.InputNode,java.lang.Object,org.simpleframework.xml.core.Schema)>($r3, $r2, $r1);

        specialinvoke $r4.<org.simpleframework.xml.core.Composite: void readSection(org.simpleframework.xml.stream.InputNode,java.lang.Object,org.simpleframework.xml.core.Section)>($r3, $r2, $r0);

        return;
    }

    private void readAttribute(org.simpleframework.xml.stream.InputNode, java.lang.Object, org.simpleframework.xml.core.Section, org.simpleframework.xml.core.LabelMap) throws java.lang.Exception
    {
        java.lang.Object[] $r0;
        org.simpleframework.xml.core.AttributeException $r1;
        org.simpleframework.xml.core.Revision $r2;
        boolean $z0, $z1;
        java.lang.Class $r3;
        org.simpleframework.xml.stream.Position $r4;
        org.simpleframework.xml.core.Label $r5;
        java.lang.String $r6, $r14;
        org.simpleframework.xml.strategy.Type $r7;
        org.simpleframework.xml.core.Context $r8, $r15;
        org.simpleframework.xml.core.LabelMap $r9;
        org.simpleframework.xml.core.Section $r10;
        java.lang.Object $r11;
        org.simpleframework.xml.stream.InputNode $r12;
        org.simpleframework.xml.core.Composite $r13;

        $r13 := @this: org.simpleframework.xml.core.Composite;

        $r12 := @parameter0: org.simpleframework.xml.stream.InputNode;

        $r11 := @parameter1: java.lang.Object;

        $r10 := @parameter2: org.simpleframework.xml.core.Section;

        $r9 := @parameter3: org.simpleframework.xml.core.LabelMap;

        $r6 = interfaceinvoke $r12.<org.simpleframework.xml.stream.InputNode: java.lang.String getName()>();

        $r14 = interfaceinvoke $r10.<org.simpleframework.xml.core.Section: java.lang.String getAttribute(java.lang.String)>($r6);

        $r5 = virtualinvoke $r9.<org.simpleframework.xml.core.LabelMap: org.simpleframework.xml.core.Label getLabel(java.lang.String)>($r14);

        if $r5 != null goto label1;

        $r4 = interfaceinvoke $r12.<org.simpleframework.xml.stream.InputNode: org.simpleframework.xml.stream.Position getPosition()>();

        $r8 = $r13.<org.simpleframework.xml.core.Composite: org.simpleframework.xml.core.Context context>;

        $r7 = $r13.<org.simpleframework.xml.core.Composite: org.simpleframework.xml.strategy.Type type>;

        $r3 = interfaceinvoke $r8.<org.simpleframework.xml.core.Context: java.lang.Class getType(org.simpleframework.xml.strategy.Type,java.lang.Object)>($r7, $r11);

        $r15 = $r13.<org.simpleframework.xml.core.Composite: org.simpleframework.xml.core.Context context>;

        $z0 = virtualinvoke $r9.<org.simpleframework.xml.core.LabelMap: boolean isStrict(org.simpleframework.xml.core.Context)>($r15);

        if $z0 == 0 goto label2;

        $r2 = $r13.<org.simpleframework.xml.core.Composite: org.simpleframework.xml.core.Revision revision>;

        $z1 = virtualinvoke $r2.<org.simpleframework.xml.core.Revision: boolean isEqual()>();

        if $z1 == 0 goto label3;

        $r1 = new org.simpleframework.xml.core.AttributeException;

        $r0 = newarray (java.lang.Object)[3];

        $r0[0] = $r14;

        $r0[1] = $r3;

        $r0[2] = $r4;

        specialinvoke $r1.<org.simpleframework.xml.core.AttributeException: void <init>(java.lang.String,java.lang.Object[])>("Attribute \'%s\' does not have a match in %s at %s", $r0);

        throw $r1;

     label1:
        specialinvoke $r13.<org.simpleframework.xml.core.Composite: java.lang.Object readInstance(org.simpleframework.xml.stream.InputNode,java.lang.Object,org.simpleframework.xml.core.Label)>($r12, $r11, $r5);

        return;

     label2:
        return;

     label3:
        return;
    }

    private void readAttributes(org.simpleframework.xml.stream.InputNode, java.lang.Object, org.simpleframework.xml.core.Section) throws java.lang.Exception
    {
        java.lang.String $r0;
        boolean $z0;
        java.util.Iterator $r1;
        org.simpleframework.xml.core.LabelMap $r2;
        org.simpleframework.xml.stream.NodeMap $r3;
        org.simpleframework.xml.core.Section $r4;
        java.lang.Object $r5, $r6;
        org.simpleframework.xml.stream.InputNode $r7, $r8;
        org.simpleframework.xml.core.Composite $r9;

        $r9 := @this: org.simpleframework.xml.core.Composite;

        $r7 := @parameter0: org.simpleframework.xml.stream.InputNode;

        $r5 := @parameter1: java.lang.Object;

        $r4 := @parameter2: org.simpleframework.xml.core.Section;

        $r3 = interfaceinvoke $r7.<org.simpleframework.xml.stream.InputNode: org.simpleframework.xml.stream.NodeMap getAttributes()>();

        $r2 = interfaceinvoke $r4.<org.simpleframework.xml.core.Section: org.simpleframework.xml.core.LabelMap getAttributes()>();

        $r1 = interfaceinvoke $r3.<org.simpleframework.xml.stream.NodeMap: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r6 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r0 = (java.lang.String) $r6;

        $r8 = interfaceinvoke $r7.<org.simpleframework.xml.stream.InputNode: org.simpleframework.xml.stream.InputNode getAttribute(java.lang.String)>($r0);

        if $r8 == null goto label1;

        specialinvoke $r9.<org.simpleframework.xml.core.Composite: void readAttribute(org.simpleframework.xml.stream.InputNode,java.lang.Object,org.simpleframework.xml.core.Section,org.simpleframework.xml.core.LabelMap)>($r8, $r5, $r4, $r2);

        goto label1;

     label2:
        specialinvoke $r9.<org.simpleframework.xml.core.Composite: void validate(org.simpleframework.xml.stream.InputNode,org.simpleframework.xml.core.LabelMap,java.lang.Object)>($r7, $r2, $r5);

        return;
    }

    private java.lang.Object readConstructor(org.simpleframework.xml.stream.InputNode, org.simpleframework.xml.core.Schema, org.simpleframework.xml.core.Instance) throws java.lang.Exception
    {
        java.lang.Object $r0;
        org.simpleframework.xml.core.Instantiator $r1;
        org.simpleframework.xml.core.Criteria $r2, $r7;
        org.simpleframework.xml.core.Instance $r3;
        org.simpleframework.xml.core.Schema $r4;
        org.simpleframework.xml.stream.InputNode $r5;
        org.simpleframework.xml.core.Composite $r6;

        $r6 := @this: org.simpleframework.xml.core.Composite;

        $r5 := @parameter0: org.simpleframework.xml.stream.InputNode;

        $r4 := @parameter1: org.simpleframework.xml.core.Schema;

        $r3 := @parameter2: org.simpleframework.xml.core.Instance;

        $r1 = interfaceinvoke $r4.<org.simpleframework.xml.core.Schema: org.simpleframework.xml.core.Instantiator getInstantiator()>();

        $r2 = $r6.<org.simpleframework.xml.core.Composite: org.simpleframework.xml.core.Criteria criteria>;

        $r0 = interfaceinvoke $r1.<org.simpleframework.xml.core.Instantiator: java.lang.Object getInstance(org.simpleframework.xml.core.Criteria)>($r2);

        if $r3 == null goto label1;

        interfaceinvoke $r3.<org.simpleframework.xml.core.Instance: java.lang.Object setInstance(java.lang.Object)>($r0);

        $r7 = $r6.<org.simpleframework.xml.core.Composite: org.simpleframework.xml.core.Criteria criteria>;

        interfaceinvoke $r7.<org.simpleframework.xml.core.Criteria: void commit(java.lang.Object)>($r0);

        return $r0;

     label1:
        return $r0;
    }

    private java.lang.Object readDefault(org.simpleframework.xml.stream.InputNode, org.simpleframework.xml.core.Schema, org.simpleframework.xml.core.Instance) throws java.lang.Exception
    {
        java.lang.Object $r0;
        org.simpleframework.xml.core.Criteria $r1;
        org.simpleframework.xml.core.Instance $r2;
        org.simpleframework.xml.core.Schema $r3;
        org.simpleframework.xml.stream.InputNode $r4;
        org.simpleframework.xml.core.Composite $r5;

        $r5 := @this: org.simpleframework.xml.core.Composite;

        $r4 := @parameter0: org.simpleframework.xml.stream.InputNode;

        $r3 := @parameter1: org.simpleframework.xml.core.Schema;

        $r2 := @parameter2: org.simpleframework.xml.core.Instance;

        $r0 = interfaceinvoke $r2.<org.simpleframework.xml.core.Instance: java.lang.Object getInstance()>();

        if $r2 == null goto label1;

        interfaceinvoke $r2.<org.simpleframework.xml.core.Instance: java.lang.Object setInstance(java.lang.Object)>($r0);

        specialinvoke $r5.<org.simpleframework.xml.core.Composite: void read(org.simpleframework.xml.stream.InputNode,java.lang.Object,org.simpleframework.xml.core.Schema)>($r4, $r0, $r3);

        $r1 = $r5.<org.simpleframework.xml.core.Composite: org.simpleframework.xml.core.Criteria criteria>;

        interfaceinvoke $r1.<org.simpleframework.xml.core.Criteria: void commit(java.lang.Object)>($r0);

        return $r0;

     label1:
        return $r0;
    }

    private void readElement(org.simpleframework.xml.stream.InputNode, java.lang.Object, org.simpleframework.xml.core.Section, org.simpleframework.xml.core.LabelMap) throws java.lang.Exception
    {
        java.lang.Object[] $r0;
        org.simpleframework.xml.core.ElementException $r1;
        org.simpleframework.xml.core.Revision $r2;
        boolean $z0, $z1;
        java.lang.Class $r3;
        org.simpleframework.xml.core.Context $r4, $r17;
        org.simpleframework.xml.stream.Position $r5;
        java.lang.String $r6, $r16;
        org.simpleframework.xml.strategy.Type $r7;
        org.simpleframework.xml.core.Criteria $r8;
        org.simpleframework.xml.core.Label $r9, $r10;
        org.simpleframework.xml.core.LabelMap $r11;
        org.simpleframework.xml.core.Section $r12;
        java.lang.Object $r13;
        org.simpleframework.xml.stream.InputNode $r14;
        org.simpleframework.xml.core.Composite $r15;

        $r15 := @this: org.simpleframework.xml.core.Composite;

        $r14 := @parameter0: org.simpleframework.xml.stream.InputNode;

        $r13 := @parameter1: java.lang.Object;

        $r12 := @parameter2: org.simpleframework.xml.core.Section;

        $r11 := @parameter3: org.simpleframework.xml.core.LabelMap;

        $r6 = interfaceinvoke $r14.<org.simpleframework.xml.stream.InputNode: java.lang.String getName()>();

        $r16 = interfaceinvoke $r12.<org.simpleframework.xml.core.Section: java.lang.String getPath(java.lang.String)>($r6);

        $r10 = virtualinvoke $r11.<org.simpleframework.xml.core.LabelMap: org.simpleframework.xml.core.Label getLabel(java.lang.String)>($r16);

        $r9 = $r10;

        if $r10 != null goto label1;

        $r8 = $r15.<org.simpleframework.xml.core.Composite: org.simpleframework.xml.core.Criteria criteria>;

        $r9 = interfaceinvoke $r8.<org.simpleframework.xml.core.Criteria: org.simpleframework.xml.core.Variable resolve(java.lang.String)>($r16);

     label1:
        if $r9 != null goto label3;

        $r5 = interfaceinvoke $r14.<org.simpleframework.xml.stream.InputNode: org.simpleframework.xml.stream.Position getPosition()>();

        $r4 = $r15.<org.simpleframework.xml.core.Composite: org.simpleframework.xml.core.Context context>;

        $r7 = $r15.<org.simpleframework.xml.core.Composite: org.simpleframework.xml.strategy.Type type>;

        $r3 = interfaceinvoke $r4.<org.simpleframework.xml.core.Context: java.lang.Class getType(org.simpleframework.xml.strategy.Type,java.lang.Object)>($r7, $r13);

        $r17 = $r15.<org.simpleframework.xml.core.Composite: org.simpleframework.xml.core.Context context>;

        $z0 = virtualinvoke $r11.<org.simpleframework.xml.core.LabelMap: boolean isStrict(org.simpleframework.xml.core.Context)>($r17);

        if $z0 == 0 goto label2;

        $r2 = $r15.<org.simpleframework.xml.core.Composite: org.simpleframework.xml.core.Revision revision>;

        $z1 = virtualinvoke $r2.<org.simpleframework.xml.core.Revision: boolean isEqual()>();

        if $z1 == 0 goto label2;

        $r1 = new org.simpleframework.xml.core.ElementException;

        $r0 = newarray (java.lang.Object)[3];

        $r0[0] = $r16;

        $r0[1] = $r3;

        $r0[2] = $r5;

        specialinvoke $r1.<org.simpleframework.xml.core.ElementException: void <init>(java.lang.String,java.lang.Object[])>("Element \'%s\' does not have a match in %s at %s", $r0);

        throw $r1;

     label2:
        interfaceinvoke $r14.<org.simpleframework.xml.stream.InputNode: void skip()>();

        return;

     label3:
        specialinvoke $r15.<org.simpleframework.xml.core.Composite: void readUnion(org.simpleframework.xml.stream.InputNode,java.lang.Object,org.simpleframework.xml.core.LabelMap,org.simpleframework.xml.core.Label)>($r14, $r13, $r11, $r9);

        return;
    }

    private void readElements(org.simpleframework.xml.stream.InputNode, java.lang.Object, org.simpleframework.xml.core.Section) throws java.lang.Exception
    {
        java.lang.String $r0;
        org.simpleframework.xml.core.LabelMap $r1;
        org.simpleframework.xml.core.Section $r2, $r3;
        java.lang.Object $r4;
        org.simpleframework.xml.stream.InputNode $r5, $r6;
        org.simpleframework.xml.core.Composite $r7;

        $r7 := @this: org.simpleframework.xml.core.Composite;

        $r5 := @parameter0: org.simpleframework.xml.stream.InputNode;

        $r4 := @parameter1: java.lang.Object;

        $r2 := @parameter2: org.simpleframework.xml.core.Section;

        $r1 = interfaceinvoke $r2.<org.simpleframework.xml.core.Section: org.simpleframework.xml.core.LabelMap getElements()>();

        $r6 = interfaceinvoke $r5.<org.simpleframework.xml.stream.InputNode: org.simpleframework.xml.stream.InputNode getNext()>();

     label1:
        if $r6 == null goto label4;

        $r0 = interfaceinvoke $r6.<org.simpleframework.xml.stream.InputNode: java.lang.String getName()>();

        $r3 = interfaceinvoke $r2.<org.simpleframework.xml.core.Section: org.simpleframework.xml.core.Section getSection(java.lang.String)>($r0);

        if $r3 == null goto label3;

        specialinvoke $r7.<org.simpleframework.xml.core.Composite: void readSection(org.simpleframework.xml.stream.InputNode,java.lang.Object,org.simpleframework.xml.core.Section)>($r6, $r4, $r3);

     label2:
        $r6 = interfaceinvoke $r5.<org.simpleframework.xml.stream.InputNode: org.simpleframework.xml.stream.InputNode getNext()>();

        goto label1;

     label3:
        specialinvoke $r7.<org.simpleframework.xml.core.Composite: void readElement(org.simpleframework.xml.stream.InputNode,java.lang.Object,org.simpleframework.xml.core.Section,org.simpleframework.xml.core.LabelMap)>($r6, $r4, $r2, $r1);

        goto label2;

     label4:
        specialinvoke $r7.<org.simpleframework.xml.core.Composite: void validate(org.simpleframework.xml.stream.InputNode,org.simpleframework.xml.core.LabelMap,java.lang.Object)>($r5, $r1, $r4);

        return;
    }

    private java.lang.Object readInstance(org.simpleframework.xml.stream.InputNode, java.lang.Object, org.simpleframework.xml.core.Label) throws java.lang.Exception
    {
        org.simpleframework.xml.core.Criteria $r0;
        java.lang.Object[] $r1;
        org.simpleframework.xml.core.ValueRequiredException $r2;
        org.simpleframework.xml.core.Revision $r3;
        boolean $z0, $z1;
        java.lang.Class $r4;
        org.simpleframework.xml.stream.Position $r5;
        org.simpleframework.xml.strategy.Type $r6;
        org.simpleframework.xml.core.Context $r7, $r13;
        org.simpleframework.xml.core.Label $r8;
        java.lang.Object $r9, $r10, $r14;
        org.simpleframework.xml.stream.InputNode $r11;
        org.simpleframework.xml.core.Composite $r12;

        $r12 := @this: org.simpleframework.xml.core.Composite;

        $r11 := @parameter0: org.simpleframework.xml.stream.InputNode;

        $r9 := @parameter1: java.lang.Object;

        $r8 := @parameter2: org.simpleframework.xml.core.Label;

        $r10 = specialinvoke $r12.<org.simpleframework.xml.core.Composite: java.lang.Object readVariable(org.simpleframework.xml.stream.InputNode,java.lang.Object,org.simpleframework.xml.core.Label)>($r11, $r9, $r8);

        if $r10 != null goto label1;

        $r5 = interfaceinvoke $r11.<org.simpleframework.xml.stream.InputNode: org.simpleframework.xml.stream.Position getPosition()>();

        $r7 = $r12.<org.simpleframework.xml.core.Composite: org.simpleframework.xml.core.Context context>;

        $r6 = $r12.<org.simpleframework.xml.core.Composite: org.simpleframework.xml.strategy.Type type>;

        $r4 = interfaceinvoke $r7.<org.simpleframework.xml.core.Context: java.lang.Class getType(org.simpleframework.xml.strategy.Type,java.lang.Object)>($r6, $r9);

        $z0 = interfaceinvoke $r8.<org.simpleframework.xml.core.Label: boolean isRequired()>();

        if $z0 == 0 goto label2;

        $r3 = $r12.<org.simpleframework.xml.core.Composite: org.simpleframework.xml.core.Revision revision>;

        $z1 = virtualinvoke $r3.<org.simpleframework.xml.core.Revision: boolean isEqual()>();

        if $z1 == 0 goto label3;

        $r2 = new org.simpleframework.xml.core.ValueRequiredException;

        $r1 = newarray (java.lang.Object)[3];

        $r1[0] = $r8;

        $r1[1] = $r4;

        $r1[2] = $r5;

        specialinvoke $r2.<org.simpleframework.xml.core.ValueRequiredException: void <init>(java.lang.String,java.lang.Object[])>("Empty value for %s in %s at %s", $r1);

        throw $r2;

     label1:
        $r13 = $r12.<org.simpleframework.xml.core.Composite: org.simpleframework.xml.core.Context context>;

        $r14 = interfaceinvoke $r8.<org.simpleframework.xml.core.Label: java.lang.Object getEmpty(org.simpleframework.xml.core.Context)>($r13);

        if $r10 == $r14 goto label4;

        $r0 = $r12.<org.simpleframework.xml.core.Composite: org.simpleframework.xml.core.Criteria criteria>;

        interfaceinvoke $r0.<org.simpleframework.xml.core.Criteria: void set(org.simpleframework.xml.core.Label,java.lang.Object)>($r8, $r10);

        return $r10;

     label2:
        return $r10;

     label3:
        return $r10;

     label4:
        return $r10;
    }

    private java.lang.Object readPrimitive(org.simpleframework.xml.stream.InputNode, org.simpleframework.xml.core.Instance) throws java.lang.Exception
    {
        java.lang.Object $r0;
        java.lang.Class $r1;
        org.simpleframework.xml.core.Primitive $r2;
        org.simpleframework.xml.core.Instance $r3;
        org.simpleframework.xml.stream.InputNode $r4;
        org.simpleframework.xml.core.Composite $r5;

        $r5 := @this: org.simpleframework.xml.core.Composite;

        $r4 := @parameter0: org.simpleframework.xml.stream.InputNode;

        $r3 := @parameter1: org.simpleframework.xml.core.Instance;

        $r1 = interfaceinvoke $r3.<org.simpleframework.xml.core.Instance: java.lang.Class getType()>();

        $r2 = $r5.<org.simpleframework.xml.core.Composite: org.simpleframework.xml.core.Primitive primitive>;

        $r0 = virtualinvoke $r2.<org.simpleframework.xml.core.Primitive: java.lang.Object read(org.simpleframework.xml.stream.InputNode,java.lang.Class)>($r4, $r1);

        if $r1 == null goto label1;

        interfaceinvoke $r3.<org.simpleframework.xml.core.Instance: java.lang.Object setInstance(java.lang.Object)>($r0);

        return $r0;

     label1:
        return $r0;
    }

    private java.lang.Object readResolve(org.simpleframework.xml.stream.InputNode, java.lang.Object, org.simpleframework.xml.core.Caller) throws java.lang.Exception
    {
        java.lang.Object[] $r0;
        org.simpleframework.xml.core.ElementException $r1;
        boolean $z0;
        java.lang.Class $r2, $r3;
        org.simpleframework.xml.stream.Position $r4;
        org.simpleframework.xml.strategy.Type $r5;
        org.simpleframework.xml.core.Caller $r6;
        java.lang.Object $r7, $r10;
        org.simpleframework.xml.stream.InputNode $r8;
        org.simpleframework.xml.core.Composite $r9;

        $r9 := @this: org.simpleframework.xml.core.Composite;

        $r8 := @parameter0: org.simpleframework.xml.stream.InputNode;

        $r7 := @parameter1: java.lang.Object;

        $r6 := @parameter2: org.simpleframework.xml.core.Caller;

        if $r7 == null goto label1;

        $r4 = interfaceinvoke $r8.<org.simpleframework.xml.stream.InputNode: org.simpleframework.xml.stream.Position getPosition()>();

        $r10 = virtualinvoke $r6.<org.simpleframework.xml.core.Caller: java.lang.Object resolve(java.lang.Object)>($r7);

        $r5 = $r9.<org.simpleframework.xml.core.Composite: org.simpleframework.xml.strategy.Type type>;

        $r2 = interfaceinvoke $r5.<org.simpleframework.xml.strategy.Type: java.lang.Class getType()>();

        $r3 = virtualinvoke $r10.<java.lang.Object: java.lang.Class getClass()>();

        $z0 = virtualinvoke $r2.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r3);

        if $z0 != 0 goto label2;

        $r1 = new org.simpleframework.xml.core.ElementException;

        $r0 = newarray (java.lang.Object)[3];

        $r0[0] = $r3;

        $r0[1] = $r2;

        $r0[2] = $r4;

        specialinvoke $r1.<org.simpleframework.xml.core.ElementException: void <init>(java.lang.String,java.lang.Object[])>("Type %s does not match %s at %s", $r0);

        throw $r1;

     label1:
        return $r7;

     label2:
        return $r10;
    }

    private void readSection(org.simpleframework.xml.stream.InputNode, java.lang.Object, org.simpleframework.xml.core.Section) throws java.lang.Exception
    {
        org.simpleframework.xml.core.Section $r0;
        java.lang.Object $r1;
        org.simpleframework.xml.stream.InputNode $r2;
        org.simpleframework.xml.core.Composite $r3;

        $r3 := @this: org.simpleframework.xml.core.Composite;

        $r2 := @parameter0: org.simpleframework.xml.stream.InputNode;

        $r1 := @parameter1: java.lang.Object;

        $r0 := @parameter2: org.simpleframework.xml.core.Section;

        specialinvoke $r3.<org.simpleframework.xml.core.Composite: void readText(org.simpleframework.xml.stream.InputNode,java.lang.Object,org.simpleframework.xml.core.Section)>($r2, $r1, $r0);

        specialinvoke $r3.<org.simpleframework.xml.core.Composite: void readAttributes(org.simpleframework.xml.stream.InputNode,java.lang.Object,org.simpleframework.xml.core.Section)>($r2, $r1, $r0);

        specialinvoke $r3.<org.simpleframework.xml.core.Composite: void readElements(org.simpleframework.xml.stream.InputNode,java.lang.Object,org.simpleframework.xml.core.Section)>($r2, $r1, $r0);

        return;
    }

    private void readText(org.simpleframework.xml.stream.InputNode, java.lang.Object, org.simpleframework.xml.core.Section) throws java.lang.Exception
    {
        org.simpleframework.xml.core.Label $r0;
        org.simpleframework.xml.core.Section $r1;
        java.lang.Object $r2;
        org.simpleframework.xml.stream.InputNode $r3;
        org.simpleframework.xml.core.Composite $r4;

        $r4 := @this: org.simpleframework.xml.core.Composite;

        $r3 := @parameter0: org.simpleframework.xml.stream.InputNode;

        $r2 := @parameter1: java.lang.Object;

        $r1 := @parameter2: org.simpleframework.xml.core.Section;

        $r0 = interfaceinvoke $r1.<org.simpleframework.xml.core.Section: org.simpleframework.xml.core.Label getText()>();

        if $r0 == null goto label1;

        specialinvoke $r4.<org.simpleframework.xml.core.Composite: java.lang.Object readInstance(org.simpleframework.xml.stream.InputNode,java.lang.Object,org.simpleframework.xml.core.Label)>($r3, $r2, $r0);

        return;

     label1:
        return;
    }

    private void readUnion(org.simpleframework.xml.stream.InputNode, java.lang.Object, org.simpleframework.xml.core.LabelMap, org.simpleframework.xml.core.Label) throws java.lang.Exception
    {
        org.simpleframework.xml.core.Criteria $r0;
        java.lang.String $r1;
        boolean $z0, $z1;
        java.util.Iterator $r2;
        java.util.Collection $r3;
        org.simpleframework.xml.core.Label $r4;
        org.simpleframework.xml.core.LabelMap $r5;
        java.lang.Object $r6, $r7, $r10;
        org.simpleframework.xml.stream.InputNode $r8;
        org.simpleframework.xml.core.Composite $r9;

        $r9 := @this: org.simpleframework.xml.core.Composite;

        $r8 := @parameter0: org.simpleframework.xml.stream.InputNode;

        $r6 := @parameter1: java.lang.Object;

        $r5 := @parameter2: org.simpleframework.xml.core.LabelMap;

        $r4 := @parameter3: org.simpleframework.xml.core.Label;

        $r10 = specialinvoke $r9.<org.simpleframework.xml.core.Composite: java.lang.Object readInstance(org.simpleframework.xml.stream.InputNode,java.lang.Object,org.simpleframework.xml.core.Label)>($r8, $r6, $r4);

        $r3 = interfaceinvoke $r4.<org.simpleframework.xml.core.Label: java.util.Collection getPaths()>();

        $r2 = interfaceinvoke $r3.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r7 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $r1 = (java.lang.String) $r7;

        virtualinvoke $r5.<org.simpleframework.xml.core.LabelMap: org.simpleframework.xml.core.Label getLabel(java.lang.String)>($r1);

        goto label1;

     label2:
        $z1 = interfaceinvoke $r4.<org.simpleframework.xml.core.Label: boolean isInline()>();

        if $z1 == 0 goto label3;

        $r0 = $r9.<org.simpleframework.xml.core.Composite: org.simpleframework.xml.core.Criteria criteria>;

        interfaceinvoke $r0.<org.simpleframework.xml.core.Criteria: void set(org.simpleframework.xml.core.Label,java.lang.Object)>($r4, $r10);

        return;

     label3:
        return;
    }

    private java.lang.Object readVariable(org.simpleframework.xml.stream.InputNode, java.lang.Object, org.simpleframework.xml.core.Label) throws java.lang.Exception
    {
        org.simpleframework.xml.core.Contact $r0;
        org.simpleframework.xml.core.Variable $r1;
        org.simpleframework.xml.core.Criteria $r2;
        boolean $z0;
        org.simpleframework.xml.core.Converter $r3;
        org.simpleframework.xml.core.Context $r4;
        org.simpleframework.xml.core.Label $r5;
        java.lang.Object $r6, $r9, $r10, $r11, $r12, $r13;
        org.simpleframework.xml.stream.InputNode $r7;
        org.simpleframework.xml.core.Composite $r8;

        $r8 := @this: org.simpleframework.xml.core.Composite;

        $r7 := @parameter0: org.simpleframework.xml.stream.InputNode;

        $r6 := @parameter1: java.lang.Object;

        $r5 := @parameter2: org.simpleframework.xml.core.Label;

        $r4 = $r8.<org.simpleframework.xml.core.Composite: org.simpleframework.xml.core.Context context>;

        $r3 = interfaceinvoke $r5.<org.simpleframework.xml.core.Label: org.simpleframework.xml.core.Converter getConverter(org.simpleframework.xml.core.Context)>($r4);

        $z0 = interfaceinvoke $r5.<org.simpleframework.xml.core.Label: boolean isCollection()>();

        if $z0 == 0 goto label2;

        $r2 = $r8.<org.simpleframework.xml.core.Composite: org.simpleframework.xml.core.Criteria criteria>;

        $r1 = interfaceinvoke $r2.<org.simpleframework.xml.core.Criteria: org.simpleframework.xml.core.Variable get(org.simpleframework.xml.core.Label)>($r5);

        $r0 = interfaceinvoke $r5.<org.simpleframework.xml.core.Label: org.simpleframework.xml.core.Contact getContact()>();

        if $r1 == null goto label1;

        $r9 = virtualinvoke $r1.<org.simpleframework.xml.core.Variable: java.lang.Object getValue()>();

        $r10 = interfaceinvoke $r3.<org.simpleframework.xml.core.Converter: java.lang.Object read(org.simpleframework.xml.stream.InputNode,java.lang.Object)>($r7, $r9);

        return $r10;

     label1:
        if $r6 == null goto label2;

        $r11 = interfaceinvoke $r0.<org.simpleframework.xml.core.Contact: java.lang.Object get(java.lang.Object)>($r6);

        if $r11 == null goto label2;

        $r12 = interfaceinvoke $r3.<org.simpleframework.xml.core.Converter: java.lang.Object read(org.simpleframework.xml.stream.InputNode,java.lang.Object)>($r7, $r11);

        return $r12;

     label2:
        $r13 = interfaceinvoke $r3.<org.simpleframework.xml.core.Converter: java.lang.Object read(org.simpleframework.xml.stream.InputNode)>($r7);

        return $r13;
    }

    private void readVersion(org.simpleframework.xml.stream.InputNode, java.lang.Object, org.simpleframework.xml.core.Label) throws java.lang.Exception
    {
        boolean $z0;
        org.simpleframework.xml.core.Revision $r0, $r11;
        java.lang.Double $r1;
        double $d0;
        org.simpleframework.xml.Version $r2;
        org.simpleframework.xml.core.Context $r3;
        java.lang.Class $r4;
        org.simpleframework.xml.strategy.Type $r5;
        org.simpleframework.xml.core.Label $r6;
        java.lang.Object $r7, $r10;
        org.simpleframework.xml.stream.InputNode $r8;
        org.simpleframework.xml.core.Composite $r9;

        $r9 := @this: org.simpleframework.xml.core.Composite;

        $r8 := @parameter0: org.simpleframework.xml.stream.InputNode;

        $r7 := @parameter1: java.lang.Object;

        $r6 := @parameter2: org.simpleframework.xml.core.Label;

        $r10 = specialinvoke $r9.<org.simpleframework.xml.core.Composite: java.lang.Object readInstance(org.simpleframework.xml.stream.InputNode,java.lang.Object,org.simpleframework.xml.core.Label)>($r8, $r7, $r6);

        $r5 = $r9.<org.simpleframework.xml.core.Composite: org.simpleframework.xml.strategy.Type type>;

        $r4 = interfaceinvoke $r5.<org.simpleframework.xml.strategy.Type: java.lang.Class getType()>();

        if $r10 == null goto label1;

        $r3 = $r9.<org.simpleframework.xml.core.Composite: org.simpleframework.xml.core.Context context>;

        $r2 = interfaceinvoke $r3.<org.simpleframework.xml.core.Context: org.simpleframework.xml.Version getVersion(java.lang.Class)>($r4);

        $d0 = interfaceinvoke $r2.<org.simpleframework.xml.Version: double revision()>();

        $r1 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        $r0 = $r9.<org.simpleframework.xml.core.Composite: org.simpleframework.xml.core.Revision revision>;

        $z0 = virtualinvoke $r10.<java.lang.Object: boolean equals(java.lang.Object)>($r0);

        if $z0 != 0 goto label2;

        $r11 = $r9.<org.simpleframework.xml.core.Composite: org.simpleframework.xml.core.Revision revision>;

        virtualinvoke $r11.<org.simpleframework.xml.core.Revision: boolean compare(java.lang.Object,java.lang.Object)>($r1, $r10);

        return;

     label1:
        return;

     label2:
        return;
    }

    private void readVersion(org.simpleframework.xml.stream.InputNode, java.lang.Object, org.simpleframework.xml.core.Schema) throws java.lang.Exception
    {
        org.simpleframework.xml.core.Criteria $r0;
        java.lang.Double $r1, $r2;
        double $d0, $d1;
        org.simpleframework.xml.core.Revision $r3, $r17;
        org.simpleframework.xml.Version $r4;
        org.simpleframework.xml.core.Context $r5;
        org.simpleframework.xml.stream.Node $r6;
        org.simpleframework.xml.stream.NodeMap $r7;
        java.lang.String $r8;
        java.lang.Class $r9;
        org.simpleframework.xml.core.Label $r10;
        org.simpleframework.xml.strategy.Type $r11;
        org.simpleframework.xml.core.Schema $r12;
        java.lang.Object $r13;
        org.simpleframework.xml.stream.InputNode $r14, $r16;
        org.simpleframework.xml.core.Composite $r15;

        $r15 := @this: org.simpleframework.xml.core.Composite;

        $r14 := @parameter0: org.simpleframework.xml.stream.InputNode;

        $r13 := @parameter1: java.lang.Object;

        $r12 := @parameter2: org.simpleframework.xml.core.Schema;

        $r10 = interfaceinvoke $r12.<org.simpleframework.xml.core.Schema: org.simpleframework.xml.core.Label getVersion()>();

        $r11 = $r15.<org.simpleframework.xml.core.Composite: org.simpleframework.xml.strategy.Type type>;

        $r9 = interfaceinvoke $r11.<org.simpleframework.xml.strategy.Type: java.lang.Class getType()>();

        if $r10 == null goto label2;

        $r8 = interfaceinvoke $r10.<org.simpleframework.xml.core.Label: java.lang.String getName()>();

        $r7 = interfaceinvoke $r14.<org.simpleframework.xml.stream.InputNode: org.simpleframework.xml.stream.NodeMap getAttributes()>();

        $r6 = interfaceinvoke $r7.<org.simpleframework.xml.stream.NodeMap: org.simpleframework.xml.stream.Node remove(java.lang.String)>($r8);

        $r16 = (org.simpleframework.xml.stream.InputNode) $r6;

        if $r16 == null goto label1;

        specialinvoke $r15.<org.simpleframework.xml.core.Composite: void readVersion(org.simpleframework.xml.stream.InputNode,java.lang.Object,org.simpleframework.xml.core.Label)>($r16, $r13, $r10);

        return;

     label1:
        $r5 = $r15.<org.simpleframework.xml.core.Composite: org.simpleframework.xml.core.Context context>;

        $r4 = interfaceinvoke $r5.<org.simpleframework.xml.core.Context: org.simpleframework.xml.Version getVersion(java.lang.Class)>($r9);

        $r3 = $r15.<org.simpleframework.xml.core.Composite: org.simpleframework.xml.core.Revision revision>;

        $d0 = virtualinvoke $r3.<org.simpleframework.xml.core.Revision: double getDefault()>();

        $r1 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        $d1 = interfaceinvoke $r4.<org.simpleframework.xml.Version: double revision()>();

        $r2 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d1);

        $r0 = $r15.<org.simpleframework.xml.core.Composite: org.simpleframework.xml.core.Criteria criteria>;

        interfaceinvoke $r0.<org.simpleframework.xml.core.Criteria: void set(org.simpleframework.xml.core.Label,java.lang.Object)>($r10, $r1);

        $r17 = $r15.<org.simpleframework.xml.core.Composite: org.simpleframework.xml.core.Revision revision>;

        virtualinvoke $r17.<org.simpleframework.xml.core.Revision: boolean compare(java.lang.Object,java.lang.Object)>($r2, $r1);

        return;

     label2:
        return;
    }

    private void validate(org.simpleframework.xml.stream.InputNode, org.simpleframework.xml.core.Label) throws java.lang.Exception
    {
        org.simpleframework.xml.core.Criteria $r0;
        java.lang.Object[] $r1;
        org.simpleframework.xml.core.PersistenceException $r2;
        boolean $z0;
        java.lang.Class $r3;
        org.simpleframework.xml.strategy.Type $r4;
        org.simpleframework.xml.stream.Position $r5;
        org.simpleframework.xml.core.Converter $r6;
        org.simpleframework.xml.core.Context $r7;
        org.simpleframework.xml.core.Label $r8;
        org.simpleframework.xml.stream.InputNode $r9;
        org.simpleframework.xml.core.Composite $r10;

        $r10 := @this: org.simpleframework.xml.core.Composite;

        $r9 := @parameter0: org.simpleframework.xml.stream.InputNode;

        $r8 := @parameter1: org.simpleframework.xml.core.Label;

        $r7 = $r10.<org.simpleframework.xml.core.Composite: org.simpleframework.xml.core.Context context>;

        $r6 = interfaceinvoke $r8.<org.simpleframework.xml.core.Label: org.simpleframework.xml.core.Converter getConverter(org.simpleframework.xml.core.Context)>($r7);

        $r5 = interfaceinvoke $r9.<org.simpleframework.xml.stream.InputNode: org.simpleframework.xml.stream.Position getPosition()>();

        $r4 = $r10.<org.simpleframework.xml.core.Composite: org.simpleframework.xml.strategy.Type type>;

        $r3 = interfaceinvoke $r4.<org.simpleframework.xml.strategy.Type: java.lang.Class getType()>();

        $z0 = interfaceinvoke $r6.<org.simpleframework.xml.core.Converter: boolean validate(org.simpleframework.xml.stream.InputNode)>($r9);

        if $z0 != 0 goto label1;

        $r2 = new org.simpleframework.xml.core.PersistenceException;

        $r1 = newarray (java.lang.Object)[3];

        $r1[0] = $r8;

        $r1[1] = $r3;

        $r1[2] = $r5;

        specialinvoke $r2.<org.simpleframework.xml.core.PersistenceException: void <init>(java.lang.String,java.lang.Object[])>("Invalid value for %s in %s at %s", $r1);

        throw $r2;

     label1:
        $r0 = $r10.<org.simpleframework.xml.core.Composite: org.simpleframework.xml.core.Criteria criteria>;

        interfaceinvoke $r0.<org.simpleframework.xml.core.Criteria: void set(org.simpleframework.xml.core.Label,java.lang.Object)>($r8, null);

        return;
    }

    private void validate(org.simpleframework.xml.stream.InputNode, org.simpleframework.xml.core.LabelMap) throws java.lang.Exception
    {
        java.lang.Object[] $r0;
        org.simpleframework.xml.core.ValueRequiredException $r1;
        org.simpleframework.xml.core.Revision $r2;
        java.lang.Class $r3;
        org.simpleframework.xml.strategy.Type $r4;
        org.simpleframework.xml.core.Label $r5;
        java.lang.Object $r6;
        boolean $z0, $z1, $z2;
        java.util.Iterator $r7;
        org.simpleframework.xml.stream.Position $r8;
        org.simpleframework.xml.core.LabelMap $r9;
        org.simpleframework.xml.stream.InputNode $r10;
        org.simpleframework.xml.core.Composite $r11;

        $r11 := @this: org.simpleframework.xml.core.Composite;

        $r10 := @parameter0: org.simpleframework.xml.stream.InputNode;

        $r9 := @parameter1: org.simpleframework.xml.core.LabelMap;

        $r8 = interfaceinvoke $r10.<org.simpleframework.xml.stream.InputNode: org.simpleframework.xml.stream.Position getPosition()>();

        $r7 = virtualinvoke $r9.<org.simpleframework.xml.core.LabelMap: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r6 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (org.simpleframework.xml.core.Label) $r6;

        $r4 = $r11.<org.simpleframework.xml.core.Composite: org.simpleframework.xml.strategy.Type type>;

        $r3 = interfaceinvoke $r4.<org.simpleframework.xml.strategy.Type: java.lang.Class getType()>();

        $z1 = interfaceinvoke $r5.<org.simpleframework.xml.core.Label: boolean isRequired()>();

        if $z1 == 0 goto label1;

        $r2 = $r11.<org.simpleframework.xml.core.Composite: org.simpleframework.xml.core.Revision revision>;

        $z2 = virtualinvoke $r2.<org.simpleframework.xml.core.Revision: boolean isEqual()>();

        if $z2 == 0 goto label1;

        $r1 = new org.simpleframework.xml.core.ValueRequiredException;

        $r0 = newarray (java.lang.Object)[3];

        $r0[0] = $r5;

        $r0[1] = $r3;

        $r0[2] = $r8;

        specialinvoke $r1.<org.simpleframework.xml.core.ValueRequiredException: void <init>(java.lang.String,java.lang.Object[])>("Unable to satisfy %s for %s at %s", $r0);

        throw $r1;

     label2:
        return;
    }

    private void validate(org.simpleframework.xml.stream.InputNode, org.simpleframework.xml.core.LabelMap, java.lang.Object) throws java.lang.Exception
    {
        org.simpleframework.xml.core.Criteria $r0;
        java.lang.Object[] $r1;
        org.simpleframework.xml.core.ValueRequiredException $r2;
        org.simpleframework.xml.core.Revision $r3;
        org.simpleframework.xml.core.Label $r4;
        boolean $z0, $z1, $z2;
        java.util.Iterator $r5;
        org.simpleframework.xml.stream.Position $r6;
        java.lang.Class $r7;
        org.simpleframework.xml.strategy.Type $r8;
        org.simpleframework.xml.core.Context $r9, $r15;
        java.lang.Object $r10, $r14, $r16;
        org.simpleframework.xml.core.LabelMap $r11;
        org.simpleframework.xml.stream.InputNode $r12;
        org.simpleframework.xml.core.Composite $r13;

        $r13 := @this: org.simpleframework.xml.core.Composite;

        $r12 := @parameter0: org.simpleframework.xml.stream.InputNode;

        $r11 := @parameter1: org.simpleframework.xml.core.LabelMap;

        $r10 := @parameter2: java.lang.Object;

        $r9 = $r13.<org.simpleframework.xml.core.Composite: org.simpleframework.xml.core.Context context>;

        $r8 = $r13.<org.simpleframework.xml.core.Composite: org.simpleframework.xml.strategy.Type type>;

        $r7 = interfaceinvoke $r9.<org.simpleframework.xml.core.Context: java.lang.Class getType(org.simpleframework.xml.strategy.Type,java.lang.Object)>($r8, $r10);

        $r6 = interfaceinvoke $r12.<org.simpleframework.xml.stream.InputNode: org.simpleframework.xml.stream.Position getPosition()>();

        $r5 = virtualinvoke $r11.<org.simpleframework.xml.core.LabelMap: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r14 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (org.simpleframework.xml.core.Label) $r14;

        $z1 = interfaceinvoke $r4.<org.simpleframework.xml.core.Label: boolean isRequired()>();

        if $z1 == 0 goto label2;

        $r3 = $r13.<org.simpleframework.xml.core.Composite: org.simpleframework.xml.core.Revision revision>;

        $z2 = virtualinvoke $r3.<org.simpleframework.xml.core.Revision: boolean isEqual()>();

        if $z2 == 0 goto label2;

        $r2 = new org.simpleframework.xml.core.ValueRequiredException;

        $r1 = newarray (java.lang.Object)[3];

        $r1[0] = $r4;

        $r1[1] = $r7;

        $r1[2] = $r6;

        specialinvoke $r2.<org.simpleframework.xml.core.ValueRequiredException: void <init>(java.lang.String,java.lang.Object[])>("Unable to satisfy %s for %s at %s", $r1);

        throw $r2;

     label2:
        $r15 = $r13.<org.simpleframework.xml.core.Composite: org.simpleframework.xml.core.Context context>;

        $r16 = interfaceinvoke $r4.<org.simpleframework.xml.core.Label: java.lang.Object getEmpty(org.simpleframework.xml.core.Context)>($r15);

        if $r16 == null goto label1;

        $r0 = $r13.<org.simpleframework.xml.core.Composite: org.simpleframework.xml.core.Criteria criteria>;

        interfaceinvoke $r0.<org.simpleframework.xml.core.Criteria: void set(org.simpleframework.xml.core.Label,java.lang.Object)>($r4, $r16);

        goto label1;

     label3:
        return;
    }

    private boolean validate(org.simpleframework.xml.stream.InputNode, java.lang.Class) throws java.lang.Exception
    {
        boolean $z0;
        org.simpleframework.xml.core.Section $r0;
        org.simpleframework.xml.core.Schema $r1;
        org.simpleframework.xml.core.Context $r2;
        java.lang.Class $r3;
        org.simpleframework.xml.stream.InputNode $r4;
        org.simpleframework.xml.core.Composite $r5;

        $r5 := @this: org.simpleframework.xml.core.Composite;

        $r4 := @parameter0: org.simpleframework.xml.stream.InputNode;

        $r3 := @parameter1: java.lang.Class;

        $r2 = $r5.<org.simpleframework.xml.core.Composite: org.simpleframework.xml.core.Context context>;

        $r1 = interfaceinvoke $r2.<org.simpleframework.xml.core.Context: org.simpleframework.xml.core.Schema getSchema(java.lang.Class)>($r3);

        $r0 = interfaceinvoke $r1.<org.simpleframework.xml.core.Schema: org.simpleframework.xml.core.Section getSection()>();

        specialinvoke $r5.<org.simpleframework.xml.core.Composite: void validateText(org.simpleframework.xml.stream.InputNode,org.simpleframework.xml.core.Schema)>($r4, $r1);

        specialinvoke $r5.<org.simpleframework.xml.core.Composite: void validateSection(org.simpleframework.xml.stream.InputNode,org.simpleframework.xml.core.Section)>($r4, $r0);

        $z0 = interfaceinvoke $r4.<org.simpleframework.xml.stream.InputNode: boolean isElement()>();

        return $z0;
    }

    private void validateAttribute(org.simpleframework.xml.stream.InputNode, org.simpleframework.xml.core.Section, org.simpleframework.xml.core.LabelMap) throws java.lang.Exception
    {
        java.lang.Object[] $r0;
        org.simpleframework.xml.core.AttributeException $r1;
        org.simpleframework.xml.core.Revision $r2;
        boolean $z0, $z1;
        org.simpleframework.xml.core.Context $r3;
        java.lang.Class $r4;
        org.simpleframework.xml.core.Label $r5;
        java.lang.String $r6, $r13;
        org.simpleframework.xml.stream.Position $r7;
        org.simpleframework.xml.strategy.Type $r8;
        org.simpleframework.xml.core.LabelMap $r9;
        org.simpleframework.xml.core.Section $r10;
        org.simpleframework.xml.stream.InputNode $r11;
        org.simpleframework.xml.core.Composite $r12;

        $r12 := @this: org.simpleframework.xml.core.Composite;

        $r11 := @parameter0: org.simpleframework.xml.stream.InputNode;

        $r10 := @parameter1: org.simpleframework.xml.core.Section;

        $r9 := @parameter2: org.simpleframework.xml.core.LabelMap;

        $r7 = interfaceinvoke $r11.<org.simpleframework.xml.stream.InputNode: org.simpleframework.xml.stream.Position getPosition()>();

        $r6 = interfaceinvoke $r11.<org.simpleframework.xml.stream.InputNode: java.lang.String getName()>();

        $r13 = interfaceinvoke $r10.<org.simpleframework.xml.core.Section: java.lang.String getAttribute(java.lang.String)>($r6);

        $r5 = virtualinvoke $r9.<org.simpleframework.xml.core.LabelMap: org.simpleframework.xml.core.Label getLabel(java.lang.String)>($r13);

        if $r5 != null goto label1;

        $r8 = $r12.<org.simpleframework.xml.core.Composite: org.simpleframework.xml.strategy.Type type>;

        $r4 = interfaceinvoke $r8.<org.simpleframework.xml.strategy.Type: java.lang.Class getType()>();

        $r3 = $r12.<org.simpleframework.xml.core.Composite: org.simpleframework.xml.core.Context context>;

        $z0 = virtualinvoke $r9.<org.simpleframework.xml.core.LabelMap: boolean isStrict(org.simpleframework.xml.core.Context)>($r3);

        if $z0 == 0 goto label2;

        $r2 = $r12.<org.simpleframework.xml.core.Composite: org.simpleframework.xml.core.Revision revision>;

        $z1 = virtualinvoke $r2.<org.simpleframework.xml.core.Revision: boolean isEqual()>();

        if $z1 == 0 goto label3;

        $r1 = new org.simpleframework.xml.core.AttributeException;

        $r0 = newarray (java.lang.Object)[3];

        $r0[0] = $r13;

        $r0[1] = $r4;

        $r0[2] = $r7;

        specialinvoke $r1.<org.simpleframework.xml.core.AttributeException: void <init>(java.lang.String,java.lang.Object[])>("Attribute \'%s\' does not exist for %s at %s", $r0);

        throw $r1;

     label1:
        specialinvoke $r12.<org.simpleframework.xml.core.Composite: void validate(org.simpleframework.xml.stream.InputNode,org.simpleframework.xml.core.Label)>($r11, $r5);

        return;

     label2:
        return;

     label3:
        return;
    }

    private void validateAttributes(org.simpleframework.xml.stream.InputNode, org.simpleframework.xml.core.Section) throws java.lang.Exception
    {
        java.lang.String $r0;
        java.lang.Object $r1;
        boolean $z0;
        java.util.Iterator $r2;
        org.simpleframework.xml.core.LabelMap $r3;
        org.simpleframework.xml.stream.NodeMap $r4;
        org.simpleframework.xml.core.Section $r5;
        org.simpleframework.xml.stream.InputNode $r6, $r7;
        org.simpleframework.xml.core.Composite $r8;

        $r8 := @this: org.simpleframework.xml.core.Composite;

        $r6 := @parameter0: org.simpleframework.xml.stream.InputNode;

        $r5 := @parameter1: org.simpleframework.xml.core.Section;

        $r4 = interfaceinvoke $r6.<org.simpleframework.xml.stream.InputNode: org.simpleframework.xml.stream.NodeMap getAttributes()>();

        $r3 = interfaceinvoke $r5.<org.simpleframework.xml.core.Section: org.simpleframework.xml.core.LabelMap getAttributes()>();

        $r2 = interfaceinvoke $r4.<org.simpleframework.xml.stream.NodeMap: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r1 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $r0 = (java.lang.String) $r1;

        $r7 = interfaceinvoke $r6.<org.simpleframework.xml.stream.InputNode: org.simpleframework.xml.stream.InputNode getAttribute(java.lang.String)>($r0);

        if $r7 == null goto label1;

        specialinvoke $r8.<org.simpleframework.xml.core.Composite: void validateAttribute(org.simpleframework.xml.stream.InputNode,org.simpleframework.xml.core.Section,org.simpleframework.xml.core.LabelMap)>($r7, $r5, $r3);

        goto label1;

     label2:
        specialinvoke $r8.<org.simpleframework.xml.core.Composite: void validate(org.simpleframework.xml.stream.InputNode,org.simpleframework.xml.core.LabelMap)>($r6, $r3);

        return;
    }

    private void validateElement(org.simpleframework.xml.stream.InputNode, org.simpleframework.xml.core.Section, org.simpleframework.xml.core.LabelMap) throws java.lang.Exception
    {
        java.lang.Object[] $r0;
        org.simpleframework.xml.core.ElementException $r1;
        org.simpleframework.xml.core.Revision $r2;
        boolean $z0, $z1;
        org.simpleframework.xml.core.Context $r3;
        java.lang.Class $r4;
        org.simpleframework.xml.strategy.Type $r5;
        org.simpleframework.xml.stream.Position $r6;
        java.lang.String $r7, $r15;
        org.simpleframework.xml.core.Criteria $r8;
        org.simpleframework.xml.core.Label $r9, $r10;
        org.simpleframework.xml.core.LabelMap $r11;
        org.simpleframework.xml.core.Section $r12;
        org.simpleframework.xml.stream.InputNode $r13;
        org.simpleframework.xml.core.Composite $r14;

        $r14 := @this: org.simpleframework.xml.core.Composite;

        $r13 := @parameter0: org.simpleframework.xml.stream.InputNode;

        $r12 := @parameter1: org.simpleframework.xml.core.Section;

        $r11 := @parameter2: org.simpleframework.xml.core.LabelMap;

        $r7 = interfaceinvoke $r13.<org.simpleframework.xml.stream.InputNode: java.lang.String getName()>();

        $r15 = interfaceinvoke $r12.<org.simpleframework.xml.core.Section: java.lang.String getPath(java.lang.String)>($r7);

        $r10 = virtualinvoke $r11.<org.simpleframework.xml.core.LabelMap: org.simpleframework.xml.core.Label getLabel(java.lang.String)>($r15);

        $r9 = $r10;

        if $r10 != null goto label1;

        $r8 = $r14.<org.simpleframework.xml.core.Composite: org.simpleframework.xml.core.Criteria criteria>;

        $r9 = interfaceinvoke $r8.<org.simpleframework.xml.core.Criteria: org.simpleframework.xml.core.Variable resolve(java.lang.String)>($r15);

     label1:
        if $r9 != null goto label3;

        $r6 = interfaceinvoke $r13.<org.simpleframework.xml.stream.InputNode: org.simpleframework.xml.stream.Position getPosition()>();

        $r5 = $r14.<org.simpleframework.xml.core.Composite: org.simpleframework.xml.strategy.Type type>;

        $r4 = interfaceinvoke $r5.<org.simpleframework.xml.strategy.Type: java.lang.Class getType()>();

        $r3 = $r14.<org.simpleframework.xml.core.Composite: org.simpleframework.xml.core.Context context>;

        $z0 = virtualinvoke $r11.<org.simpleframework.xml.core.LabelMap: boolean isStrict(org.simpleframework.xml.core.Context)>($r3);

        if $z0 == 0 goto label2;

        $r2 = $r14.<org.simpleframework.xml.core.Composite: org.simpleframework.xml.core.Revision revision>;

        $z1 = virtualinvoke $r2.<org.simpleframework.xml.core.Revision: boolean isEqual()>();

        if $z1 == 0 goto label2;

        $r1 = new org.simpleframework.xml.core.ElementException;

        $r0 = newarray (java.lang.Object)[3];

        $r0[0] = $r15;

        $r0[1] = $r4;

        $r0[2] = $r6;

        specialinvoke $r1.<org.simpleframework.xml.core.ElementException: void <init>(java.lang.String,java.lang.Object[])>("Element \'%s\' does not exist for %s at %s", $r0);

        throw $r1;

     label2:
        interfaceinvoke $r13.<org.simpleframework.xml.stream.InputNode: void skip()>();

        return;

     label3:
        specialinvoke $r14.<org.simpleframework.xml.core.Composite: void validateUnion(org.simpleframework.xml.stream.InputNode,org.simpleframework.xml.core.LabelMap,org.simpleframework.xml.core.Label)>($r13, $r11, $r9);

        return;
    }

    private void validateElements(org.simpleframework.xml.stream.InputNode, org.simpleframework.xml.core.Section) throws java.lang.Exception
    {
        java.lang.String $r0;
        org.simpleframework.xml.core.LabelMap $r1;
        org.simpleframework.xml.core.Section $r2, $r3;
        org.simpleframework.xml.stream.InputNode $r4, $r5;
        org.simpleframework.xml.core.Composite $r6;

        $r6 := @this: org.simpleframework.xml.core.Composite;

        $r4 := @parameter0: org.simpleframework.xml.stream.InputNode;

        $r2 := @parameter1: org.simpleframework.xml.core.Section;

        $r1 = interfaceinvoke $r2.<org.simpleframework.xml.core.Section: org.simpleframework.xml.core.LabelMap getElements()>();

        $r5 = interfaceinvoke $r4.<org.simpleframework.xml.stream.InputNode: org.simpleframework.xml.stream.InputNode getNext()>();

     label1:
        if $r5 == null goto label4;

        $r0 = interfaceinvoke $r5.<org.simpleframework.xml.stream.InputNode: java.lang.String getName()>();

        $r3 = interfaceinvoke $r2.<org.simpleframework.xml.core.Section: org.simpleframework.xml.core.Section getSection(java.lang.String)>($r0);

        if $r3 == null goto label3;

        specialinvoke $r6.<org.simpleframework.xml.core.Composite: void validateSection(org.simpleframework.xml.stream.InputNode,org.simpleframework.xml.core.Section)>($r5, $r3);

     label2:
        $r5 = interfaceinvoke $r4.<org.simpleframework.xml.stream.InputNode: org.simpleframework.xml.stream.InputNode getNext()>();

        goto label1;

     label3:
        specialinvoke $r6.<org.simpleframework.xml.core.Composite: void validateElement(org.simpleframework.xml.stream.InputNode,org.simpleframework.xml.core.Section,org.simpleframework.xml.core.LabelMap)>($r5, $r2, $r1);

        goto label2;

     label4:
        specialinvoke $r6.<org.simpleframework.xml.core.Composite: void validate(org.simpleframework.xml.stream.InputNode,org.simpleframework.xml.core.LabelMap)>($r4, $r1);

        return;
    }

    private void validateSection(org.simpleframework.xml.stream.InputNode, org.simpleframework.xml.core.Section) throws java.lang.Exception
    {
        org.simpleframework.xml.core.Section $r0;
        org.simpleframework.xml.stream.InputNode $r1;
        org.simpleframework.xml.core.Composite $r2;

        $r2 := @this: org.simpleframework.xml.core.Composite;

        $r1 := @parameter0: org.simpleframework.xml.stream.InputNode;

        $r0 := @parameter1: org.simpleframework.xml.core.Section;

        specialinvoke $r2.<org.simpleframework.xml.core.Composite: void validateAttributes(org.simpleframework.xml.stream.InputNode,org.simpleframework.xml.core.Section)>($r1, $r0);

        specialinvoke $r2.<org.simpleframework.xml.core.Composite: void validateElements(org.simpleframework.xml.stream.InputNode,org.simpleframework.xml.core.Section)>($r1, $r0);

        return;
    }

    private void validateText(org.simpleframework.xml.stream.InputNode, org.simpleframework.xml.core.Schema) throws java.lang.Exception
    {
        org.simpleframework.xml.core.Label $r0;
        org.simpleframework.xml.core.Schema $r1;
        org.simpleframework.xml.stream.InputNode $r2;
        org.simpleframework.xml.core.Composite $r3;

        $r3 := @this: org.simpleframework.xml.core.Composite;

        $r2 := @parameter0: org.simpleframework.xml.stream.InputNode;

        $r1 := @parameter1: org.simpleframework.xml.core.Schema;

        $r0 = interfaceinvoke $r1.<org.simpleframework.xml.core.Schema: org.simpleframework.xml.core.Label getText()>();

        if $r0 == null goto label1;

        specialinvoke $r3.<org.simpleframework.xml.core.Composite: void validate(org.simpleframework.xml.stream.InputNode,org.simpleframework.xml.core.Label)>($r2, $r0);

        return;

     label1:
        return;
    }

    private void validateUnion(org.simpleframework.xml.stream.InputNode, org.simpleframework.xml.core.LabelMap, org.simpleframework.xml.core.Label) throws java.lang.Exception
    {
        org.simpleframework.xml.core.Criteria $r0;
        java.lang.String $r1;
        java.lang.Object $r2;
        boolean $z0, $z1;
        java.util.Iterator $r3;
        java.util.Collection $r4;
        org.simpleframework.xml.core.Label $r5;
        org.simpleframework.xml.core.LabelMap $r6;
        org.simpleframework.xml.stream.InputNode $r7;
        org.simpleframework.xml.core.Composite $r8;

        $r8 := @this: org.simpleframework.xml.core.Composite;

        $r7 := @parameter0: org.simpleframework.xml.stream.InputNode;

        $r6 := @parameter1: org.simpleframework.xml.core.LabelMap;

        $r5 := @parameter2: org.simpleframework.xml.core.Label;

        $r4 = interfaceinvoke $r5.<org.simpleframework.xml.core.Label: java.util.Collection getPaths()>();

        $r3 = interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $r1 = (java.lang.String) $r2;

        virtualinvoke $r6.<org.simpleframework.xml.core.LabelMap: org.simpleframework.xml.core.Label getLabel(java.lang.String)>($r1);

        goto label1;

     label2:
        $z1 = interfaceinvoke $r5.<org.simpleframework.xml.core.Label: boolean isInline()>();

        if $z1 == 0 goto label3;

        $r0 = $r8.<org.simpleframework.xml.core.Composite: org.simpleframework.xml.core.Criteria criteria>;

        interfaceinvoke $r0.<org.simpleframework.xml.core.Criteria: void set(org.simpleframework.xml.core.Label,java.lang.Object)>($r5, null);

     label3:
        specialinvoke $r8.<org.simpleframework.xml.core.Composite: void validate(org.simpleframework.xml.stream.InputNode,org.simpleframework.xml.core.Label)>($r7, $r5);

        return;
    }

    private void write(org.simpleframework.xml.stream.OutputNode, java.lang.Object, org.simpleframework.xml.core.Schema) throws java.lang.Exception
    {
        org.simpleframework.xml.core.Section $r0;
        org.simpleframework.xml.core.Schema $r1;
        java.lang.Object $r2;
        org.simpleframework.xml.stream.OutputNode $r3;
        org.simpleframework.xml.core.Composite $r4;

        $r4 := @this: org.simpleframework.xml.core.Composite;

        $r3 := @parameter0: org.simpleframework.xml.stream.OutputNode;

        $r2 := @parameter1: java.lang.Object;

        $r1 := @parameter2: org.simpleframework.xml.core.Schema;

        $r0 = interfaceinvoke $r1.<org.simpleframework.xml.core.Schema: org.simpleframework.xml.core.Section getSection()>();

        specialinvoke $r4.<org.simpleframework.xml.core.Composite: void writeVersion(org.simpleframework.xml.stream.OutputNode,java.lang.Object,org.simpleframework.xml.core.Schema)>($r3, $r2, $r1);

        specialinvoke $r4.<org.simpleframework.xml.core.Composite: void writeSection(org.simpleframework.xml.stream.OutputNode,java.lang.Object,org.simpleframework.xml.core.Section)>($r3, $r2, $r0);

        return;
    }

    private void writeAttribute(org.simpleframework.xml.stream.OutputNode, java.lang.Object, org.simpleframework.xml.core.Label) throws java.lang.Exception
    {
        java.lang.String $r0, $r1;
        org.simpleframework.xml.core.Decorator $r2;
        org.simpleframework.xml.core.ObjectFactory $r3;
        org.simpleframework.xml.core.Label $r4;
        java.lang.Object $r5;
        org.simpleframework.xml.stream.OutputNode $r6, $r8;
        org.simpleframework.xml.core.Composite $r7;

        $r7 := @this: org.simpleframework.xml.core.Composite;

        $r6 := @parameter0: org.simpleframework.xml.stream.OutputNode;

        $r5 := @parameter1: java.lang.Object;

        $r4 := @parameter2: org.simpleframework.xml.core.Label;

        if $r5 == null goto label1;

        $r2 = interfaceinvoke $r4.<org.simpleframework.xml.core.Label: org.simpleframework.xml.core.Decorator getDecorator()>();

        $r0 = interfaceinvoke $r4.<org.simpleframework.xml.core.Label: java.lang.String getName()>();

        $r3 = $r7.<org.simpleframework.xml.core.Composite: org.simpleframework.xml.core.ObjectFactory factory>;

        $r1 = virtualinvoke $r3.<org.simpleframework.xml.core.ObjectFactory: java.lang.String getText(java.lang.Object)>($r5);

        $r8 = interfaceinvoke $r6.<org.simpleframework.xml.stream.OutputNode: org.simpleframework.xml.stream.OutputNode setAttribute(java.lang.String,java.lang.String)>($r0, $r1);

        interfaceinvoke $r2.<org.simpleframework.xml.core.Decorator: void decorate(org.simpleframework.xml.stream.OutputNode)>($r8);

        return;

     label1:
        return;
    }

    private void writeAttributes(org.simpleframework.xml.stream.OutputNode, java.lang.Object, org.simpleframework.xml.core.Section) throws java.lang.Exception
    {
        java.lang.Object[] $r0;
        org.simpleframework.xml.core.AttributeException $r1;
        java.lang.Class $r2;
        org.simpleframework.xml.core.Context $r3, $r16;
        org.simpleframework.xml.core.Contact $r4;
        org.simpleframework.xml.core.Label $r5;
        boolean $z0, $z1;
        java.util.Iterator $r6;
        org.simpleframework.xml.core.LabelMap $r7;
        org.simpleframework.xml.strategy.Type $r8;
        org.simpleframework.xml.core.Section $r9;
        java.lang.Object $r10, $r11, $r12, $r15;
        org.simpleframework.xml.stream.OutputNode $r13;
        org.simpleframework.xml.core.Composite $r14;

        $r14 := @this: org.simpleframework.xml.core.Composite;

        $r13 := @parameter0: org.simpleframework.xml.stream.OutputNode;

        $r10 := @parameter1: java.lang.Object;

        $r9 := @parameter2: org.simpleframework.xml.core.Section;

        $r7 = interfaceinvoke $r9.<org.simpleframework.xml.core.Section: org.simpleframework.xml.core.LabelMap getAttributes()>();

        $r6 = virtualinvoke $r7.<org.simpleframework.xml.core.LabelMap: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r6.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r11 = interfaceinvoke $r6.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (org.simpleframework.xml.core.Label) $r11;

        $r4 = interfaceinvoke $r5.<org.simpleframework.xml.core.Label: org.simpleframework.xml.core.Contact getContact()>();

        $r12 = interfaceinvoke $r4.<org.simpleframework.xml.core.Contact: java.lang.Object get(java.lang.Object)>($r10);

        $r15 = $r12;

        $r3 = $r14.<org.simpleframework.xml.core.Composite: org.simpleframework.xml.core.Context context>;

        $r8 = $r14.<org.simpleframework.xml.core.Composite: org.simpleframework.xml.strategy.Type type>;

        $r2 = interfaceinvoke $r3.<org.simpleframework.xml.core.Context: java.lang.Class getType(org.simpleframework.xml.strategy.Type,java.lang.Object)>($r8, $r10);

        if $r12 != null goto label2;

        $r16 = $r14.<org.simpleframework.xml.core.Composite: org.simpleframework.xml.core.Context context>;

        $r15 = interfaceinvoke $r5.<org.simpleframework.xml.core.Label: java.lang.Object getEmpty(org.simpleframework.xml.core.Context)>($r16);

     label2:
        if $r15 != null goto label3;

        $z1 = interfaceinvoke $r5.<org.simpleframework.xml.core.Label: boolean isRequired()>();

        if $z1 == 0 goto label3;

        $r1 = new org.simpleframework.xml.core.AttributeException;

        $r0 = newarray (java.lang.Object)[2];

        $r0[0] = $r5;

        $r0[1] = $r2;

        specialinvoke $r1.<org.simpleframework.xml.core.AttributeException: void <init>(java.lang.String,java.lang.Object[])>("Value for %s is null in %s", $r0);

        throw $r1;

     label3:
        specialinvoke $r14.<org.simpleframework.xml.core.Composite: void writeAttribute(org.simpleframework.xml.stream.OutputNode,java.lang.Object,org.simpleframework.xml.core.Label)>($r13, $r15, $r5);

        goto label1;

     label4:
        return;
    }

    private void writeElement(org.simpleframework.xml.stream.OutputNode, java.lang.Object, org.simpleframework.xml.core.Converter) throws java.lang.Exception
    {
        org.simpleframework.xml.core.Converter $r0;
        java.lang.Object $r1;
        org.simpleframework.xml.stream.OutputNode $r2;
        org.simpleframework.xml.core.Composite $r3;

        $r3 := @this: org.simpleframework.xml.core.Composite;

        $r2 := @parameter0: org.simpleframework.xml.stream.OutputNode;

        $r1 := @parameter1: java.lang.Object;

        $r0 := @parameter2: org.simpleframework.xml.core.Converter;

        interfaceinvoke $r0.<org.simpleframework.xml.core.Converter: void write(org.simpleframework.xml.stream.OutputNode,java.lang.Object)>($r2, $r1);

        return;
    }

    private void writeElement(org.simpleframework.xml.stream.OutputNode, java.lang.Object, org.simpleframework.xml.core.Label) throws java.lang.Exception
    {
        org.simpleframework.xml.core.Converter $r0;
        org.simpleframework.xml.core.Context $r1;
        boolean $z0, $z1, $z2, $z3;
        org.simpleframework.xml.strategy.Type $r2;
        java.lang.String $r3;
        java.lang.Class $r4;
        org.simpleframework.xml.core.Label $r5, $r6;
        java.lang.Object $r7;
        org.simpleframework.xml.stream.OutputNode $r8, $r10;
        org.simpleframework.xml.core.Composite $r9;

        $r9 := @this: org.simpleframework.xml.core.Composite;

        $r8 := @parameter0: org.simpleframework.xml.stream.OutputNode;

        $r7 := @parameter1: java.lang.Object;

        $r5 := @parameter2: org.simpleframework.xml.core.Label;

        if $r7 == null goto label3;

        $r4 = virtualinvoke $r7.<java.lang.Object: java.lang.Class getClass()>();

        $r6 = interfaceinvoke $r5.<org.simpleframework.xml.core.Label: org.simpleframework.xml.core.Label getLabel(java.lang.Class)>($r4);

        $r3 = interfaceinvoke $r6.<org.simpleframework.xml.core.Label: java.lang.String getName()>();

        $r2 = interfaceinvoke $r5.<org.simpleframework.xml.core.Label: org.simpleframework.xml.strategy.Type getType(java.lang.Class)>($r4);

        $r10 = interfaceinvoke $r8.<org.simpleframework.xml.stream.OutputNode: org.simpleframework.xml.stream.OutputNode getChild(java.lang.String)>($r3);

        $z0 = interfaceinvoke $r6.<org.simpleframework.xml.core.Label: boolean isInline()>();

        if $z0 != 0 goto label1;

        specialinvoke $r9.<org.simpleframework.xml.core.Composite: void writeNamespaces(org.simpleframework.xml.stream.OutputNode,org.simpleframework.xml.strategy.Type,org.simpleframework.xml.core.Label)>($r10, $r2, $r6);

     label1:
        $z1 = interfaceinvoke $r6.<org.simpleframework.xml.core.Label: boolean isInline()>();

        if $z1 != 0 goto label2;

        $z2 = specialinvoke $r9.<org.simpleframework.xml.core.Composite: boolean isOverridden(org.simpleframework.xml.stream.OutputNode,java.lang.Object,org.simpleframework.xml.strategy.Type)>($r10, $r7, $r2);

        if $z2 != 0 goto label4;

     label2:
        $r1 = $r9.<org.simpleframework.xml.core.Composite: org.simpleframework.xml.core.Context context>;

        $r0 = interfaceinvoke $r6.<org.simpleframework.xml.core.Label: org.simpleframework.xml.core.Converter getConverter(org.simpleframework.xml.core.Context)>($r1);

        $z3 = interfaceinvoke $r6.<org.simpleframework.xml.core.Label: boolean isData()>();

        interfaceinvoke $r10.<org.simpleframework.xml.stream.OutputNode: void setData(boolean)>($z3);

        specialinvoke $r9.<org.simpleframework.xml.core.Composite: void writeElement(org.simpleframework.xml.stream.OutputNode,java.lang.Object,org.simpleframework.xml.core.Converter)>($r10, $r7, $r0);

        return;

     label3:
        return;

     label4:
        return;
    }

    private void writeElements(org.simpleframework.xml.stream.OutputNode, java.lang.Object, org.simpleframework.xml.core.Section) throws java.lang.Exception
    {
        java.lang.Object[] $r0;
        org.simpleframework.xml.core.ElementException $r1;
        org.simpleframework.xml.core.Variable $r2;
        org.simpleframework.xml.core.Criteria $r3;
        java.lang.Class $r4;
        org.simpleframework.xml.core.Context $r5;
        org.simpleframework.xml.core.Label $r6;
        java.lang.String $r7, $r8;
        boolean $z0;
        java.util.Iterator $r9;
        org.simpleframework.xml.strategy.Type $r10;
        org.simpleframework.xml.core.Section $r11, $r12;
        java.lang.Object $r13, $r14;
        org.simpleframework.xml.stream.OutputNode $r15, $r16;
        org.simpleframework.xml.core.Composite $r17;

        $r17 := @this: org.simpleframework.xml.core.Composite;

        $r15 := @parameter0: org.simpleframework.xml.stream.OutputNode;

        $r13 := @parameter1: java.lang.Object;

        $r11 := @parameter2: org.simpleframework.xml.core.Section;

        $r9 = interfaceinvoke $r11.<org.simpleframework.xml.core.Section: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r9.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r14 = interfaceinvoke $r9.<java.util.Iterator: java.lang.Object next()>();

        $r7 = (java.lang.String) $r14;

        $r12 = interfaceinvoke $r11.<org.simpleframework.xml.core.Section: org.simpleframework.xml.core.Section getSection(java.lang.String)>($r7);

        if $r12 == null goto label2;

        $r16 = interfaceinvoke $r15.<org.simpleframework.xml.stream.OutputNode: org.simpleframework.xml.stream.OutputNode getChild(java.lang.String)>($r7);

        specialinvoke $r17.<org.simpleframework.xml.core.Composite: void writeSection(org.simpleframework.xml.stream.OutputNode,java.lang.Object,org.simpleframework.xml.core.Section)>($r16, $r13, $r12);

        goto label1;

     label2:
        $r8 = interfaceinvoke $r11.<org.simpleframework.xml.core.Section: java.lang.String getPath(java.lang.String)>($r7);

        $r6 = interfaceinvoke $r11.<org.simpleframework.xml.core.Section: org.simpleframework.xml.core.Label getElement(java.lang.String)>($r8);

        $r5 = $r17.<org.simpleframework.xml.core.Composite: org.simpleframework.xml.core.Context context>;

        $r10 = $r17.<org.simpleframework.xml.core.Composite: org.simpleframework.xml.strategy.Type type>;

        $r4 = interfaceinvoke $r5.<org.simpleframework.xml.core.Context: java.lang.Class getType(org.simpleframework.xml.strategy.Type,java.lang.Object)>($r10, $r13);

        $r3 = $r17.<org.simpleframework.xml.core.Composite: org.simpleframework.xml.core.Criteria criteria>;

        $r2 = interfaceinvoke $r3.<org.simpleframework.xml.core.Criteria: org.simpleframework.xml.core.Variable get(org.simpleframework.xml.core.Label)>($r6);

        if $r2 != null goto label1;

        if $r6 != null goto label3;

        $r1 = new org.simpleframework.xml.core.ElementException;

        $r0 = newarray (java.lang.Object)[2];

        $r0[0] = $r7;

        $r0[1] = $r4;

        specialinvoke $r1.<org.simpleframework.xml.core.ElementException: void <init>(java.lang.String,java.lang.Object[])>("Element \'%s\' not defined in %s", $r0);

        throw $r1;

     label3:
        specialinvoke $r17.<org.simpleframework.xml.core.Composite: void writeUnion(org.simpleframework.xml.stream.OutputNode,java.lang.Object,org.simpleframework.xml.core.Section,org.simpleframework.xml.core.Label)>($r15, $r13, $r11, $r6);

        goto label1;

     label4:
        return;
    }

    private void writeNamespaces(org.simpleframework.xml.stream.OutputNode, org.simpleframework.xml.strategy.Type, org.simpleframework.xml.core.Label) throws java.lang.Exception
    {
        org.simpleframework.xml.core.Decorator $r0, $r1;
        java.lang.Class $r2;
        org.simpleframework.xml.core.Context $r3;
        org.simpleframework.xml.core.Label $r4;
        org.simpleframework.xml.strategy.Type $r5;
        org.simpleframework.xml.stream.OutputNode $r6;
        org.simpleframework.xml.core.Composite $r7;

        $r7 := @this: org.simpleframework.xml.core.Composite;

        $r6 := @parameter0: org.simpleframework.xml.stream.OutputNode;

        $r5 := @parameter1: org.simpleframework.xml.strategy.Type;

        $r4 := @parameter2: org.simpleframework.xml.core.Label;

        $r2 = interfaceinvoke $r5.<org.simpleframework.xml.strategy.Type: java.lang.Class getType()>();

        $r3 = $r7.<org.simpleframework.xml.core.Composite: org.simpleframework.xml.core.Context context>;

        $r0 = interfaceinvoke $r3.<org.simpleframework.xml.core.Context: org.simpleframework.xml.core.Decorator getDecorator(java.lang.Class)>($r2);

        $r1 = interfaceinvoke $r4.<org.simpleframework.xml.core.Label: org.simpleframework.xml.core.Decorator getDecorator()>();

        interfaceinvoke $r1.<org.simpleframework.xml.core.Decorator: void decorate(org.simpleframework.xml.stream.OutputNode,org.simpleframework.xml.core.Decorator)>($r6, $r0);

        return;
    }

    private java.lang.Object writeReplace(java.lang.Object) throws java.lang.Exception
    {
        org.simpleframework.xml.core.Caller $r0;
        java.lang.Class $r1;
        org.simpleframework.xml.core.Context $r2;
        java.lang.Object $r3, $r5;
        org.simpleframework.xml.core.Composite $r4;

        $r4 := @this: org.simpleframework.xml.core.Composite;

        $r3 := @parameter0: java.lang.Object;

        if $r3 == null goto label1;

        $r1 = virtualinvoke $r3.<java.lang.Object: java.lang.Class getClass()>();

        $r2 = $r4.<org.simpleframework.xml.core.Composite: org.simpleframework.xml.core.Context context>;

        $r0 = interfaceinvoke $r2.<org.simpleframework.xml.core.Context: org.simpleframework.xml.core.Caller getCaller(java.lang.Class)>($r1);

        $r5 = virtualinvoke $r0.<org.simpleframework.xml.core.Caller: java.lang.Object replace(java.lang.Object)>($r3);

        return $r5;

     label1:
        return $r3;
    }

    private void writeSection(org.simpleframework.xml.stream.OutputNode, java.lang.Object, org.simpleframework.xml.core.Section) throws java.lang.Exception
    {
        java.lang.Object[] $r0;
        java.lang.String $r1, $r2;
        org.simpleframework.xml.stream.NamespaceMap $r3;
        org.simpleframework.xml.strategy.Type $r4;
        org.simpleframework.xml.core.ElementException $r5;
        org.simpleframework.xml.core.Section $r6;
        java.lang.Object $r7;
        org.simpleframework.xml.stream.OutputNode $r8;
        org.simpleframework.xml.core.Composite $r9;

        $r9 := @this: org.simpleframework.xml.core.Composite;

        $r8 := @parameter0: org.simpleframework.xml.stream.OutputNode;

        $r7 := @parameter1: java.lang.Object;

        $r6 := @parameter2: org.simpleframework.xml.core.Section;

        $r3 = interfaceinvoke $r8.<org.simpleframework.xml.stream.OutputNode: org.simpleframework.xml.stream.NamespaceMap getNamespaces()>();

        $r1 = interfaceinvoke $r6.<org.simpleframework.xml.core.Section: java.lang.String getPrefix()>();

        if $r1 == null goto label2;

        $r2 = interfaceinvoke $r3.<org.simpleframework.xml.stream.NamespaceMap: java.lang.String getReference(java.lang.String)>($r1);

        if $r2 != null goto label1;

        $r5 = new org.simpleframework.xml.core.ElementException;

        $r0 = newarray (java.lang.Object)[2];

        $r0[0] = $r1;

        $r4 = $r9.<org.simpleframework.xml.core.Composite: org.simpleframework.xml.strategy.Type type>;

        $r0[1] = $r4;

        specialinvoke $r5.<org.simpleframework.xml.core.ElementException: void <init>(java.lang.String,java.lang.Object[])>("Namespace prefix \'%s\' in %s is not in scope", $r0);

        throw $r5;

     label1:
        interfaceinvoke $r8.<org.simpleframework.xml.stream.OutputNode: void setReference(java.lang.String)>($r2);

     label2:
        specialinvoke $r9.<org.simpleframework.xml.core.Composite: void writeAttributes(org.simpleframework.xml.stream.OutputNode,java.lang.Object,org.simpleframework.xml.core.Section)>($r8, $r7, $r6);

        specialinvoke $r9.<org.simpleframework.xml.core.Composite: void writeElements(org.simpleframework.xml.stream.OutputNode,java.lang.Object,org.simpleframework.xml.core.Section)>($r8, $r7, $r6);

        specialinvoke $r9.<org.simpleframework.xml.core.Composite: void writeText(org.simpleframework.xml.stream.OutputNode,java.lang.Object,org.simpleframework.xml.core.Section)>($r8, $r7, $r6);

        return;
    }

    private void writeText(org.simpleframework.xml.stream.OutputNode, java.lang.Object, org.simpleframework.xml.core.Label) throws java.lang.Exception
    {
        boolean $z0;
        java.lang.String $r0;
        org.simpleframework.xml.core.ObjectFactory $r1;
        org.simpleframework.xml.core.Label $r2;
        java.lang.Object $r3;
        org.simpleframework.xml.stream.OutputNode $r4;
        org.simpleframework.xml.core.Composite $r5;

        $r5 := @this: org.simpleframework.xml.core.Composite;

        $r4 := @parameter0: org.simpleframework.xml.stream.OutputNode;

        $r3 := @parameter1: java.lang.Object;

        $r2 := @parameter2: org.simpleframework.xml.core.Label;

        if $r3 == null goto label1;

        $r1 = $r5.<org.simpleframework.xml.core.Composite: org.simpleframework.xml.core.ObjectFactory factory>;

        $r0 = virtualinvoke $r1.<org.simpleframework.xml.core.ObjectFactory: java.lang.String getText(java.lang.Object)>($r3);

        $z0 = interfaceinvoke $r2.<org.simpleframework.xml.core.Label: boolean isData()>();

        interfaceinvoke $r4.<org.simpleframework.xml.stream.OutputNode: void setData(boolean)>($z0);

        interfaceinvoke $r4.<org.simpleframework.xml.stream.OutputNode: void setValue(java.lang.String)>($r0);

        return;

     label1:
        return;
    }

    private void writeText(org.simpleframework.xml.stream.OutputNode, java.lang.Object, org.simpleframework.xml.core.Section) throws java.lang.Exception
    {
        java.lang.Object[] $r0;
        org.simpleframework.xml.core.TextException $r1;
        boolean $z0;
        java.lang.Class $r2;
        org.simpleframework.xml.core.Contact $r3;
        org.simpleframework.xml.core.Label $r4;
        org.simpleframework.xml.strategy.Type $r5;
        org.simpleframework.xml.core.Context $r6, $r13;
        org.simpleframework.xml.core.Section $r7;
        java.lang.Object $r8, $r9, $r10;
        org.simpleframework.xml.stream.OutputNode $r11;
        org.simpleframework.xml.core.Composite $r12;

        $r12 := @this: org.simpleframework.xml.core.Composite;

        $r11 := @parameter0: org.simpleframework.xml.stream.OutputNode;

        $r8 := @parameter1: java.lang.Object;

        $r7 := @parameter2: org.simpleframework.xml.core.Section;

        $r4 = interfaceinvoke $r7.<org.simpleframework.xml.core.Section: org.simpleframework.xml.core.Label getText()>();

        if $r4 == null goto label3;

        $r3 = interfaceinvoke $r4.<org.simpleframework.xml.core.Label: org.simpleframework.xml.core.Contact getContact()>();

        $r10 = interfaceinvoke $r3.<org.simpleframework.xml.core.Contact: java.lang.Object get(java.lang.Object)>($r8);

        $r9 = $r10;

        $r6 = $r12.<org.simpleframework.xml.core.Composite: org.simpleframework.xml.core.Context context>;

        $r5 = $r12.<org.simpleframework.xml.core.Composite: org.simpleframework.xml.strategy.Type type>;

        $r2 = interfaceinvoke $r6.<org.simpleframework.xml.core.Context: java.lang.Class getType(org.simpleframework.xml.strategy.Type,java.lang.Object)>($r5, $r8);

        if $r10 != null goto label1;

        $r13 = $r12.<org.simpleframework.xml.core.Composite: org.simpleframework.xml.core.Context context>;

        $r9 = interfaceinvoke $r4.<org.simpleframework.xml.core.Label: java.lang.Object getEmpty(org.simpleframework.xml.core.Context)>($r13);

     label1:
        if $r9 != null goto label2;

        $z0 = interfaceinvoke $r4.<org.simpleframework.xml.core.Label: boolean isRequired()>();

        if $z0 == 0 goto label2;

        $r1 = new org.simpleframework.xml.core.TextException;

        $r0 = newarray (java.lang.Object)[2];

        $r0[0] = $r4;

        $r0[1] = $r2;

        specialinvoke $r1.<org.simpleframework.xml.core.TextException: void <init>(java.lang.String,java.lang.Object[])>("Value for %s is null in %s", $r0);

        throw $r1;

     label2:
        specialinvoke $r12.<org.simpleframework.xml.core.Composite: void writeText(org.simpleframework.xml.stream.OutputNode,java.lang.Object,org.simpleframework.xml.core.Label)>($r11, $r9, $r4);

        return;

     label3:
        return;
    }

    private void writeUnion(org.simpleframework.xml.stream.OutputNode, java.lang.Object, org.simpleframework.xml.core.Section, org.simpleframework.xml.core.Label) throws java.lang.Exception
    {
        org.simpleframework.xml.core.Criteria $r0;
        java.lang.Object[] $r1;
        org.simpleframework.xml.core.ElementException $r2;
        boolean $z0;
        java.lang.Class $r3;
        org.simpleframework.xml.core.Contact $r4;
        org.simpleframework.xml.strategy.Type $r5;
        org.simpleframework.xml.core.Context $r6;
        org.simpleframework.xml.core.Label $r7;
        org.simpleframework.xml.core.Section $r8;
        java.lang.Object $r9, $r10, $r13;
        org.simpleframework.xml.stream.OutputNode $r11;
        org.simpleframework.xml.core.Composite $r12;

        $r12 := @this: org.simpleframework.xml.core.Composite;

        $r11 := @parameter0: org.simpleframework.xml.stream.OutputNode;

        $r9 := @parameter1: java.lang.Object;

        $r8 := @parameter2: org.simpleframework.xml.core.Section;

        $r7 := @parameter3: org.simpleframework.xml.core.Label;

        $r4 = interfaceinvoke $r7.<org.simpleframework.xml.core.Label: org.simpleframework.xml.core.Contact getContact()>();

        $r10 = interfaceinvoke $r4.<org.simpleframework.xml.core.Contact: java.lang.Object get(java.lang.Object)>($r9);

        $r6 = $r12.<org.simpleframework.xml.core.Composite: org.simpleframework.xml.core.Context context>;

        $r5 = $r12.<org.simpleframework.xml.core.Composite: org.simpleframework.xml.strategy.Type type>;

        $r3 = interfaceinvoke $r6.<org.simpleframework.xml.core.Context: java.lang.Class getType(org.simpleframework.xml.strategy.Type,java.lang.Object)>($r5, $r9);

        if $r10 != null goto label1;

        $z0 = interfaceinvoke $r7.<org.simpleframework.xml.core.Label: boolean isRequired()>();

        if $z0 == 0 goto label1;

        $r2 = new org.simpleframework.xml.core.ElementException;

        $r1 = newarray (java.lang.Object)[2];

        $r1[0] = $r7;

        $r1[1] = $r3;

        specialinvoke $r2.<org.simpleframework.xml.core.ElementException: void <init>(java.lang.String,java.lang.Object[])>("Value for %s is null in %s", $r1);

        throw $r2;

     label1:
        $r13 = specialinvoke $r12.<org.simpleframework.xml.core.Composite: java.lang.Object writeReplace(java.lang.Object)>($r10);

        if $r13 == null goto label2;

        specialinvoke $r12.<org.simpleframework.xml.core.Composite: void writeElement(org.simpleframework.xml.stream.OutputNode,java.lang.Object,org.simpleframework.xml.core.Label)>($r11, $r13, $r7);

     label2:
        $r0 = $r12.<org.simpleframework.xml.core.Composite: org.simpleframework.xml.core.Criteria criteria>;

        interfaceinvoke $r0.<org.simpleframework.xml.core.Criteria: void set(org.simpleframework.xml.core.Label,java.lang.Object)>($r7, $r13);

        return;
    }

    private void writeVersion(org.simpleframework.xml.stream.OutputNode, java.lang.Object, org.simpleframework.xml.core.Schema) throws java.lang.Exception
    {
        boolean $z0, $z1;
        java.lang.Double $r0, $r1;
        double $d0, $d1;
        org.simpleframework.xml.core.Label $r2;
        org.simpleframework.xml.Version $r3;
        org.simpleframework.xml.core.Revision $r4, $r9;
        org.simpleframework.xml.core.Schema $r5;
        java.lang.Object $r6;
        org.simpleframework.xml.stream.OutputNode $r7;
        org.simpleframework.xml.core.Composite $r8;

        $r8 := @this: org.simpleframework.xml.core.Composite;

        $r7 := @parameter0: org.simpleframework.xml.stream.OutputNode;

        $r6 := @parameter1: java.lang.Object;

        $r5 := @parameter2: org.simpleframework.xml.core.Schema;

        $r3 = interfaceinvoke $r5.<org.simpleframework.xml.core.Schema: org.simpleframework.xml.Version getRevision()>();

        $r2 = interfaceinvoke $r5.<org.simpleframework.xml.core.Schema: org.simpleframework.xml.core.Label getVersion()>();

        if $r3 == null goto label2;

        $r4 = $r8.<org.simpleframework.xml.core.Composite: org.simpleframework.xml.core.Revision revision>;

        $d0 = virtualinvoke $r4.<org.simpleframework.xml.core.Revision: double getDefault()>();

        $r0 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0);

        $d1 = interfaceinvoke $r3.<org.simpleframework.xml.Version: double revision()>();

        $r1 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d1);

        $r9 = $r8.<org.simpleframework.xml.core.Composite: org.simpleframework.xml.core.Revision revision>;

        $z0 = virtualinvoke $r9.<org.simpleframework.xml.core.Revision: boolean compare(java.lang.Object,java.lang.Object)>($r1, $r0);

        if $z0 == 0 goto label1;

        $z1 = interfaceinvoke $r2.<org.simpleframework.xml.core.Label: boolean isRequired()>();

        if $z1 == 0 goto label3;

        specialinvoke $r8.<org.simpleframework.xml.core.Composite: void writeAttribute(org.simpleframework.xml.stream.OutputNode,java.lang.Object,org.simpleframework.xml.core.Label)>($r7, $r1, $r2);

        return;

     label1:
        specialinvoke $r8.<org.simpleframework.xml.core.Composite: void writeAttribute(org.simpleframework.xml.stream.OutputNode,java.lang.Object,org.simpleframework.xml.core.Label)>($r7, $r1, $r2);

        return;

     label2:
        return;

     label3:
        return;
    }

    public java.lang.Object read(org.simpleframework.xml.stream.InputNode) throws java.lang.Exception
    {
        org.simpleframework.xml.core.Context $r0;
        java.lang.Object $r1, $r7, $r8;
        boolean $z0, $z1;
        java.lang.Class $r2;
        org.simpleframework.xml.core.Instance $r3;
        org.simpleframework.xml.core.ObjectFactory $r4;
        org.simpleframework.xml.stream.InputNode $r5;
        org.simpleframework.xml.core.Composite $r6;

        $r6 := @this: org.simpleframework.xml.core.Composite;

        $r5 := @parameter0: org.simpleframework.xml.stream.InputNode;

        $r4 = $r6.<org.simpleframework.xml.core.Composite: org.simpleframework.xml.core.ObjectFactory factory>;

        $r3 = virtualinvoke $r4.<org.simpleframework.xml.core.ObjectFactory: org.simpleframework.xml.core.Instance getInstance(org.simpleframework.xml.stream.InputNode)>($r5);

        $r2 = interfaceinvoke $r3.<org.simpleframework.xml.core.Instance: java.lang.Class getType()>();

        $z0 = interfaceinvoke $r3.<org.simpleframework.xml.core.Instance: boolean isReference()>();

        if $z0 == 0 goto label1;

        $r1 = interfaceinvoke $r3.<org.simpleframework.xml.core.Instance: java.lang.Object getInstance()>();

        return $r1;

     label1:
        $r0 = $r6.<org.simpleframework.xml.core.Composite: org.simpleframework.xml.core.Context context>;

        $z1 = interfaceinvoke $r0.<org.simpleframework.xml.core.Context: boolean isPrimitive(java.lang.Class)>($r2);

        if $z1 == 0 goto label2;

        $r7 = specialinvoke $r6.<org.simpleframework.xml.core.Composite: java.lang.Object readPrimitive(org.simpleframework.xml.stream.InputNode,org.simpleframework.xml.core.Instance)>($r5, $r3);

        return $r7;

     label2:
        $r8 = specialinvoke $r6.<org.simpleframework.xml.core.Composite: java.lang.Object read(org.simpleframework.xml.stream.InputNode,org.simpleframework.xml.core.Instance,java.lang.Class)>($r5, $r3, $r2);

        return $r8;
    }

    public java.lang.Object read(org.simpleframework.xml.stream.InputNode, java.lang.Object) throws java.lang.Exception
    {
        org.simpleframework.xml.core.Criteria $r0;
        org.simpleframework.xml.core.Caller $r1;
        org.simpleframework.xml.core.Schema $r2;
        java.lang.Class $r3;
        org.simpleframework.xml.core.Context $r4;
        java.lang.Object $r5, $r8;
        org.simpleframework.xml.stream.InputNode $r6;
        org.simpleframework.xml.core.Composite $r7;

        $r7 := @this: org.simpleframework.xml.core.Composite;

        $r6 := @parameter0: org.simpleframework.xml.stream.InputNode;

        $r5 := @parameter1: java.lang.Object;

        $r3 = virtualinvoke $r5.<java.lang.Object: java.lang.Class getClass()>();

        $r4 = $r7.<org.simpleframework.xml.core.Composite: org.simpleframework.xml.core.Context context>;

        $r2 = interfaceinvoke $r4.<org.simpleframework.xml.core.Context: org.simpleframework.xml.core.Schema getSchema(java.lang.Class)>($r3);

        $r1 = interfaceinvoke $r2.<org.simpleframework.xml.core.Schema: org.simpleframework.xml.core.Caller getCaller()>();

        specialinvoke $r7.<org.simpleframework.xml.core.Composite: void read(org.simpleframework.xml.stream.InputNode,java.lang.Object,org.simpleframework.xml.core.Schema)>($r6, $r5, $r2);

        $r0 = $r7.<org.simpleframework.xml.core.Composite: org.simpleframework.xml.core.Criteria criteria>;

        interfaceinvoke $r0.<org.simpleframework.xml.core.Criteria: void commit(java.lang.Object)>($r5);

        virtualinvoke $r1.<org.simpleframework.xml.core.Caller: void validate(java.lang.Object)>($r5);

        virtualinvoke $r1.<org.simpleframework.xml.core.Caller: void commit(java.lang.Object)>($r5);

        $r8 = specialinvoke $r7.<org.simpleframework.xml.core.Composite: java.lang.Object readResolve(org.simpleframework.xml.stream.InputNode,java.lang.Object,org.simpleframework.xml.core.Caller)>($r6, $r5, $r1);

        return $r8;
    }

    public boolean validate(org.simpleframework.xml.stream.InputNode) throws java.lang.Exception
    {
        java.lang.Class $r0;
        boolean $z0, $z1;
        org.simpleframework.xml.core.Instance $r1;
        org.simpleframework.xml.core.ObjectFactory $r2;
        org.simpleframework.xml.stream.InputNode $r3;
        org.simpleframework.xml.core.Composite $r4;

        $r4 := @this: org.simpleframework.xml.core.Composite;

        $r3 := @parameter0: org.simpleframework.xml.stream.InputNode;

        $r2 = $r4.<org.simpleframework.xml.core.Composite: org.simpleframework.xml.core.ObjectFactory factory>;

        $r1 = virtualinvoke $r2.<org.simpleframework.xml.core.ObjectFactory: org.simpleframework.xml.core.Instance getInstance(org.simpleframework.xml.stream.InputNode)>($r3);

        $z0 = interfaceinvoke $r1.<org.simpleframework.xml.core.Instance: boolean isReference()>();

        if $z0 != 0 goto label1;

        interfaceinvoke $r1.<org.simpleframework.xml.core.Instance: java.lang.Object setInstance(java.lang.Object)>(null);

        $r0 = interfaceinvoke $r1.<org.simpleframework.xml.core.Instance: java.lang.Class getType()>();

        $z1 = specialinvoke $r4.<org.simpleframework.xml.core.Composite: boolean validate(org.simpleframework.xml.stream.InputNode,java.lang.Class)>($r3, $r0);

        return $z1;

     label1:
        return 1;
    }

    public void write(org.simpleframework.xml.stream.OutputNode, java.lang.Object) throws java.lang.Exception
    {
        java.lang.Throwable $r0;
        org.simpleframework.xml.core.Primitive $r1;
        boolean $z0;
        org.simpleframework.xml.core.Caller $r2;
        org.simpleframework.xml.core.Schema $r3;
        java.lang.Class $r4;
        org.simpleframework.xml.core.Context $r5;
        java.lang.Object $r6;
        org.simpleframework.xml.stream.OutputNode $r7;
        org.simpleframework.xml.core.Composite $r8;

        $r8 := @this: org.simpleframework.xml.core.Composite;

        $r7 := @parameter0: org.simpleframework.xml.stream.OutputNode;

        $r6 := @parameter1: java.lang.Object;

        $r4 = virtualinvoke $r6.<java.lang.Object: java.lang.Class getClass()>();

        $r5 = $r8.<org.simpleframework.xml.core.Composite: org.simpleframework.xml.core.Context context>;

        $r3 = interfaceinvoke $r5.<org.simpleframework.xml.core.Context: org.simpleframework.xml.core.Schema getSchema(java.lang.Class)>($r4);

        $r2 = interfaceinvoke $r3.<org.simpleframework.xml.core.Schema: org.simpleframework.xml.core.Caller getCaller()>();

     label1:
        $z0 = interfaceinvoke $r3.<org.simpleframework.xml.core.Schema: boolean isPrimitive()>();

        if $z0 == 0 goto label3;

        $r1 = $r8.<org.simpleframework.xml.core.Composite: org.simpleframework.xml.core.Primitive primitive>;

        virtualinvoke $r1.<org.simpleframework.xml.core.Primitive: void write(org.simpleframework.xml.stream.OutputNode,java.lang.Object)>($r7, $r6);

     label2:
        virtualinvoke $r2.<org.simpleframework.xml.core.Caller: void complete(java.lang.Object)>($r6);

        return;

     label3:
        virtualinvoke $r2.<org.simpleframework.xml.core.Caller: void persist(java.lang.Object)>($r6);

        specialinvoke $r8.<org.simpleframework.xml.core.Composite: void write(org.simpleframework.xml.stream.OutputNode,java.lang.Object,org.simpleframework.xml.core.Schema)>($r7, $r6, $r3);

     label4:
        goto label2;

     label5:
        $r0 := @caughtexception;

        virtualinvoke $r2.<org.simpleframework.xml.core.Caller: void complete(java.lang.Object)>($r6);

        throw $r0;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
    }
}
