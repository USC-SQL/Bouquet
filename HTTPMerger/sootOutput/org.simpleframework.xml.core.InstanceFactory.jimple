class org.simpleframework.xml.core.InstanceFactory extends java.lang.Object
{
    private final org.simpleframework.xml.core.ConstructorCache cache;

    public void <init>()
    {
        org.simpleframework.xml.core.ConstructorCache $r0;
        org.simpleframework.xml.core.InstanceFactory $r1;

        $r1 := @this: org.simpleframework.xml.core.InstanceFactory;

        specialinvoke $r1.<java.lang.Object: void <init>()>();

        $r0 = new org.simpleframework.xml.core.ConstructorCache;

        specialinvoke $r0.<org.simpleframework.xml.core.ConstructorCache: void <init>()>();

        $r1.<org.simpleframework.xml.core.InstanceFactory: org.simpleframework.xml.core.ConstructorCache cache> = $r0;

        return;
    }

    static java.lang.Object access$000(org.simpleframework.xml.core.InstanceFactory, java.lang.Class) throws java.lang.Exception
    {
        java.lang.Object $r0;
        java.lang.Class $r1;
        org.simpleframework.xml.core.InstanceFactory $r2;

        $r2 := @parameter0: org.simpleframework.xml.core.InstanceFactory;

        $r1 := @parameter1: java.lang.Class;

        $r0 = specialinvoke $r2.<org.simpleframework.xml.core.InstanceFactory: java.lang.Object getObject(java.lang.Class)>($r1);

        return $r0;
    }

    private java.lang.Object getObject(java.lang.Class) throws java.lang.Exception
    {
        java.lang.Object[] $r0;
        boolean $z0;
        java.lang.Class[] $r1;
        java.lang.reflect.Constructor $r2, $r3;
        java.lang.Object $r4, $r9;
        org.simpleframework.xml.core.ConstructorCache $r5, $r8;
        java.lang.Class $r6;
        org.simpleframework.xml.core.InstanceFactory $r7;

        $r7 := @this: org.simpleframework.xml.core.InstanceFactory;

        $r6 := @parameter0: java.lang.Class;

        $r5 = $r7.<org.simpleframework.xml.core.InstanceFactory: org.simpleframework.xml.core.ConstructorCache cache>;

        $r4 = virtualinvoke $r5.<org.simpleframework.xml.core.ConstructorCache: java.lang.Object get(java.lang.Object)>($r6);

        $r2 = (java.lang.reflect.Constructor) $r4;

        if $r2 != null goto label2;

        $r1 = newarray (java.lang.Class)[0];

        $r3 = virtualinvoke $r6.<java.lang.Class: java.lang.reflect.Constructor getDeclaredConstructor(java.lang.Class[])>($r1);

        $r2 = $r3;

        $z0 = virtualinvoke $r3.<java.lang.reflect.Constructor: boolean isAccessible()>();

        if $z0 != 0 goto label1;

        virtualinvoke $r3.<java.lang.reflect.Constructor: void setAccessible(boolean)>(1);

     label1:
        $r8 = $r7.<org.simpleframework.xml.core.InstanceFactory: org.simpleframework.xml.core.ConstructorCache cache>;

        virtualinvoke $r8.<org.simpleframework.xml.core.ConstructorCache: java.lang.Object put(java.lang.Object,java.lang.Object)>($r6, $r3);

     label2:
        $r0 = newarray (java.lang.Object)[0];

        $r9 = virtualinvoke $r2.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($r0);

        return $r9;
    }

    public org.simpleframework.xml.core.Instance getInstance(java.lang.Class)
    {
        org.simpleframework.xml.core.InstanceFactory$ClassInstance $r0;
        java.lang.Class $r1;
        org.simpleframework.xml.core.InstanceFactory $r2;

        $r2 := @this: org.simpleframework.xml.core.InstanceFactory;

        $r1 := @parameter0: java.lang.Class;

        $r0 = new org.simpleframework.xml.core.InstanceFactory$ClassInstance;

        specialinvoke $r0.<org.simpleframework.xml.core.InstanceFactory$ClassInstance: void <init>(org.simpleframework.xml.core.InstanceFactory,java.lang.Class)>($r2, $r1);

        return $r0;
    }

    public org.simpleframework.xml.core.Instance getInstance(org.simpleframework.xml.strategy.Value)
    {
        org.simpleframework.xml.core.InstanceFactory$ValueInstance $r0;
        org.simpleframework.xml.strategy.Value $r1;
        org.simpleframework.xml.core.InstanceFactory $r2;

        $r2 := @this: org.simpleframework.xml.core.InstanceFactory;

        $r1 := @parameter0: org.simpleframework.xml.strategy.Value;

        $r0 = new org.simpleframework.xml.core.InstanceFactory$ValueInstance;

        specialinvoke $r0.<org.simpleframework.xml.core.InstanceFactory$ValueInstance: void <init>(org.simpleframework.xml.core.InstanceFactory,org.simpleframework.xml.strategy.Value)>($r2, $r1);

        return $r0;
    }
}
