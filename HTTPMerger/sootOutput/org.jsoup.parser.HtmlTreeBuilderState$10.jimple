final enum class org.jsoup.parser.HtmlTreeBuilderState$10 extends org.jsoup.parser.HtmlTreeBuilderState
{

    void <init>(java.lang.String, int)
    {
        int $i0;
        java.lang.String $r0;
        org.jsoup.parser.HtmlTreeBuilderState$10 $r1;

        $r1 := @this: org.jsoup.parser.HtmlTreeBuilderState$10;

        $r0 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        specialinvoke $r1.<org.jsoup.parser.HtmlTreeBuilderState: void <init>(java.lang.String,int,org.jsoup.parser.HtmlTreeBuilderState$1)>($r0, $i0, null);

        return;
    }

    boolean process(org.jsoup.parser.Token, org.jsoup.parser.HtmlTreeBuilder)
    {
        org.jsoup.parser.HtmlTreeBuilderState $r0, $r18, $r19;
        java.lang.String[] $r1;
        java.lang.String $r2, $r3, $r16;
        org.jsoup.nodes.Element $r4;
        org.jsoup.parser.Token$Character $r5, $r15;
        java.lang.Object $r6;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.util.Iterator $r7;
        java.util.List $r8, $r14, $r17;
        int $i0, $i1, $i2;
        org.jsoup.parser.Token$TokenType $r9;
        int[] $r10;
        org.jsoup.parser.HtmlTreeBuilder $r11;
        org.jsoup.parser.Token $r12;
        org.jsoup.parser.HtmlTreeBuilderState$10 $r13;

        $r13 := @this: org.jsoup.parser.HtmlTreeBuilderState$10;

        $r12 := @parameter0: org.jsoup.parser.Token;

        $r11 := @parameter1: org.jsoup.parser.HtmlTreeBuilder;

        $r10 = <org.jsoup.parser.HtmlTreeBuilderState$24: int[] $SwitchMap$org$jsoup$parser$Token$TokenType>;

        $r9 = $r12.<org.jsoup.parser.Token: org.jsoup.parser.Token$TokenType type>;

        $i0 = virtualinvoke $r9.<org.jsoup.parser.Token$TokenType: int ordinal()>();

        $i1 = $r10[$i0];

        lookupswitch($i1)
        {
            case 5: goto label3;
            default: goto label1;
        };

     label1:
        $r8 = virtualinvoke $r11.<org.jsoup.parser.HtmlTreeBuilder: java.util.List getPendingTableCharacters()>();

        $i2 = interfaceinvoke $r8.<java.util.List: int size()>();

        if $i2 <= 0 goto label8;

        $r14 = virtualinvoke $r11.<org.jsoup.parser.HtmlTreeBuilder: java.util.List getPendingTableCharacters()>();

        $r7 = interfaceinvoke $r14.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label7;

        $r6 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (org.jsoup.parser.Token$Character) $r6;

        $z1 = staticinvoke <org.jsoup.parser.HtmlTreeBuilderState: boolean access$100(org.jsoup.parser.Token)>($r5);

        if $z1 != 0 goto label6;

        virtualinvoke $r11.<org.jsoup.parser.HtmlTreeBuilder: void error(org.jsoup.parser.HtmlTreeBuilderState)>($r13);

        $r4 = virtualinvoke $r11.<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.nodes.Element currentElement()>();

        $r2 = virtualinvoke $r4.<org.jsoup.nodes.Element: java.lang.String nodeName()>();

        $r1 = newarray (java.lang.String)[5];

        $r1[0] = "table";

        $r1[1] = "tbody";

        $r1[2] = "tfoot";

        $r1[3] = "thead";

        $r1[4] = "tr";

        $z2 = staticinvoke <org.jsoup.helper.StringUtil: boolean in(java.lang.String,java.lang.String[])>($r2, $r1);

        if $z2 == 0 goto label5;

        virtualinvoke $r11.<org.jsoup.parser.HtmlTreeBuilder: void setFosterInserts(boolean)>(1);

        $r0 = <org.jsoup.parser.HtmlTreeBuilderState$10: org.jsoup.parser.HtmlTreeBuilderState InBody>;

        virtualinvoke $r11.<org.jsoup.parser.HtmlTreeBuilder: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilderState)>($r5, $r0);

        virtualinvoke $r11.<org.jsoup.parser.HtmlTreeBuilder: void setFosterInserts(boolean)>(0);

        goto label2;

     label3:
        $r15 = virtualinvoke $r12.<org.jsoup.parser.Token: org.jsoup.parser.Token$Character asCharacter()>();

        $r16 = virtualinvoke $r15.<org.jsoup.parser.Token$Character: java.lang.String getData()>();

        $r3 = staticinvoke <org.jsoup.parser.HtmlTreeBuilderState: java.lang.String access$400()>();

        $z3 = virtualinvoke $r16.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        if $z3 == 0 goto label4;

        virtualinvoke $r11.<org.jsoup.parser.HtmlTreeBuilder: void error(org.jsoup.parser.HtmlTreeBuilderState)>($r13);

        return 0;

     label4:
        $r17 = virtualinvoke $r11.<org.jsoup.parser.HtmlTreeBuilder: java.util.List getPendingTableCharacters()>();

        interfaceinvoke $r17.<java.util.List: boolean add(java.lang.Object)>($r15);

        return 1;

     label5:
        $r18 = <org.jsoup.parser.HtmlTreeBuilderState$10: org.jsoup.parser.HtmlTreeBuilderState InBody>;

        virtualinvoke $r11.<org.jsoup.parser.HtmlTreeBuilder: boolean process(org.jsoup.parser.Token,org.jsoup.parser.HtmlTreeBuilderState)>($r5, $r18);

        goto label2;

     label6:
        virtualinvoke $r11.<org.jsoup.parser.HtmlTreeBuilder: void insert(org.jsoup.parser.Token$Character)>($r5);

        goto label2;

     label7:
        virtualinvoke $r11.<org.jsoup.parser.HtmlTreeBuilder: void newPendingTableCharacters()>();

     label8:
        $r19 = virtualinvoke $r11.<org.jsoup.parser.HtmlTreeBuilder: org.jsoup.parser.HtmlTreeBuilderState originalState()>();

        virtualinvoke $r11.<org.jsoup.parser.HtmlTreeBuilder: void transition(org.jsoup.parser.HtmlTreeBuilderState)>($r19);

        $z4 = virtualinvoke $r11.<org.jsoup.parser.HtmlTreeBuilder: boolean process(org.jsoup.parser.Token)>($r12);

        return $z4;
    }
}
