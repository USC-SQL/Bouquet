public class org.simpleframework.xml.strategy.CycleStrategy extends java.lang.Object implements org.simpleframework.xml.strategy.Strategy
{
    private final org.simpleframework.xml.strategy.Contract contract;
    private final org.simpleframework.xml.strategy.ReadState read;
    private final org.simpleframework.xml.strategy.WriteState write;

    public void <init>()
    {
        org.simpleframework.xml.strategy.CycleStrategy $r0;

        $r0 := @this: org.simpleframework.xml.strategy.CycleStrategy;

        specialinvoke $r0.<org.simpleframework.xml.strategy.CycleStrategy: void <init>(java.lang.String,java.lang.String)>("id", "reference");

        return;
    }

    public void <init>(java.lang.String, java.lang.String)
    {
        java.lang.String $r0, $r1;
        org.simpleframework.xml.strategy.CycleStrategy $r2;

        $r2 := @this: org.simpleframework.xml.strategy.CycleStrategy;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.String;

        specialinvoke $r2.<org.simpleframework.xml.strategy.CycleStrategy: void <init>(java.lang.String,java.lang.String,java.lang.String)>($r0, $r1, "class");

        return;
    }

    public void <init>(java.lang.String, java.lang.String, java.lang.String)
    {
        java.lang.String $r0, $r1, $r2;
        org.simpleframework.xml.strategy.CycleStrategy $r3;

        $r3 := @this: org.simpleframework.xml.strategy.CycleStrategy;

        $r0 := @parameter0: java.lang.String;

        $r1 := @parameter1: java.lang.String;

        $r2 := @parameter2: java.lang.String;

        specialinvoke $r3.<org.simpleframework.xml.strategy.CycleStrategy: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>($r0, $r1, $r2, "length");

        return;
    }

    public void <init>(java.lang.String, java.lang.String, java.lang.String, java.lang.String)
    {
        org.simpleframework.xml.strategy.ReadState $r0;
        org.simpleframework.xml.strategy.WriteState $r1;
        org.simpleframework.xml.strategy.Contract $r2, $r8, $r9;
        java.lang.String $r3, $r4, $r5, $r6;
        org.simpleframework.xml.strategy.CycleStrategy $r7;

        $r7 := @this: org.simpleframework.xml.strategy.CycleStrategy;

        $r3 := @parameter0: java.lang.String;

        $r4 := @parameter1: java.lang.String;

        $r5 := @parameter2: java.lang.String;

        $r6 := @parameter3: java.lang.String;

        specialinvoke $r7.<java.lang.Object: void <init>()>();

        $r2 = new org.simpleframework.xml.strategy.Contract;

        specialinvoke $r2.<org.simpleframework.xml.strategy.Contract: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>($r3, $r4, $r5, $r6);

        $r7.<org.simpleframework.xml.strategy.CycleStrategy: org.simpleframework.xml.strategy.Contract contract> = $r2;

        $r1 = new org.simpleframework.xml.strategy.WriteState;

        $r8 = $r7.<org.simpleframework.xml.strategy.CycleStrategy: org.simpleframework.xml.strategy.Contract contract>;

        specialinvoke $r1.<org.simpleframework.xml.strategy.WriteState: void <init>(org.simpleframework.xml.strategy.Contract)>($r8);

        $r7.<org.simpleframework.xml.strategy.CycleStrategy: org.simpleframework.xml.strategy.WriteState write> = $r1;

        $r0 = new org.simpleframework.xml.strategy.ReadState;

        $r9 = $r7.<org.simpleframework.xml.strategy.CycleStrategy: org.simpleframework.xml.strategy.Contract contract>;

        specialinvoke $r0.<org.simpleframework.xml.strategy.ReadState: void <init>(org.simpleframework.xml.strategy.Contract)>($r9);

        $r7.<org.simpleframework.xml.strategy.CycleStrategy: org.simpleframework.xml.strategy.ReadState read> = $r0;

        return;
    }

    public org.simpleframework.xml.strategy.Value read(org.simpleframework.xml.strategy.Type, org.simpleframework.xml.stream.NodeMap, java.util.Map) throws java.lang.Exception
    {
        org.simpleframework.xml.strategy.Value $r0;
        org.simpleframework.xml.strategy.ReadGraph $r1;
        org.simpleframework.xml.strategy.ReadState $r2;
        java.util.Map $r3;
        org.simpleframework.xml.stream.NodeMap $r4;
        org.simpleframework.xml.strategy.Type $r5;
        org.simpleframework.xml.strategy.CycleStrategy $r6;

        $r6 := @this: org.simpleframework.xml.strategy.CycleStrategy;

        $r5 := @parameter0: org.simpleframework.xml.strategy.Type;

        $r4 := @parameter1: org.simpleframework.xml.stream.NodeMap;

        $r3 := @parameter2: java.util.Map;

        $r2 = $r6.<org.simpleframework.xml.strategy.CycleStrategy: org.simpleframework.xml.strategy.ReadState read>;

        $r1 = virtualinvoke $r2.<org.simpleframework.xml.strategy.ReadState: org.simpleframework.xml.strategy.ReadGraph find(java.lang.Object)>($r3);

        if $r1 == null goto label1;

        $r0 = virtualinvoke $r1.<org.simpleframework.xml.strategy.ReadGraph: org.simpleframework.xml.strategy.Value read(org.simpleframework.xml.strategy.Type,org.simpleframework.xml.stream.NodeMap)>($r5, $r4);

        return $r0;

     label1:
        return null;
    }

    public boolean write(org.simpleframework.xml.strategy.Type, java.lang.Object, org.simpleframework.xml.stream.NodeMap, java.util.Map)
    {
        boolean $z0;
        org.simpleframework.xml.strategy.WriteGraph $r0;
        org.simpleframework.xml.strategy.WriteState $r1;
        java.util.Map $r2;
        org.simpleframework.xml.stream.NodeMap $r3;
        java.lang.Object $r4;
        org.simpleframework.xml.strategy.Type $r5;
        org.simpleframework.xml.strategy.CycleStrategy $r6;

        $r6 := @this: org.simpleframework.xml.strategy.CycleStrategy;

        $r5 := @parameter0: org.simpleframework.xml.strategy.Type;

        $r4 := @parameter1: java.lang.Object;

        $r3 := @parameter2: org.simpleframework.xml.stream.NodeMap;

        $r2 := @parameter3: java.util.Map;

        $r1 = $r6.<org.simpleframework.xml.strategy.CycleStrategy: org.simpleframework.xml.strategy.WriteState write>;

        $r0 = virtualinvoke $r1.<org.simpleframework.xml.strategy.WriteState: org.simpleframework.xml.strategy.WriteGraph find(java.lang.Object)>($r2);

        if $r0 == null goto label1;

        $z0 = virtualinvoke $r0.<org.simpleframework.xml.strategy.WriteGraph: boolean write(org.simpleframework.xml.strategy.Type,java.lang.Object,org.simpleframework.xml.stream.NodeMap)>($r5, $r4, $r3);

        return $z0;

     label1:
        return 0;
    }
}
