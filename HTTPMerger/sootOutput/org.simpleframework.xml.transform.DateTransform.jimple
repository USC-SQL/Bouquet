class org.simpleframework.xml.transform.DateTransform extends java.lang.Object implements org.simpleframework.xml.transform.Transform
{
    private final org.simpleframework.xml.transform.DateFactory factory;

    public void <init>(java.lang.Class) throws java.lang.Exception
    {
        org.simpleframework.xml.transform.DateFactory $r0;
        java.lang.Class $r1;
        org.simpleframework.xml.transform.DateTransform $r2;

        $r2 := @this: org.simpleframework.xml.transform.DateTransform;

        $r1 := @parameter0: java.lang.Class;

        specialinvoke $r2.<java.lang.Object: void <init>()>();

        $r0 = new org.simpleframework.xml.transform.DateFactory;

        specialinvoke $r0.<org.simpleframework.xml.transform.DateFactory: void <init>(java.lang.Class)>($r1);

        $r2.<org.simpleframework.xml.transform.DateTransform: org.simpleframework.xml.transform.DateFactory factory> = $r0;

        return;
    }

    public volatile java.lang.Object read(java.lang.String) throws java.lang.Exception
    {
        java.util.Date $r0;
        java.lang.String $r1;
        org.simpleframework.xml.transform.DateTransform $r2;

        $r2 := @this: org.simpleframework.xml.transform.DateTransform;

        $r1 := @parameter0: java.lang.String;

        $r0 = virtualinvoke $r2.<org.simpleframework.xml.transform.DateTransform: java.util.Date read(java.lang.String)>($r1);

        return $r0;
    }

    public java.util.Date read(java.lang.String) throws java.lang.Exception
    {
        java.lang.Throwable $r0;
        java.lang.Object[] $r1;
        org.simpleframework.xml.transform.DateFactory $r2;
        java.lang.Long $r3;
        long $l0;
        java.util.Date $r4, $r7;
        java.lang.String $r5;
        org.simpleframework.xml.transform.DateTransform $r6;

        $r6 := @this: org.simpleframework.xml.transform.DateTransform;

        $r5 := @parameter0: java.lang.String;

        entermonitor $r6;

     label1:
        $r4 = staticinvoke <org.simpleframework.xml.transform.DateType: java.util.Date getDate(java.lang.String)>($r5);

        $l0 = virtualinvoke $r4.<java.util.Date: long getTime()>();

        $r3 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        $r2 = $r6.<org.simpleframework.xml.transform.DateTransform: org.simpleframework.xml.transform.DateFactory factory>;

        $r1 = newarray (java.lang.Object)[1];

        $r1[0] = $r3;

        $r7 = virtualinvoke $r2.<org.simpleframework.xml.transform.DateFactory: java.util.Date getInstance(java.lang.Object[])>($r1);

     label2:
        exitmonitor $r6;

        return $r7;

     label3:
        $r0 := @caughtexception;

        exitmonitor $r6;

        throw $r0;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public volatile java.lang.String write(java.lang.Object) throws java.lang.Exception
    {
        java.util.Date $r0;
        java.lang.String $r1;
        java.lang.Object $r2;
        org.simpleframework.xml.transform.DateTransform $r3;

        $r3 := @this: org.simpleframework.xml.transform.DateTransform;

        $r2 := @parameter0: java.lang.Object;

        $r0 = (java.util.Date) $r2;

        $r1 = virtualinvoke $r3.<org.simpleframework.xml.transform.DateTransform: java.lang.String write(java.util.Date)>($r0);

        return $r1;
    }

    public java.lang.String write(java.util.Date) throws java.lang.Exception
    {
        java.lang.Throwable $r0;
        java.lang.String $r1;
        java.util.Date $r2;
        org.simpleframework.xml.transform.DateTransform $r3;

        $r3 := @this: org.simpleframework.xml.transform.DateTransform;

        $r2 := @parameter0: java.util.Date;

        entermonitor $r3;

     label1:
        $r1 = staticinvoke <org.simpleframework.xml.transform.DateType: java.lang.String getText(java.util.Date)>($r2);

     label2:
        exitmonitor $r3;

        return $r1;

     label3:
        $r0 := @caughtexception;

        exitmonitor $r3;

        throw $r0;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
}
