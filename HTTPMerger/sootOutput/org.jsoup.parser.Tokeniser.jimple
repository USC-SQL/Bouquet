class org.jsoup.parser.Tokeniser extends java.lang.Object
{
    static final char replacementChar;
    private java.lang.StringBuilder charBuffer;
    org.jsoup.parser.Token$Comment commentPending;
    java.lang.StringBuilder dataBuffer;
    org.jsoup.parser.Token$Doctype doctypePending;
    private org.jsoup.parser.Token emitPending;
    private org.jsoup.parser.ParseErrorList errors;
    private boolean isEmitPending;
    private org.jsoup.parser.Token$StartTag lastStartTag;
    private org.jsoup.parser.CharacterReader reader;
    private boolean selfClosingFlagAcknowledged;
    private org.jsoup.parser.TokeniserState state;
    org.jsoup.parser.Token$Tag tagPending;

    void <init>(org.jsoup.parser.CharacterReader, org.jsoup.parser.ParseErrorList)
    {
        java.lang.StringBuilder $r0;
        org.jsoup.parser.TokeniserState $r1;
        org.jsoup.parser.ParseErrorList $r2;
        org.jsoup.parser.CharacterReader $r3;
        org.jsoup.parser.Tokeniser $r4;

        $r4 := @this: org.jsoup.parser.Tokeniser;

        $r3 := @parameter0: org.jsoup.parser.CharacterReader;

        $r2 := @parameter1: org.jsoup.parser.ParseErrorList;

        specialinvoke $r4.<java.lang.Object: void <init>()>();

        $r1 = <org.jsoup.parser.TokeniserState: org.jsoup.parser.TokeniserState Data>;

        $r4.<org.jsoup.parser.Tokeniser: org.jsoup.parser.TokeniserState state> = $r1;

        $r4.<org.jsoup.parser.Tokeniser: boolean isEmitPending> = 0;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r4.<org.jsoup.parser.Tokeniser: java.lang.StringBuilder charBuffer> = $r0;

        $r4.<org.jsoup.parser.Tokeniser: boolean selfClosingFlagAcknowledged> = 1;

        $r4.<org.jsoup.parser.Tokeniser: org.jsoup.parser.CharacterReader reader> = $r3;

        $r4.<org.jsoup.parser.Tokeniser: org.jsoup.parser.ParseErrorList errors> = $r2;

        return;
    }

    private void characterReferenceError(java.lang.String)
    {
        java.lang.Object[] $r0;
        int $i0;
        boolean $z0;
        org.jsoup.parser.CharacterReader $r1;
        org.jsoup.parser.ParseError $r2;
        org.jsoup.parser.ParseErrorList $r3, $r6;
        java.lang.String $r4;
        org.jsoup.parser.Tokeniser $r5;

        $r5 := @this: org.jsoup.parser.Tokeniser;

        $r4 := @parameter0: java.lang.String;

        $r3 = $r5.<org.jsoup.parser.Tokeniser: org.jsoup.parser.ParseErrorList errors>;

        $z0 = virtualinvoke $r3.<org.jsoup.parser.ParseErrorList: boolean canAddError()>();

        if $z0 == 0 goto label1;

        $r6 = $r5.<org.jsoup.parser.Tokeniser: org.jsoup.parser.ParseErrorList errors>;

        $r2 = new org.jsoup.parser.ParseError;

        $r1 = $r5.<org.jsoup.parser.Tokeniser: org.jsoup.parser.CharacterReader reader>;

        $i0 = virtualinvoke $r1.<org.jsoup.parser.CharacterReader: int pos()>();

        $r0 = newarray (java.lang.Object)[1];

        $r0[0] = $r4;

        specialinvoke $r2.<org.jsoup.parser.ParseError: void <init>(int,java.lang.String,java.lang.Object[])>($i0, "Invalid character reference: %s", $r0);

        virtualinvoke $r6.<org.jsoup.parser.ParseErrorList: boolean add(java.lang.Object)>($r2);

        return;

     label1:
        return;
    }

    private void error(java.lang.String)
    {
        int $i0;
        boolean $z0;
        org.jsoup.parser.CharacterReader $r0;
        org.jsoup.parser.ParseError $r1;
        org.jsoup.parser.ParseErrorList $r2, $r5;
        java.lang.String $r3;
        org.jsoup.parser.Tokeniser $r4;

        $r4 := @this: org.jsoup.parser.Tokeniser;

        $r3 := @parameter0: java.lang.String;

        $r2 = $r4.<org.jsoup.parser.Tokeniser: org.jsoup.parser.ParseErrorList errors>;

        $z0 = virtualinvoke $r2.<org.jsoup.parser.ParseErrorList: boolean canAddError()>();

        if $z0 == 0 goto label1;

        $r5 = $r4.<org.jsoup.parser.Tokeniser: org.jsoup.parser.ParseErrorList errors>;

        $r1 = new org.jsoup.parser.ParseError;

        $r0 = $r4.<org.jsoup.parser.Tokeniser: org.jsoup.parser.CharacterReader reader>;

        $i0 = virtualinvoke $r0.<org.jsoup.parser.CharacterReader: int pos()>();

        specialinvoke $r1.<org.jsoup.parser.ParseError: void <init>(int,java.lang.String)>($i0, $r3);

        virtualinvoke $r5.<org.jsoup.parser.ParseErrorList: boolean add(java.lang.Object)>($r1);

        return;

     label1:
        return;
    }

    void acknowledgeSelfClosingFlag()
    {
        org.jsoup.parser.Tokeniser $r0;

        $r0 := @this: org.jsoup.parser.Tokeniser;

        $r0.<org.jsoup.parser.Tokeniser: boolean selfClosingFlagAcknowledged> = 1;

        return;
    }

    void advanceTransition(org.jsoup.parser.TokeniserState)
    {
        org.jsoup.parser.CharacterReader $r0;
        org.jsoup.parser.TokeniserState $r1;
        org.jsoup.parser.Tokeniser $r2;

        $r2 := @this: org.jsoup.parser.Tokeniser;

        $r1 := @parameter0: org.jsoup.parser.TokeniserState;

        $r0 = $r2.<org.jsoup.parser.Tokeniser: org.jsoup.parser.CharacterReader reader>;

        virtualinvoke $r0.<org.jsoup.parser.CharacterReader: void advance()>();

        $r2.<org.jsoup.parser.Tokeniser: org.jsoup.parser.TokeniserState state> = $r1;

        return;
    }

    java.lang.String appropriateEndTagName()
    {
        java.lang.String r0;
        org.jsoup.parser.Token$StartTag $r1;
        org.jsoup.parser.Tokeniser $r2;

        $r2 := @this: org.jsoup.parser.Tokeniser;

        $r1 = $r2.<org.jsoup.parser.Tokeniser: org.jsoup.parser.Token$StartTag lastStartTag>;

        r0 = $r1.<org.jsoup.parser.Token$StartTag: java.lang.String tagName>;

        return r0;
    }

    java.lang.Character consumeCharacterReference(java.lang.Character, boolean)
    {
        java.lang.NumberFormatException $r0;
        java.lang.Object[] $r1;
        java.lang.Integer $r2;
        char[] $r3, $r30;
        char $c0, $c1, $c6;
        org.jsoup.parser.CharacterReader $r4, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r21, $r23, $r24, $r26, $r27, $r28, $r29, $r31, $r32;
        java.lang.String $r5, $r6, $r7, $r22, $r25;
        int $i2, $i3, $i5, $i7, $i8, $i9;
        byte $b4;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12;
        java.lang.Character $r8, $r19, $r20, $r33;
        org.jsoup.parser.Tokeniser $r9;

        $r9 := @this: org.jsoup.parser.Tokeniser;

        $r8 := @parameter0: java.lang.Character;

        $z0 := @parameter1: boolean;

        $r4 = $r9.<org.jsoup.parser.Tokeniser: org.jsoup.parser.CharacterReader reader>;

        $z1 = virtualinvoke $r4.<org.jsoup.parser.CharacterReader: boolean isEmpty()>();

        if $z1 == 0 goto label01;

        return null;

     label01:
        if $r8 == null goto label02;

        $c0 = virtualinvoke $r8.<java.lang.Character: char charValue()>();

        $r10 = $r9.<org.jsoup.parser.Tokeniser: org.jsoup.parser.CharacterReader reader>;

        $c1 = virtualinvoke $r10.<org.jsoup.parser.CharacterReader: char current()>();

        if $c0 == $c1 goto label24;

     label02:
        $r11 = $r9.<org.jsoup.parser.Tokeniser: org.jsoup.parser.CharacterReader reader>;

        $r3 = newarray (char)[6];

        $r3[0] = 9;

        $r3[1] = 10;

        $r3[2] = 12;

        $r3[3] = 32;

        $r3[4] = 60;

        $r3[5] = 38;

        $z4 = virtualinvoke $r11.<org.jsoup.parser.CharacterReader: boolean matchesAny(char[])>($r3);

        if $z4 != 0 goto label25;

        $r12 = $r9.<org.jsoup.parser.Tokeniser: org.jsoup.parser.CharacterReader reader>;

        virtualinvoke $r12.<org.jsoup.parser.CharacterReader: void mark()>();

        $r13 = $r9.<org.jsoup.parser.Tokeniser: org.jsoup.parser.CharacterReader reader>;

        $z5 = virtualinvoke $r13.<org.jsoup.parser.CharacterReader: boolean matchConsume(java.lang.String)>("#");

        if $z5 == 0 goto label14;

        $r14 = $r9.<org.jsoup.parser.Tokeniser: org.jsoup.parser.CharacterReader reader>;

        $z6 = virtualinvoke $r14.<org.jsoup.parser.CharacterReader: boolean matchConsumeIgnoreCase(java.lang.String)>("X");

        if $z6 == 0 goto label04;

        $r15 = $r9.<org.jsoup.parser.Tokeniser: org.jsoup.parser.CharacterReader reader>;

        $r5 = virtualinvoke $r15.<org.jsoup.parser.CharacterReader: java.lang.String consumeHexSequence()>();

     label03:
        $i2 = virtualinvoke $r5.<java.lang.String: int length()>();

        if $i2 != 0 goto label05;

        specialinvoke $r9.<org.jsoup.parser.Tokeniser: void characterReferenceError(java.lang.String)>("numeric reference with no numerals");

        $r16 = $r9.<org.jsoup.parser.Tokeniser: org.jsoup.parser.CharacterReader reader>;

        virtualinvoke $r16.<org.jsoup.parser.CharacterReader: void rewindToMark()>();

        return null;

     label04:
        $r17 = $r9.<org.jsoup.parser.Tokeniser: org.jsoup.parser.CharacterReader reader>;

        $r5 = virtualinvoke $r17.<org.jsoup.parser.CharacterReader: java.lang.String consumeDigitSequence()>();

        goto label03;

     label05:
        $r18 = $r9.<org.jsoup.parser.Tokeniser: org.jsoup.parser.CharacterReader reader>;

        $z7 = virtualinvoke $r18.<org.jsoup.parser.CharacterReader: boolean matchConsume(java.lang.String)>(";");

        if $z7 != 0 goto label06;

        specialinvoke $r9.<org.jsoup.parser.Tokeniser: void characterReferenceError(java.lang.String)>("missing semicolon");

     label06:
        $i5 = -1;

        if $z6 == 0 goto label12;

        $b4 = 16;

     label07:
        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(java.lang.String,int)>($r5, $b4);

        $i3 = virtualinvoke $r2.<java.lang.Integer: int intValue()>();

     label08:
        $i5 = $i3;

     label09:
        if $i5 == -1 goto label11;

        if $i5 < 55296 goto label10;

        if $i5 <= 57343 goto label11;

     label10:
        if $i5 <= 1114111 goto label13;

     label11:
        specialinvoke $r9.<org.jsoup.parser.Tokeniser: void characterReferenceError(java.lang.String)>("character outside of valid range");

        $r19 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(65533);

        return $r19;

     label12:
        $b4 = 10;

        goto label07;

     label13:
        $c6 = (char) $i5;

        $r20 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>($c6);

        return $r20;

     label14:
        $r21 = $r9.<org.jsoup.parser.Tokeniser: org.jsoup.parser.CharacterReader reader>;

        $r7 = virtualinvoke $r21.<org.jsoup.parser.CharacterReader: java.lang.String consumeLetterThenDigitSequence()>();

        $r22 = $r7;

        $r6 = new java.lang.String;

        specialinvoke $r6.<java.lang.String: void <init>(java.lang.String)>($r7);

        $r23 = $r9.<org.jsoup.parser.Tokeniser: org.jsoup.parser.CharacterReader reader>;

        $z2 = virtualinvoke $r23.<org.jsoup.parser.CharacterReader: boolean matches(char)>(59);

        $z8 = 0;

     label15:
        $i7 = virtualinvoke $r22.<java.lang.String: int length()>();

        if $i7 <= 0 goto label17;

        if $z8 != 0 goto label17;

        $z3 = staticinvoke <org.jsoup.nodes.Entities: boolean isNamedEntity(java.lang.String)>($r22);

        if $z3 == 0 goto label16;

        $z8 = 1;

        goto label15;

     label16:
        $i8 = virtualinvoke $r22.<java.lang.String: int length()>();

        $i9 = $i8 + -1;

        $r22 = virtualinvoke $r22.<java.lang.String: java.lang.String substring(int,int)>(0, $i9);

        $r24 = $r9.<org.jsoup.parser.Tokeniser: org.jsoup.parser.CharacterReader reader>;

        virtualinvoke $r24.<org.jsoup.parser.CharacterReader: void unconsume()>();

        goto label15;

     label17:
        if $z8 != 0 goto label19;

        if $z2 == 0 goto label18;

        $r1 = newarray (java.lang.Object)[1];

        $r1[0] = $r6;

        $r25 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("invalid named referenece \'%s\'", $r1);

        specialinvoke $r9.<org.jsoup.parser.Tokeniser: void characterReferenceError(java.lang.String)>($r25);

     label18:
        $r26 = $r9.<org.jsoup.parser.Tokeniser: org.jsoup.parser.CharacterReader reader>;

        virtualinvoke $r26.<org.jsoup.parser.CharacterReader: void rewindToMark()>();

        return null;

     label19:
        if $z0 == 0 goto label21;

        $r27 = $r9.<org.jsoup.parser.Tokeniser: org.jsoup.parser.CharacterReader reader>;

        $z9 = virtualinvoke $r27.<org.jsoup.parser.CharacterReader: boolean matchesLetter()>();

        if $z9 != 0 goto label20;

        $r28 = $r9.<org.jsoup.parser.Tokeniser: org.jsoup.parser.CharacterReader reader>;

        $z10 = virtualinvoke $r28.<org.jsoup.parser.CharacterReader: boolean matchesDigit()>();

        if $z10 != 0 goto label20;

        $r29 = $r9.<org.jsoup.parser.Tokeniser: org.jsoup.parser.CharacterReader reader>;

        $r30 = newarray (char)[3];

        $r30[0] = 61;

        $r30[1] = 45;

        $r30[2] = 95;

        $z11 = virtualinvoke $r29.<org.jsoup.parser.CharacterReader: boolean matchesAny(char[])>($r30);

        if $z11 == 0 goto label21;

     label20:
        $r31 = $r9.<org.jsoup.parser.Tokeniser: org.jsoup.parser.CharacterReader reader>;

        virtualinvoke $r31.<org.jsoup.parser.CharacterReader: void rewindToMark()>();

        return null;

     label21:
        $r32 = $r9.<org.jsoup.parser.Tokeniser: org.jsoup.parser.CharacterReader reader>;

        $z12 = virtualinvoke $r32.<org.jsoup.parser.CharacterReader: boolean matchConsume(java.lang.String)>(";");

        if $z12 != 0 goto label22;

        specialinvoke $r9.<org.jsoup.parser.Tokeniser: void characterReferenceError(java.lang.String)>("missing semicolon");

     label22:
        $r33 = staticinvoke <org.jsoup.nodes.Entities: java.lang.Character getCharacterByName(java.lang.String)>($r22);

        return $r33;

     label23:
        $r0 := @caughtexception;

        goto label09;

     label24:
        return null;

     label25:
        return null;

        catch java.lang.NumberFormatException from label07 to label08 with label23;
    }

    void createCommentPending()
    {
        org.jsoup.parser.Token$Comment $r0;
        org.jsoup.parser.Tokeniser $r1;

        $r1 := @this: org.jsoup.parser.Tokeniser;

        $r0 = new org.jsoup.parser.Token$Comment;

        specialinvoke $r0.<org.jsoup.parser.Token$Comment: void <init>()>();

        $r1.<org.jsoup.parser.Tokeniser: org.jsoup.parser.Token$Comment commentPending> = $r0;

        return;
    }

    void createDoctypePending()
    {
        org.jsoup.parser.Token$Doctype $r0;
        org.jsoup.parser.Tokeniser $r1;

        $r1 := @this: org.jsoup.parser.Tokeniser;

        $r0 = new org.jsoup.parser.Token$Doctype;

        specialinvoke $r0.<org.jsoup.parser.Token$Doctype: void <init>()>();

        $r1.<org.jsoup.parser.Tokeniser: org.jsoup.parser.Token$Doctype doctypePending> = $r0;

        return;
    }

    org.jsoup.parser.Token$Tag createTagPending(boolean)
    {
        org.jsoup.parser.Token$EndTag r0;
        org.jsoup.parser.Token$StartTag r1;
        org.jsoup.parser.Token$Tag $r2, $r4;
        boolean $z0;
        org.jsoup.parser.Tokeniser $r3;

        $r3 := @this: org.jsoup.parser.Tokeniser;

        $z0 := @parameter0: boolean;

        if $z0 == 0 goto label2;

        r1 = new org.jsoup.parser.Token$StartTag;

        $r2 = r1;

        specialinvoke r1.<org.jsoup.parser.Token$StartTag: void <init>()>();

     label1:
        $r3.<org.jsoup.parser.Tokeniser: org.jsoup.parser.Token$Tag tagPending> = $r2;

        $r4 = $r3.<org.jsoup.parser.Tokeniser: org.jsoup.parser.Token$Tag tagPending>;

        return $r4;

     label2:
        r0 = new org.jsoup.parser.Token$EndTag;

        $r2 = r0;

        specialinvoke r0.<org.jsoup.parser.Token$EndTag: void <init>()>();

        goto label1;
    }

    void createTempBuffer()
    {
        java.lang.StringBuilder $r0;
        org.jsoup.parser.Tokeniser $r1;

        $r1 := @this: org.jsoup.parser.Tokeniser;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1.<org.jsoup.parser.Tokeniser: java.lang.StringBuilder dataBuffer> = $r0;

        return;
    }

    boolean currentNodeInHtmlNS()
    {
        org.jsoup.parser.Tokeniser $r0;

        $r0 := @this: org.jsoup.parser.Tokeniser;

        return 1;
    }

    void emit(char)
    {
        java.lang.StringBuilder $r0;
        char $c0;
        org.jsoup.parser.Tokeniser $r1;

        $r1 := @this: org.jsoup.parser.Tokeniser;

        $c0 := @parameter0: char;

        $r0 = $r1.<org.jsoup.parser.Tokeniser: java.lang.StringBuilder charBuffer>;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c0);

        return;
    }

    void emit(java.lang.String)
    {
        java.lang.StringBuilder $r0;
        java.lang.String $r1;
        org.jsoup.parser.Tokeniser $r2;

        $r2 := @this: org.jsoup.parser.Tokeniser;

        $r1 := @parameter0: java.lang.String;

        $r0 = $r2.<org.jsoup.parser.Tokeniser: java.lang.StringBuilder charBuffer>;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        return;
    }

    void emit(org.jsoup.parser.Token)
    {
        org.jsoup.nodes.Attributes $r0;
        org.jsoup.parser.Token$EndTag $r1;
        org.jsoup.parser.Token$StartTag $r2;
        org.jsoup.parser.Token$TokenType $r3, $r4, $r7, $r8;
        int $i0;
        boolean $z0, $z1;
        org.jsoup.parser.Token $r5;
        org.jsoup.parser.Tokeniser $r6;

        $r6 := @this: org.jsoup.parser.Tokeniser;

        $r5 := @parameter0: org.jsoup.parser.Token;

        $z0 = $r6.<org.jsoup.parser.Tokeniser: boolean isEmitPending>;

        staticinvoke <org.jsoup.helper.Validate: void isFalse(boolean,java.lang.String)>($z0, "There is an unread token pending!");

        $r6.<org.jsoup.parser.Tokeniser: org.jsoup.parser.Token emitPending> = $r5;

        $r6.<org.jsoup.parser.Tokeniser: boolean isEmitPending> = 1;

        $r3 = $r5.<org.jsoup.parser.Token: org.jsoup.parser.Token$TokenType type>;

        $r4 = <org.jsoup.parser.Token$TokenType: org.jsoup.parser.Token$TokenType StartTag>;

        if $r3 != $r4 goto label1;

        $r2 = (org.jsoup.parser.Token$StartTag) $r5;

        $r6.<org.jsoup.parser.Tokeniser: org.jsoup.parser.Token$StartTag lastStartTag> = $r2;

        $z1 = $r2.<org.jsoup.parser.Token$StartTag: boolean selfClosing>;

        if $z1 == 0 goto label2;

        $r6.<org.jsoup.parser.Tokeniser: boolean selfClosingFlagAcknowledged> = 0;

        return;

     label1:
        $r7 = $r5.<org.jsoup.parser.Token: org.jsoup.parser.Token$TokenType type>;

        $r8 = <org.jsoup.parser.Token$TokenType: org.jsoup.parser.Token$TokenType EndTag>;

        if $r7 != $r8 goto label3;

        $r1 = (org.jsoup.parser.Token$EndTag) $r5;

        $r0 = $r1.<org.jsoup.parser.Token$EndTag: org.jsoup.nodes.Attributes attributes>;

        $i0 = virtualinvoke $r0.<org.jsoup.nodes.Attributes: int size()>();

        if $i0 <= 0 goto label4;

        specialinvoke $r6.<org.jsoup.parser.Tokeniser: void error(java.lang.String)>("Attributes incorrectly present on end tag");

        return;

     label2:
        return;

     label3:
        return;

     label4:
        return;
    }

    void emitCommentPending()
    {
        org.jsoup.parser.Token$Comment $r0;
        org.jsoup.parser.Tokeniser $r1;

        $r1 := @this: org.jsoup.parser.Tokeniser;

        $r0 = $r1.<org.jsoup.parser.Tokeniser: org.jsoup.parser.Token$Comment commentPending>;

        virtualinvoke $r1.<org.jsoup.parser.Tokeniser: void emit(org.jsoup.parser.Token)>($r0);

        return;
    }

    void emitDoctypePending()
    {
        org.jsoup.parser.Token$Doctype $r0;
        org.jsoup.parser.Tokeniser $r1;

        $r1 := @this: org.jsoup.parser.Tokeniser;

        $r0 = $r1.<org.jsoup.parser.Tokeniser: org.jsoup.parser.Token$Doctype doctypePending>;

        virtualinvoke $r1.<org.jsoup.parser.Tokeniser: void emit(org.jsoup.parser.Token)>($r0);

        return;
    }

    void emitTagPending()
    {
        org.jsoup.parser.Token$Tag $r0, $r2;
        org.jsoup.parser.Tokeniser $r1;

        $r1 := @this: org.jsoup.parser.Tokeniser;

        $r0 = $r1.<org.jsoup.parser.Tokeniser: org.jsoup.parser.Token$Tag tagPending>;

        virtualinvoke $r0.<org.jsoup.parser.Token$Tag: void finaliseTag()>();

        $r2 = $r1.<org.jsoup.parser.Tokeniser: org.jsoup.parser.Token$Tag tagPending>;

        virtualinvoke $r1.<org.jsoup.parser.Tokeniser: void emit(org.jsoup.parser.Token)>($r2);

        return;
    }

    void eofError(org.jsoup.parser.TokeniserState)
    {
        java.lang.Object[] $r0;
        int $i0;
        boolean $z0;
        org.jsoup.parser.CharacterReader $r1;
        org.jsoup.parser.ParseError $r2;
        org.jsoup.parser.ParseErrorList $r3, $r6;
        org.jsoup.parser.TokeniserState $r4;
        org.jsoup.parser.Tokeniser $r5;

        $r5 := @this: org.jsoup.parser.Tokeniser;

        $r4 := @parameter0: org.jsoup.parser.TokeniserState;

        $r3 = $r5.<org.jsoup.parser.Tokeniser: org.jsoup.parser.ParseErrorList errors>;

        $z0 = virtualinvoke $r3.<org.jsoup.parser.ParseErrorList: boolean canAddError()>();

        if $z0 == 0 goto label1;

        $r6 = $r5.<org.jsoup.parser.Tokeniser: org.jsoup.parser.ParseErrorList errors>;

        $r2 = new org.jsoup.parser.ParseError;

        $r1 = $r5.<org.jsoup.parser.Tokeniser: org.jsoup.parser.CharacterReader reader>;

        $i0 = virtualinvoke $r1.<org.jsoup.parser.CharacterReader: int pos()>();

        $r0 = newarray (java.lang.Object)[1];

        $r0[0] = $r4;

        specialinvoke $r2.<org.jsoup.parser.ParseError: void <init>(int,java.lang.String,java.lang.Object[])>($i0, "Unexpectedly reached end of file (EOF) in input state [%s]", $r0);

        virtualinvoke $r6.<org.jsoup.parser.ParseErrorList: boolean add(java.lang.Object)>($r2);

        return;

     label1:
        return;
    }

    void error(org.jsoup.parser.TokeniserState)
    {
        java.lang.Character $r0;
        char $c0;
        java.lang.Object[] $r1;
        int $i1;
        boolean $z0;
        org.jsoup.parser.CharacterReader $r2, $r8;
        org.jsoup.parser.ParseError $r3;
        org.jsoup.parser.ParseErrorList $r4, $r7;
        org.jsoup.parser.TokeniserState $r5;
        org.jsoup.parser.Tokeniser $r6;

        $r6 := @this: org.jsoup.parser.Tokeniser;

        $r5 := @parameter0: org.jsoup.parser.TokeniserState;

        $r4 = $r6.<org.jsoup.parser.Tokeniser: org.jsoup.parser.ParseErrorList errors>;

        $z0 = virtualinvoke $r4.<org.jsoup.parser.ParseErrorList: boolean canAddError()>();

        if $z0 == 0 goto label1;

        $r7 = $r6.<org.jsoup.parser.Tokeniser: org.jsoup.parser.ParseErrorList errors>;

        $r3 = new org.jsoup.parser.ParseError;

        $r2 = $r6.<org.jsoup.parser.Tokeniser: org.jsoup.parser.CharacterReader reader>;

        $i1 = virtualinvoke $r2.<org.jsoup.parser.CharacterReader: int pos()>();

        $r1 = newarray (java.lang.Object)[2];

        $r8 = $r6.<org.jsoup.parser.Tokeniser: org.jsoup.parser.CharacterReader reader>;

        $c0 = virtualinvoke $r8.<org.jsoup.parser.CharacterReader: char current()>();

        $r0 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>($c0);

        $r1[0] = $r0;

        $r1[1] = $r5;

        specialinvoke $r3.<org.jsoup.parser.ParseError: void <init>(int,java.lang.String,java.lang.Object[])>($i1, "Unexpected character \'%s\' in input state [%s]", $r1);

        virtualinvoke $r7.<org.jsoup.parser.ParseErrorList: boolean add(java.lang.Object)>($r3);

        return;

     label1:
        return;
    }

    org.jsoup.parser.TokeniserState getState()
    {
        org.jsoup.parser.TokeniserState r0;
        org.jsoup.parser.Tokeniser $r1;

        $r1 := @this: org.jsoup.parser.Tokeniser;

        r0 = $r1.<org.jsoup.parser.Tokeniser: org.jsoup.parser.TokeniserState state>;

        return r0;
    }

    boolean isAppropriateEndTagToken()
    {
        java.lang.String $r0, $r1;
        org.jsoup.parser.Token$Tag $r2;
        boolean $z0;
        org.jsoup.parser.Token$StartTag $r3, $r5;
        org.jsoup.parser.Tokeniser $r4;

        $r4 := @this: org.jsoup.parser.Tokeniser;

        $r3 = $r4.<org.jsoup.parser.Tokeniser: org.jsoup.parser.Token$StartTag lastStartTag>;

        if $r3 != null goto label1;

        return 0;

     label1:
        $r2 = $r4.<org.jsoup.parser.Tokeniser: org.jsoup.parser.Token$Tag tagPending>;

        $r0 = $r2.<org.jsoup.parser.Token$Tag: java.lang.String tagName>;

        $r5 = $r4.<org.jsoup.parser.Tokeniser: org.jsoup.parser.Token$StartTag lastStartTag>;

        $r1 = $r5.<org.jsoup.parser.Token$StartTag: java.lang.String tagName>;

        $z0 = virtualinvoke $r0.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        return $z0;
    }

    org.jsoup.parser.Token read()
    {
        org.jsoup.parser.Token r0;
        org.jsoup.parser.Token$Character $r1;
        java.lang.String $r2;
        java.lang.StringBuilder $r3, $r4, $r8, $r9;
        org.jsoup.parser.TokeniserState $r5;
        int $i0, $i1;
        org.jsoup.parser.CharacterReader $r6;
        boolean $z0, $z1;
        org.jsoup.parser.Tokeniser $r7;

        $r7 := @this: org.jsoup.parser.Tokeniser;

        $z0 = $r7.<org.jsoup.parser.Tokeniser: boolean selfClosingFlagAcknowledged>;

        if $z0 != 0 goto label1;

        specialinvoke $r7.<org.jsoup.parser.Tokeniser: void error(java.lang.String)>("Self closing flag not acknowledged");

        $r7.<org.jsoup.parser.Tokeniser: boolean selfClosingFlagAcknowledged> = 1;

     label1:
        $z1 = $r7.<org.jsoup.parser.Tokeniser: boolean isEmitPending>;

        if $z1 != 0 goto label2;

        $r5 = $r7.<org.jsoup.parser.Tokeniser: org.jsoup.parser.TokeniserState state>;

        $r6 = $r7.<org.jsoup.parser.Tokeniser: org.jsoup.parser.CharacterReader reader>;

        virtualinvoke $r5.<org.jsoup.parser.TokeniserState: void read(org.jsoup.parser.Tokeniser,org.jsoup.parser.CharacterReader)>($r7, $r6);

        goto label1;

     label2:
        $r3 = $r7.<org.jsoup.parser.Tokeniser: java.lang.StringBuilder charBuffer>;

        $i0 = virtualinvoke $r3.<java.lang.StringBuilder: int length()>();

        if $i0 <= 0 goto label3;

        $r8 = $r7.<org.jsoup.parser.Tokeniser: java.lang.StringBuilder charBuffer>;

        $r2 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        $r9 = $r7.<org.jsoup.parser.Tokeniser: java.lang.StringBuilder charBuffer>;

        $r4 = $r7.<org.jsoup.parser.Tokeniser: java.lang.StringBuilder charBuffer>;

        $i1 = virtualinvoke $r4.<java.lang.StringBuilder: int length()>();

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder delete(int,int)>(0, $i1);

        $r1 = new org.jsoup.parser.Token$Character;

        specialinvoke $r1.<org.jsoup.parser.Token$Character: void <init>(java.lang.String)>($r2);

        return $r1;

     label3:
        $r7.<org.jsoup.parser.Tokeniser: boolean isEmitPending> = 0;

        r0 = $r7.<org.jsoup.parser.Tokeniser: org.jsoup.parser.Token emitPending>;

        return r0;
    }

    void transition(org.jsoup.parser.TokeniserState)
    {
        org.jsoup.parser.TokeniserState $r0;
        org.jsoup.parser.Tokeniser $r1;

        $r1 := @this: org.jsoup.parser.Tokeniser;

        $r0 := @parameter0: org.jsoup.parser.TokeniserState;

        $r1.<org.jsoup.parser.Tokeniser: org.jsoup.parser.TokeniserState state> = $r0;

        return;
    }

    public static void <clinit>()
    {
        <org.jsoup.parser.Tokeniser: char replacementChar> = 65533;

        <org.jsoup.parser.Tokeniser: char replacementChar> = 65533;

        return;
    }
}
