class org.simpleframework.xml.core.Primitive extends java.lang.Object implements org.simpleframework.xml.core.Converter
{
    private final org.simpleframework.xml.core.Context context;
    private final java.lang.String empty;
    private final java.lang.Class expect;
    private final org.simpleframework.xml.core.PrimitiveFactory factory;
    private final org.simpleframework.xml.strategy.Type type;

    public void <init>(org.simpleframework.xml.core.Context, org.simpleframework.xml.strategy.Type)
    {
        org.simpleframework.xml.strategy.Type $r0;
        org.simpleframework.xml.core.Context $r1;
        org.simpleframework.xml.core.Primitive $r2;

        $r2 := @this: org.simpleframework.xml.core.Primitive;

        $r1 := @parameter0: org.simpleframework.xml.core.Context;

        $r0 := @parameter1: org.simpleframework.xml.strategy.Type;

        specialinvoke $r2.<org.simpleframework.xml.core.Primitive: void <init>(org.simpleframework.xml.core.Context,org.simpleframework.xml.strategy.Type,java.lang.String)>($r1, $r0, null);

        return;
    }

    public void <init>(org.simpleframework.xml.core.Context, org.simpleframework.xml.strategy.Type, java.lang.String)
    {
        java.lang.Class $r0;
        org.simpleframework.xml.core.PrimitiveFactory $r1;
        java.lang.String $r2;
        org.simpleframework.xml.strategy.Type $r3;
        org.simpleframework.xml.core.Context $r4;
        org.simpleframework.xml.core.Primitive $r5;

        $r5 := @this: org.simpleframework.xml.core.Primitive;

        $r4 := @parameter0: org.simpleframework.xml.core.Context;

        $r3 := @parameter1: org.simpleframework.xml.strategy.Type;

        $r2 := @parameter2: java.lang.String;

        specialinvoke $r5.<java.lang.Object: void <init>()>();

        $r1 = new org.simpleframework.xml.core.PrimitiveFactory;

        specialinvoke $r1.<org.simpleframework.xml.core.PrimitiveFactory: void <init>(org.simpleframework.xml.core.Context,org.simpleframework.xml.strategy.Type)>($r4, $r3);

        $r5.<org.simpleframework.xml.core.Primitive: org.simpleframework.xml.core.PrimitiveFactory factory> = $r1;

        $r0 = interfaceinvoke $r3.<org.simpleframework.xml.strategy.Type: java.lang.Class getType()>();

        $r5.<org.simpleframework.xml.core.Primitive: java.lang.Class expect> = $r0;

        $r5.<org.simpleframework.xml.core.Primitive: org.simpleframework.xml.core.Context context> = $r4;

        $r5.<org.simpleframework.xml.core.Primitive: java.lang.String empty> = $r2;

        $r5.<org.simpleframework.xml.core.Primitive: org.simpleframework.xml.strategy.Type type> = $r3;

        return;
    }

    private java.lang.Object readElement(org.simpleframework.xml.stream.InputNode) throws java.lang.Exception
    {
        java.lang.Object $r0, $r5;
        boolean $z0;
        org.simpleframework.xml.core.Instance $r1;
        org.simpleframework.xml.core.PrimitiveFactory $r2;
        org.simpleframework.xml.stream.InputNode $r3;
        org.simpleframework.xml.core.Primitive $r4;

        $r4 := @this: org.simpleframework.xml.core.Primitive;

        $r3 := @parameter0: org.simpleframework.xml.stream.InputNode;

        $r2 = $r4.<org.simpleframework.xml.core.Primitive: org.simpleframework.xml.core.PrimitiveFactory factory>;

        $r1 = virtualinvoke $r2.<org.simpleframework.xml.core.PrimitiveFactory: org.simpleframework.xml.core.Instance getInstance(org.simpleframework.xml.stream.InputNode)>($r3);

        $z0 = interfaceinvoke $r1.<org.simpleframework.xml.core.Instance: boolean isReference()>();

        if $z0 != 0 goto label1;

        $r0 = specialinvoke $r4.<org.simpleframework.xml.core.Primitive: java.lang.Object readElement(org.simpleframework.xml.stream.InputNode,org.simpleframework.xml.core.Instance)>($r3, $r1);

        return $r0;

     label1:
        $r5 = interfaceinvoke $r1.<org.simpleframework.xml.core.Instance: java.lang.Object getInstance()>();

        return $r5;
    }

    private java.lang.Object readElement(org.simpleframework.xml.stream.InputNode, org.simpleframework.xml.core.Instance) throws java.lang.Exception
    {
        java.lang.Object $r0;
        java.lang.Class $r1;
        org.simpleframework.xml.core.Instance $r2;
        org.simpleframework.xml.stream.InputNode $r3;
        org.simpleframework.xml.core.Primitive $r4;

        $r4 := @this: org.simpleframework.xml.core.Primitive;

        $r3 := @parameter0: org.simpleframework.xml.stream.InputNode;

        $r2 := @parameter1: org.simpleframework.xml.core.Instance;

        $r1 = $r4.<org.simpleframework.xml.core.Primitive: java.lang.Class expect>;

        $r0 = virtualinvoke $r4.<org.simpleframework.xml.core.Primitive: java.lang.Object read(org.simpleframework.xml.stream.InputNode,java.lang.Class)>($r3, $r1);

        if $r2 == null goto label1;

        interfaceinvoke $r2.<org.simpleframework.xml.core.Instance: java.lang.Object setInstance(java.lang.Object)>($r0);

        return $r0;

     label1:
        return $r0;
    }

    private java.lang.Object readTemplate(java.lang.String, java.lang.Class) throws java.lang.Exception
    {
        java.lang.Object $r0;
        org.simpleframework.xml.core.PrimitiveFactory $r1;
        org.simpleframework.xml.core.Context $r2;
        java.lang.Class $r3;
        java.lang.String $r4, $r6;
        org.simpleframework.xml.core.Primitive $r5;

        $r5 := @this: org.simpleframework.xml.core.Primitive;

        $r4 := @parameter0: java.lang.String;

        $r3 := @parameter1: java.lang.Class;

        $r2 = $r5.<org.simpleframework.xml.core.Primitive: org.simpleframework.xml.core.Context context>;

        $r6 = interfaceinvoke $r2.<org.simpleframework.xml.core.Context: java.lang.String getProperty(java.lang.String)>($r4);

        if $r6 == null goto label1;

        $r1 = $r5.<org.simpleframework.xml.core.Primitive: org.simpleframework.xml.core.PrimitiveFactory factory>;

        $r0 = virtualinvoke $r1.<org.simpleframework.xml.core.PrimitiveFactory: java.lang.Object getInstance(java.lang.String,java.lang.Class)>($r6, $r3);

        return $r0;

     label1:
        return null;
    }

    private boolean validateElement(org.simpleframework.xml.stream.InputNode) throws java.lang.Exception
    {
        boolean $z0;
        org.simpleframework.xml.core.Instance $r0;
        org.simpleframework.xml.core.PrimitiveFactory $r1;
        org.simpleframework.xml.stream.InputNode $r2;
        org.simpleframework.xml.core.Primitive $r3;

        $r3 := @this: org.simpleframework.xml.core.Primitive;

        $r2 := @parameter0: org.simpleframework.xml.stream.InputNode;

        $r1 = $r3.<org.simpleframework.xml.core.Primitive: org.simpleframework.xml.core.PrimitiveFactory factory>;

        $r0 = virtualinvoke $r1.<org.simpleframework.xml.core.PrimitiveFactory: org.simpleframework.xml.core.Instance getInstance(org.simpleframework.xml.stream.InputNode)>($r2);

        $z0 = interfaceinvoke $r0.<org.simpleframework.xml.core.Instance: boolean isReference()>();

        if $z0 != 0 goto label1;

        interfaceinvoke $r0.<org.simpleframework.xml.core.Instance: java.lang.Object setInstance(java.lang.Object)>(null);

     label1:
        return 1;
    }

    public java.lang.Object read(org.simpleframework.xml.stream.InputNode) throws java.lang.Exception
    {
        java.lang.Class $r0;
        java.lang.Object $r1, $r4;
        boolean $z0;
        org.simpleframework.xml.stream.InputNode $r2;
        org.simpleframework.xml.core.Primitive $r3;

        $r3 := @this: org.simpleframework.xml.core.Primitive;

        $r2 := @parameter0: org.simpleframework.xml.stream.InputNode;

        $z0 = interfaceinvoke $r2.<org.simpleframework.xml.stream.InputNode: boolean isElement()>();

        if $z0 == 0 goto label1;

        $r1 = specialinvoke $r3.<org.simpleframework.xml.core.Primitive: java.lang.Object readElement(org.simpleframework.xml.stream.InputNode)>($r2);

        return $r1;

     label1:
        $r0 = $r3.<org.simpleframework.xml.core.Primitive: java.lang.Class expect>;

        $r4 = virtualinvoke $r3.<org.simpleframework.xml.core.Primitive: java.lang.Object read(org.simpleframework.xml.stream.InputNode,java.lang.Class)>($r2, $r0);

        return $r4;
    }

    public java.lang.Object read(org.simpleframework.xml.stream.InputNode, java.lang.Class) throws java.lang.Exception
    {
        java.lang.Object $r0;
        boolean $z0;
        java.lang.String $r1, $r2, $r6, $r7;
        java.lang.Class $r3;
        org.simpleframework.xml.stream.InputNode $r4;
        org.simpleframework.xml.core.Primitive $r5;

        $r5 := @this: org.simpleframework.xml.core.Primitive;

        $r4 := @parameter0: org.simpleframework.xml.stream.InputNode;

        $r3 := @parameter1: java.lang.Class;

        $r1 = interfaceinvoke $r4.<org.simpleframework.xml.stream.InputNode: java.lang.String getValue()>();

        if $r1 != null goto label1;

        return null;

     label1:
        $r2 = $r5.<org.simpleframework.xml.core.Primitive: java.lang.String empty>;

        if $r2 == null goto label2;

        $r6 = $r5.<org.simpleframework.xml.core.Primitive: java.lang.String empty>;

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r6);

        if $z0 == 0 goto label2;

        $r7 = $r5.<org.simpleframework.xml.core.Primitive: java.lang.String empty>;

        return $r7;

     label2:
        $r0 = specialinvoke $r5.<org.simpleframework.xml.core.Primitive: java.lang.Object readTemplate(java.lang.String,java.lang.Class)>($r1, $r3);

        return $r0;
    }

    public java.lang.Object read(org.simpleframework.xml.stream.InputNode, java.lang.Object) throws java.lang.Exception
    {
        org.simpleframework.xml.strategy.Type $r0;
        java.lang.Object[] $r1;
        java.lang.Class $r2;
        org.simpleframework.xml.core.PersistenceException $r3;
        java.lang.Object $r4, $r7;
        org.simpleframework.xml.stream.InputNode $r5;
        org.simpleframework.xml.core.Primitive $r6;

        $r6 := @this: org.simpleframework.xml.core.Primitive;

        $r5 := @parameter0: org.simpleframework.xml.stream.InputNode;

        $r4 := @parameter1: java.lang.Object;

        if $r4 == null goto label1;

        $r3 = new org.simpleframework.xml.core.PersistenceException;

        $r1 = newarray (java.lang.Object)[2];

        $r2 = $r6.<org.simpleframework.xml.core.Primitive: java.lang.Class expect>;

        $r1[0] = $r2;

        $r0 = $r6.<org.simpleframework.xml.core.Primitive: org.simpleframework.xml.strategy.Type type>;

        $r1[1] = $r0;

        specialinvoke $r3.<org.simpleframework.xml.core.PersistenceException: void <init>(java.lang.String,java.lang.Object[])>("Can not read existing %s for %s", $r1);

        throw $r3;

     label1:
        $r7 = virtualinvoke $r6.<org.simpleframework.xml.core.Primitive: java.lang.Object read(org.simpleframework.xml.stream.InputNode)>($r5);

        return $r7;
    }

    public boolean validate(org.simpleframework.xml.stream.InputNode) throws java.lang.Exception
    {
        boolean $z0;
        org.simpleframework.xml.stream.InputNode $r0;
        org.simpleframework.xml.core.Primitive $r1;

        $r1 := @this: org.simpleframework.xml.core.Primitive;

        $r0 := @parameter0: org.simpleframework.xml.stream.InputNode;

        $z0 = interfaceinvoke $r0.<org.simpleframework.xml.stream.InputNode: boolean isElement()>();

        if $z0 == 0 goto label2;

        specialinvoke $r1.<org.simpleframework.xml.core.Primitive: boolean validateElement(org.simpleframework.xml.stream.InputNode)>($r0);

     label1:
        return 1;

     label2:
        interfaceinvoke $r0.<org.simpleframework.xml.stream.InputNode: java.lang.String getValue()>();

        goto label1;
    }

    public void write(org.simpleframework.xml.stream.OutputNode, java.lang.Object) throws java.lang.Exception
    {
        java.lang.String $r0;
        org.simpleframework.xml.core.PrimitiveFactory $r1;
        java.lang.Object $r2;
        org.simpleframework.xml.stream.OutputNode $r3;
        org.simpleframework.xml.core.Primitive $r4;

        $r4 := @this: org.simpleframework.xml.core.Primitive;

        $r3 := @parameter0: org.simpleframework.xml.stream.OutputNode;

        $r2 := @parameter1: java.lang.Object;

        $r1 = $r4.<org.simpleframework.xml.core.Primitive: org.simpleframework.xml.core.PrimitiveFactory factory>;

        $r0 = virtualinvoke $r1.<org.simpleframework.xml.core.PrimitiveFactory: java.lang.String getText(java.lang.Object)>($r2);

        if $r0 == null goto label1;

        interfaceinvoke $r3.<org.simpleframework.xml.stream.OutputNode: void setValue(java.lang.String)>($r0);

        return;

     label1:
        return;
    }
}
