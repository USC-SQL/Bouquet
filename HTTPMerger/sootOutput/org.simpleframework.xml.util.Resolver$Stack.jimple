class org.simpleframework.xml.util.Resolver$Stack extends java.util.LinkedList
{
    final org.simpleframework.xml.util.Resolver this$0;

    private void <init>(org.simpleframework.xml.util.Resolver)
    {
        org.simpleframework.xml.util.Resolver $r0;
        org.simpleframework.xml.util.Resolver$Stack $r1;

        $r1 := @this: org.simpleframework.xml.util.Resolver$Stack;

        $r0 := @parameter0: org.simpleframework.xml.util.Resolver;

        $r1.<org.simpleframework.xml.util.Resolver$Stack: org.simpleframework.xml.util.Resolver this$0> = $r0;

        specialinvoke $r1.<java.util.LinkedList: void <init>()>();

        return;
    }

    void <init>(org.simpleframework.xml.util.Resolver, org.simpleframework.xml.util.Resolver$1)
    {
        org.simpleframework.xml.util.Resolver$1 $r0;
        org.simpleframework.xml.util.Resolver $r1;
        org.simpleframework.xml.util.Resolver$Stack $r2;

        $r2 := @this: org.simpleframework.xml.util.Resolver$Stack;

        $r1 := @parameter0: org.simpleframework.xml.util.Resolver;

        $r0 := @parameter1: org.simpleframework.xml.util.Resolver$1;

        specialinvoke $r2.<org.simpleframework.xml.util.Resolver$Stack: void <init>(org.simpleframework.xml.util.Resolver)>($r1);

        return;
    }

    public void purge(int)
    {
        org.simpleframework.xml.util.Resolver$Cache $r0;
        org.simpleframework.xml.util.Resolver $r1;
        int $i0;
        org.simpleframework.xml.util.Resolver$Stack $r2;

        $r2 := @this: org.simpleframework.xml.util.Resolver$Stack;

        $i0 := @parameter0: int;

        $r1 = $r2.<org.simpleframework.xml.util.Resolver$Stack: org.simpleframework.xml.util.Resolver this$0>;

        $r0 = staticinvoke <org.simpleframework.xml.util.Resolver: org.simpleframework.xml.util.Resolver$Cache access$100(org.simpleframework.xml.util.Resolver)>($r1);

        virtualinvoke $r0.<org.simpleframework.xml.util.Resolver$Cache: void clear()>();

        virtualinvoke $r2.<org.simpleframework.xml.util.Resolver$Stack: java.lang.Object remove(int)>($i0);

        return;
    }

    public void push(org.simpleframework.xml.util.Match)
    {
        org.simpleframework.xml.util.Resolver$Cache $r0;
        org.simpleframework.xml.util.Resolver $r1;
        org.simpleframework.xml.util.Match $r2;
        org.simpleframework.xml.util.Resolver$Stack $r3;

        $r3 := @this: org.simpleframework.xml.util.Resolver$Stack;

        $r2 := @parameter0: org.simpleframework.xml.util.Match;

        $r1 = $r3.<org.simpleframework.xml.util.Resolver$Stack: org.simpleframework.xml.util.Resolver this$0>;

        $r0 = staticinvoke <org.simpleframework.xml.util.Resolver: org.simpleframework.xml.util.Resolver$Cache access$100(org.simpleframework.xml.util.Resolver)>($r1);

        virtualinvoke $r0.<org.simpleframework.xml.util.Resolver$Cache: void clear()>();

        virtualinvoke $r3.<org.simpleframework.xml.util.Resolver$Stack: void addFirst(java.lang.Object)>($r2);

        return;
    }

    public java.util.Iterator sequence()
    {
        org.simpleframework.xml.util.Resolver$Stack$Sequence $r0;
        org.simpleframework.xml.util.Resolver$Stack $r1;

        $r1 := @this: org.simpleframework.xml.util.Resolver$Stack;

        $r0 = new org.simpleframework.xml.util.Resolver$Stack$Sequence;

        specialinvoke $r0.<org.simpleframework.xml.util.Resolver$Stack$Sequence: void <init>(org.simpleframework.xml.util.Resolver$Stack)>($r1);

        return $r0;
    }
}
