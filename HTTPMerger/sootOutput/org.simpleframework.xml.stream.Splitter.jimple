abstract class org.simpleframework.xml.stream.Splitter extends java.lang.Object
{
    protected java.lang.StringBuilder builder;
    protected int count;
    protected int off;
    protected char[] text;

    public void <init>(java.lang.String)
    {
        int $i0;
        char[] $r0, $r4;
        java.lang.StringBuilder $r1;
        java.lang.String $r2;
        org.simpleframework.xml.stream.Splitter $r3;

        $r3 := @this: org.simpleframework.xml.stream.Splitter;

        $r2 := @parameter0: java.lang.String;

        specialinvoke $r3.<java.lang.Object: void <init>()>();

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r3.<org.simpleframework.xml.stream.Splitter: java.lang.StringBuilder builder> = $r1;

        $r0 = virtualinvoke $r2.<java.lang.String: char[] toCharArray()>();

        $r3.<org.simpleframework.xml.stream.Splitter: char[] text> = $r0;

        $r4 = $r3.<org.simpleframework.xml.stream.Splitter: char[] text>;

        $i0 = lengthof $r4;

        $r3.<org.simpleframework.xml.stream.Splitter: int count> = $i0;

        return;
    }

    private boolean acronym()
    {
        char[] $r0, $r2, $r3;
        boolean $z0, $z1;
        int $i0, $i1, $i2, $i3, $i5, $i6, $i8, $i9;
        char $c4, $c7;
        org.simpleframework.xml.stream.Splitter $r1;

        $r1 := @this: org.simpleframework.xml.stream.Splitter;

        $i0 = $r1.<org.simpleframework.xml.stream.Splitter: int off>;

        $i1 = 0;

     label1:
        $i2 = $r1.<org.simpleframework.xml.stream.Splitter: int count>;

        if $i0 >= $i2 goto label2;

        $r0 = $r1.<org.simpleframework.xml.stream.Splitter: char[] text>;

        $c4 = $r0[$i0];

        $z0 = specialinvoke $r1.<org.simpleframework.xml.stream.Splitter: boolean isUpper(char)>($c4);

        if $z0 == 0 goto label2;

        $i1 = $i1 + 1;

        $i0 = $i0 + 1;

        goto label1;

     label2:
        if $i1 <= 1 goto label4;

        $i5 = $r1.<org.simpleframework.xml.stream.Splitter: int count>;

        if $i0 >= $i5 goto label3;

        $r2 = $r1.<org.simpleframework.xml.stream.Splitter: char[] text>;

        $i6 = $i0 + -1;

        $c7 = $r2[$i6];

        $z1 = specialinvoke $r1.<org.simpleframework.xml.stream.Splitter: boolean isUpper(char)>($c7);

        if $z1 == 0 goto label3;

        $i0 = $i0 + -1;

     label3:
        $r3 = $r1.<org.simpleframework.xml.stream.Splitter: char[] text>;

        $i3 = $r1.<org.simpleframework.xml.stream.Splitter: int off>;

        $i8 = $r1.<org.simpleframework.xml.stream.Splitter: int off>;

        $i9 = $i0 - $i8;

        virtualinvoke $r1.<org.simpleframework.xml.stream.Splitter: void commit(char[],int,int)>($r3, $i3, $i9);

        $r1.<org.simpleframework.xml.stream.Splitter: int off> = $i0;

     label4:
        if $i1 <= 1 goto label5;

        return 1;

     label5:
        return 0;
    }

    private boolean isDigit(char)
    {
        boolean $z0;
        char $c0;
        org.simpleframework.xml.stream.Splitter $r0;

        $r0 := @this: org.simpleframework.xml.stream.Splitter;

        $c0 := @parameter0: char;

        $z0 = staticinvoke <java.lang.Character: boolean isDigit(char)>($c0);

        return $z0;
    }

    private boolean isLetter(char)
    {
        boolean $z0;
        char $c0;
        org.simpleframework.xml.stream.Splitter $r0;

        $r0 := @this: org.simpleframework.xml.stream.Splitter;

        $c0 := @parameter0: char;

        $z0 = staticinvoke <java.lang.Character: boolean isLetter(char)>($c0);

        return $z0;
    }

    private boolean isSpecial(char)
    {
        boolean $z0;
        char $c0;
        org.simpleframework.xml.stream.Splitter $r0;

        $r0 := @this: org.simpleframework.xml.stream.Splitter;

        $c0 := @parameter0: char;

        $z0 = staticinvoke <java.lang.Character: boolean isLetterOrDigit(char)>($c0);

        if $z0 != 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    private boolean isUpper(char)
    {
        boolean $z0;
        char $c0;
        org.simpleframework.xml.stream.Splitter $r0;

        $r0 := @this: org.simpleframework.xml.stream.Splitter;

        $c0 := @parameter0: char;

        $z0 = staticinvoke <java.lang.Character: boolean isUpperCase(char)>($c0);

        return $z0;
    }

    private boolean number()
    {
        char[] $r0, $r2;
        boolean $z0;
        int $i0, $i1, $i2, $i3, $i5, $i6;
        char $c4;
        org.simpleframework.xml.stream.Splitter $r1;

        $r1 := @this: org.simpleframework.xml.stream.Splitter;

        $i0 = $r1.<org.simpleframework.xml.stream.Splitter: int off>;

        $i1 = 0;

     label1:
        $i2 = $r1.<org.simpleframework.xml.stream.Splitter: int count>;

        if $i0 >= $i2 goto label2;

        $r0 = $r1.<org.simpleframework.xml.stream.Splitter: char[] text>;

        $c4 = $r0[$i0];

        $z0 = specialinvoke $r1.<org.simpleframework.xml.stream.Splitter: boolean isDigit(char)>($c4);

        if $z0 == 0 goto label2;

        $i1 = $i1 + 1;

        $i0 = $i0 + 1;

        goto label1;

     label2:
        if $i1 <= 0 goto label3;

        $r2 = $r1.<org.simpleframework.xml.stream.Splitter: char[] text>;

        $i5 = $r1.<org.simpleframework.xml.stream.Splitter: int off>;

        $i3 = $r1.<org.simpleframework.xml.stream.Splitter: int off>;

        $i6 = $i0 - $i3;

        virtualinvoke $r1.<org.simpleframework.xml.stream.Splitter: void commit(char[],int,int)>($r2, $i5, $i6);

     label3:
        $r1.<org.simpleframework.xml.stream.Splitter: int off> = $i0;

        if $i1 <= 0 goto label4;

        return 1;

     label4:
        return 0;
    }

    private void token()
    {
        char[] $r0, $r2, $r3;
        boolean $z0, $z1;
        int $i0, $i1, $i2, $i4, $i5, $i6, $i7, $i8, $i9, $i10;
        char $c3;
        org.simpleframework.xml.stream.Splitter $r1;

        $r1 := @this: org.simpleframework.xml.stream.Splitter;

        $i0 = $r1.<org.simpleframework.xml.stream.Splitter: int off>;

     label1:
        $i1 = $r1.<org.simpleframework.xml.stream.Splitter: int count>;

        if $i0 >= $i1 goto label2;

        $r0 = $r1.<org.simpleframework.xml.stream.Splitter: char[] text>;

        $c3 = $r0[$i0];

        $z0 = specialinvoke $r1.<org.simpleframework.xml.stream.Splitter: boolean isLetter(char)>($c3);

        if $z0 != 0 goto label4;

     label2:
        $i2 = $r1.<org.simpleframework.xml.stream.Splitter: int off>;

        if $i0 <= $i2 goto label3;

        $r2 = $r1.<org.simpleframework.xml.stream.Splitter: char[] text>;

        $i4 = $r1.<org.simpleframework.xml.stream.Splitter: int off>;

        $i5 = $r1.<org.simpleframework.xml.stream.Splitter: int off>;

        $i6 = $i0 - $i5;

        virtualinvoke $r1.<org.simpleframework.xml.stream.Splitter: void parse(char[],int,int)>($r2, $i4, $i6);

        $r3 = $r1.<org.simpleframework.xml.stream.Splitter: char[] text>;

        $i7 = $r1.<org.simpleframework.xml.stream.Splitter: int off>;

        $i8 = $r1.<org.simpleframework.xml.stream.Splitter: int off>;

        $i9 = $i0 - $i8;

        virtualinvoke $r1.<org.simpleframework.xml.stream.Splitter: void commit(char[],int,int)>($r3, $i7, $i9);

     label3:
        $r1.<org.simpleframework.xml.stream.Splitter: int off> = $i0;

        return;

     label4:
        $i10 = $r1.<org.simpleframework.xml.stream.Splitter: int off>;

        if $i0 <= $i10 goto label5;

        $z1 = specialinvoke $r1.<org.simpleframework.xml.stream.Splitter: boolean isUpper(char)>($c3);

        if $z1 != 0 goto label2;

     label5:
        $i0 = $i0 + 1;

        goto label1;
    }

    protected abstract void commit(char[], int, int);

    protected abstract void parse(char[], int, int);

    public java.lang.String process()
    {
        java.lang.String $r0;
        java.lang.StringBuilder $r1;
        char[] $r2;
        boolean $z0, $z1;
        int $i0, $i1, $i3, $i4, $i5, $i6, $i7;
        char $c2;
        org.simpleframework.xml.stream.Splitter $r3;

        $r3 := @this: org.simpleframework.xml.stream.Splitter;

     label1:
        $i0 = $r3.<org.simpleframework.xml.stream.Splitter: int off>;

        $i1 = $r3.<org.simpleframework.xml.stream.Splitter: int count>;

        if $i0 >= $i1 goto label5;

     label2:
        $i3 = $r3.<org.simpleframework.xml.stream.Splitter: int off>;

        $i4 = $r3.<org.simpleframework.xml.stream.Splitter: int count>;

        if $i3 >= $i4 goto label3;

        $r2 = $r3.<org.simpleframework.xml.stream.Splitter: char[] text>;

        $i5 = $r3.<org.simpleframework.xml.stream.Splitter: int off>;

        $c2 = $r2[$i5];

        $z0 = specialinvoke $r3.<org.simpleframework.xml.stream.Splitter: boolean isSpecial(char)>($c2);

        if $z0 != 0 goto label4;

     label3:
        $z1 = specialinvoke $r3.<org.simpleframework.xml.stream.Splitter: boolean acronym()>();

        if $z1 != 0 goto label1;

        specialinvoke $r3.<org.simpleframework.xml.stream.Splitter: void token()>();

        specialinvoke $r3.<org.simpleframework.xml.stream.Splitter: boolean number()>();

        goto label1;

     label4:
        $i6 = $r3.<org.simpleframework.xml.stream.Splitter: int off>;

        $i7 = $i6 + 1;

        $r3.<org.simpleframework.xml.stream.Splitter: int off> = $i7;

        goto label2;

     label5:
        $r1 = $r3.<org.simpleframework.xml.stream.Splitter: java.lang.StringBuilder builder>;

        $r0 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r0;
    }

    protected char toLower(char)
    {
        char $c0, $c1;
        org.simpleframework.xml.stream.Splitter $r0;

        $r0 := @this: org.simpleframework.xml.stream.Splitter;

        $c0 := @parameter0: char;

        $c1 = staticinvoke <java.lang.Character: char toLowerCase(char)>($c0);

        return $c1;
    }

    protected char toUpper(char)
    {
        char $c0, $c1;
        org.simpleframework.xml.stream.Splitter $r0;

        $r0 := @this: org.simpleframework.xml.stream.Splitter;

        $c0 := @parameter0: char;

        $c1 = staticinvoke <java.lang.Character: char toUpperCase(char)>($c0);

        return $c1;
    }
}
