public class org.simpleframework.xml.transform.Transformer extends java.lang.Object
{
    private final org.simpleframework.xml.transform.TransformCache cache;
    private final java.util.Map error;
    private final org.simpleframework.xml.transform.Matcher matcher;

    public void <init>(org.simpleframework.xml.transform.Matcher)
    {
        org.simpleframework.xml.transform.TransformCache $r0;
        java.util.concurrent.ConcurrentHashMap $r1;
        org.simpleframework.xml.transform.DefaultMatcher $r2;
        org.simpleframework.xml.transform.Matcher $r3;
        org.simpleframework.xml.transform.Transformer $r4;

        $r4 := @this: org.simpleframework.xml.transform.Transformer;

        $r3 := @parameter0: org.simpleframework.xml.transform.Matcher;

        specialinvoke $r4.<java.lang.Object: void <init>()>();

        $r2 = new org.simpleframework.xml.transform.DefaultMatcher;

        specialinvoke $r2.<org.simpleframework.xml.transform.DefaultMatcher: void <init>(org.simpleframework.xml.transform.Matcher)>($r3);

        $r4.<org.simpleframework.xml.transform.Transformer: org.simpleframework.xml.transform.Matcher matcher> = $r2;

        $r1 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r1.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        $r4.<org.simpleframework.xml.transform.Transformer: java.util.Map error> = $r1;

        $r0 = new org.simpleframework.xml.transform.TransformCache;

        specialinvoke $r0.<org.simpleframework.xml.transform.TransformCache: void <init>()>();

        $r4.<org.simpleframework.xml.transform.Transformer: org.simpleframework.xml.transform.TransformCache cache> = $r0;

        return;
    }

    private org.simpleframework.xml.transform.Transform lookup(java.lang.Class) throws java.lang.Exception
    {
        org.simpleframework.xml.transform.Transform $r0, $r6;
        java.lang.Object $r1;
        org.simpleframework.xml.transform.TransformCache $r2;
        boolean $z0;
        java.util.Map $r3;
        java.lang.Class $r4;
        org.simpleframework.xml.transform.Transformer $r5;

        $r5 := @this: org.simpleframework.xml.transform.Transformer;

        $r4 := @parameter0: java.lang.Class;

        $r3 = $r5.<org.simpleframework.xml.transform.Transformer: java.util.Map error>;

        $z0 = interfaceinvoke $r3.<java.util.Map: boolean containsKey(java.lang.Object)>($r4);

        if $z0 != 0 goto label2;

        $r2 = $r5.<org.simpleframework.xml.transform.Transformer: org.simpleframework.xml.transform.TransformCache cache>;

        $r1 = virtualinvoke $r2.<org.simpleframework.xml.transform.TransformCache: java.lang.Object get(java.lang.Object)>($r4);

        $r0 = (org.simpleframework.xml.transform.Transform) $r1;

        if $r0 == null goto label1;

        return $r0;

     label1:
        $r6 = specialinvoke $r5.<org.simpleframework.xml.transform.Transformer: org.simpleframework.xml.transform.Transform match(java.lang.Class)>($r4);

        return $r6;

     label2:
        return null;
    }

    private org.simpleframework.xml.transform.Transform match(java.lang.Class) throws java.lang.Exception
    {
        java.util.Map $r0;
        org.simpleframework.xml.transform.TransformCache $r1;
        org.simpleframework.xml.transform.Transform $r2;
        org.simpleframework.xml.transform.Matcher $r3;
        java.lang.Class $r4;
        org.simpleframework.xml.transform.Transformer $r5;

        $r5 := @this: org.simpleframework.xml.transform.Transformer;

        $r4 := @parameter0: java.lang.Class;

        $r3 = $r5.<org.simpleframework.xml.transform.Transformer: org.simpleframework.xml.transform.Matcher matcher>;

        $r2 = interfaceinvoke $r3.<org.simpleframework.xml.transform.Matcher: org.simpleframework.xml.transform.Transform match(java.lang.Class)>($r4);

        if $r2 == null goto label1;

        $r1 = $r5.<org.simpleframework.xml.transform.Transformer: org.simpleframework.xml.transform.TransformCache cache>;

        virtualinvoke $r1.<org.simpleframework.xml.transform.TransformCache: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, $r2);

        return $r2;

     label1:
        $r0 = $r5.<org.simpleframework.xml.transform.Transformer: java.util.Map error>;

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, $r5);

        return $r2;
    }

    public java.lang.Object read(java.lang.String, java.lang.Class) throws java.lang.Exception
    {
        java.lang.Object $r0;
        java.lang.Object[] $r1;
        org.simpleframework.xml.transform.Transform $r2;
        org.simpleframework.xml.transform.TransformException $r3;
        java.lang.Class $r4;
        java.lang.String $r5;
        org.simpleframework.xml.transform.Transformer $r6;

        $r6 := @this: org.simpleframework.xml.transform.Transformer;

        $r5 := @parameter0: java.lang.String;

        $r4 := @parameter1: java.lang.Class;

        $r2 = specialinvoke $r6.<org.simpleframework.xml.transform.Transformer: org.simpleframework.xml.transform.Transform lookup(java.lang.Class)>($r4);

        if $r2 != null goto label1;

        $r3 = new org.simpleframework.xml.transform.TransformException;

        $r1 = newarray (java.lang.Object)[1];

        $r1[0] = $r4;

        specialinvoke $r3.<org.simpleframework.xml.transform.TransformException: void <init>(java.lang.String,java.lang.Object[])>("Transform of %s not supported", $r1);

        throw $r3;

     label1:
        $r0 = interfaceinvoke $r2.<org.simpleframework.xml.transform.Transform: java.lang.Object read(java.lang.String)>($r5);

        return $r0;
    }

    public boolean valid(java.lang.Class) throws java.lang.Exception
    {
        org.simpleframework.xml.transform.Transform $r0;
        java.lang.Class $r1;
        org.simpleframework.xml.transform.Transformer $r2;

        $r2 := @this: org.simpleframework.xml.transform.Transformer;

        $r1 := @parameter0: java.lang.Class;

        $r0 = specialinvoke $r2.<org.simpleframework.xml.transform.Transformer: org.simpleframework.xml.transform.Transform lookup(java.lang.Class)>($r1);

        if $r0 == null goto label1;

        return 1;

     label1:
        return 0;
    }

    public java.lang.String write(java.lang.Object, java.lang.Class) throws java.lang.Exception
    {
        java.lang.String $r0;
        java.lang.Object[] $r1;
        org.simpleframework.xml.transform.Transform $r2;
        org.simpleframework.xml.transform.TransformException $r3;
        java.lang.Class $r4;
        java.lang.Object $r5;
        org.simpleframework.xml.transform.Transformer $r6;

        $r6 := @this: org.simpleframework.xml.transform.Transformer;

        $r5 := @parameter0: java.lang.Object;

        $r4 := @parameter1: java.lang.Class;

        $r2 = specialinvoke $r6.<org.simpleframework.xml.transform.Transformer: org.simpleframework.xml.transform.Transform lookup(java.lang.Class)>($r4);

        if $r2 != null goto label1;

        $r3 = new org.simpleframework.xml.transform.TransformException;

        $r1 = newarray (java.lang.Object)[1];

        $r1[0] = $r4;

        specialinvoke $r3.<org.simpleframework.xml.transform.TransformException: void <init>(java.lang.String,java.lang.Object[])>("Transform of %s not supported", $r1);

        throw $r3;

     label1:
        $r0 = interfaceinvoke $r2.<org.simpleframework.xml.transform.Transform: java.lang.String write(java.lang.Object)>($r5);

        return $r0;
    }
}
