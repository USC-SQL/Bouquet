class org.simpleframework.xml.core.ModelMap extends java.util.LinkedHashMap implements java.lang.Iterable
{
    private final java.lang.Class type;

    public void <init>(java.lang.Class)
    {
        java.lang.Class $r0;
        org.simpleframework.xml.core.ModelMap $r1;

        $r1 := @this: org.simpleframework.xml.core.ModelMap;

        $r0 := @parameter0: java.lang.Class;

        specialinvoke $r1.<java.util.LinkedHashMap: void <init>()>();

        $r1.<org.simpleframework.xml.core.ModelMap: java.lang.Class type> = $r0;

        return;
    }

    public org.simpleframework.xml.core.ModelMap getModels() throws java.lang.Exception
    {
        java.lang.Object[] $r0;
        org.simpleframework.xml.core.PathException $r1;
        org.simpleframework.xml.core.ModelList $r2;
        java.lang.String $r3;
        java.lang.Object $r4, $r10;
        boolean $z0, $z1;
        java.util.Iterator $r5;
        java.util.Set $r6;
        java.lang.Class $r7, $r11;
        org.simpleframework.xml.core.ModelMap $r8, $r9;

        $r8 := @this: org.simpleframework.xml.core.ModelMap;

        $r9 = new org.simpleframework.xml.core.ModelMap;

        $r7 = $r8.<org.simpleframework.xml.core.ModelMap: java.lang.Class type>;

        specialinvoke $r9.<org.simpleframework.xml.core.ModelMap: void <init>(java.lang.Class)>($r7);

        $r6 = virtualinvoke $r8.<org.simpleframework.xml.core.ModelMap: java.util.Set keySet()>();

        $r5 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r4 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        $r3 = (java.lang.String) $r4;

        $r10 = virtualinvoke $r8.<org.simpleframework.xml.core.ModelMap: java.lang.Object get(java.lang.Object)>($r3);

        $r2 = (org.simpleframework.xml.core.ModelList) $r10;

        if $r2 == null goto label2;

        $r2 = virtualinvoke $r2.<org.simpleframework.xml.core.ModelList: org.simpleframework.xml.core.ModelList build()>();

     label2:
        $z1 = virtualinvoke $r9.<org.simpleframework.xml.core.ModelMap: boolean containsKey(java.lang.Object)>($r3);

        if $z1 == 0 goto label3;

        $r1 = new org.simpleframework.xml.core.PathException;

        $r0 = newarray (java.lang.Object)[2];

        $r0[0] = $r3;

        $r11 = $r8.<org.simpleframework.xml.core.ModelMap: java.lang.Class type>;

        $r0[1] = $r11;

        specialinvoke $r1.<org.simpleframework.xml.core.PathException: void <init>(java.lang.String,java.lang.Object[])>("Path with name \'%s\' is a duplicate in %s ", $r0);

        throw $r1;

     label3:
        virtualinvoke $r9.<org.simpleframework.xml.core.ModelMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, $r2);

        goto label1;

     label4:
        return $r9;
    }

    public java.util.Iterator iterator()
    {
        java.util.Iterator $r0;
        java.util.Collection $r1;
        org.simpleframework.xml.core.ModelMap $r2;

        $r2 := @this: org.simpleframework.xml.core.ModelMap;

        $r1 = virtualinvoke $r2.<org.simpleframework.xml.core.ModelMap: java.util.Collection values()>();

        $r0 = interfaceinvoke $r1.<java.util.Collection: java.util.Iterator iterator()>();

        return $r0;
    }

    public org.simpleframework.xml.core.Model lookup(java.lang.String, int)
    {
        org.simpleframework.xml.core.Model $r0;
        org.simpleframework.xml.core.ModelList $r1;
        java.lang.Object $r2;
        int $i0;
        java.lang.String $r3;
        org.simpleframework.xml.core.ModelMap $r4;

        $r4 := @this: org.simpleframework.xml.core.ModelMap;

        $r3 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        $r2 = virtualinvoke $r4.<org.simpleframework.xml.core.ModelMap: java.lang.Object get(java.lang.Object)>($r3);

        $r1 = (org.simpleframework.xml.core.ModelList) $r2;

        if $r1 == null goto label1;

        $r0 = virtualinvoke $r1.<org.simpleframework.xml.core.ModelList: org.simpleframework.xml.core.Model lookup(int)>($i0);

        return $r0;

     label1:
        return null;
    }

    public void register(java.lang.String, org.simpleframework.xml.core.Model)
    {
        org.simpleframework.xml.core.ModelList $r0;
        java.lang.Object $r1;
        org.simpleframework.xml.core.Model $r2;
        java.lang.String $r3;
        org.simpleframework.xml.core.ModelMap $r4;

        $r4 := @this: org.simpleframework.xml.core.ModelMap;

        $r3 := @parameter0: java.lang.String;

        $r2 := @parameter1: org.simpleframework.xml.core.Model;

        $r1 = virtualinvoke $r4.<org.simpleframework.xml.core.ModelMap: java.lang.Object get(java.lang.Object)>($r3);

        $r0 = (org.simpleframework.xml.core.ModelList) $r1;

        if $r0 != null goto label1;

        $r0 = new org.simpleframework.xml.core.ModelList;

        specialinvoke $r0.<org.simpleframework.xml.core.ModelList: void <init>()>();

        virtualinvoke $r4.<org.simpleframework.xml.core.ModelMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, $r0);

     label1:
        virtualinvoke $r0.<org.simpleframework.xml.core.ModelList: void register(org.simpleframework.xml.core.Model)>($r2);

        return;
    }
}
