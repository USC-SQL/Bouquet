class org.simpleframework.xml.core.FieldScanner extends org.simpleframework.xml.core.ContactList
{
    private final org.simpleframework.xml.DefaultType access;
    private final org.simpleframework.xml.core.ContactMap done;
    private final org.simpleframework.xml.core.AnnotationFactory factory;
    private final org.simpleframework.xml.core.Hierarchy hierarchy;

    public void <init>(java.lang.Class) throws java.lang.Exception
    {
        java.lang.Class $r0;
        org.simpleframework.xml.core.FieldScanner $r1;

        $r1 := @this: org.simpleframework.xml.core.FieldScanner;

        $r0 := @parameter0: java.lang.Class;

        specialinvoke $r1.<org.simpleframework.xml.core.FieldScanner: void <init>(java.lang.Class,org.simpleframework.xml.DefaultType)>($r0, null);

        return;
    }

    public void <init>(java.lang.Class, org.simpleframework.xml.DefaultType) throws java.lang.Exception
    {
        org.simpleframework.xml.DefaultType $r0;
        java.lang.Class $r1;
        org.simpleframework.xml.core.FieldScanner $r2;

        $r2 := @this: org.simpleframework.xml.core.FieldScanner;

        $r1 := @parameter0: java.lang.Class;

        $r0 := @parameter1: org.simpleframework.xml.DefaultType;

        specialinvoke $r2.<org.simpleframework.xml.core.FieldScanner: void <init>(java.lang.Class,org.simpleframework.xml.DefaultType,boolean)>($r1, $r0, 1);

        return;
    }

    public void <init>(java.lang.Class, org.simpleframework.xml.DefaultType, boolean) throws java.lang.Exception
    {
        org.simpleframework.xml.core.ContactMap $r0;
        org.simpleframework.xml.core.Hierarchy $r1;
        org.simpleframework.xml.core.AnnotationFactory $r2;
        boolean $z0;
        org.simpleframework.xml.DefaultType $r3;
        java.lang.Class $r4;
        org.simpleframework.xml.core.FieldScanner $r5;

        $r5 := @this: org.simpleframework.xml.core.FieldScanner;

        $r4 := @parameter0: java.lang.Class;

        $r3 := @parameter1: org.simpleframework.xml.DefaultType;

        $z0 := @parameter2: boolean;

        specialinvoke $r5.<org.simpleframework.xml.core.ContactList: void <init>()>();

        $r2 = new org.simpleframework.xml.core.AnnotationFactory;

        specialinvoke $r2.<org.simpleframework.xml.core.AnnotationFactory: void <init>(boolean)>($z0);

        $r5.<org.simpleframework.xml.core.FieldScanner: org.simpleframework.xml.core.AnnotationFactory factory> = $r2;

        $r1 = new org.simpleframework.xml.core.Hierarchy;

        specialinvoke $r1.<org.simpleframework.xml.core.Hierarchy: void <init>(java.lang.Class)>($r4);

        $r5.<org.simpleframework.xml.core.FieldScanner: org.simpleframework.xml.core.Hierarchy hierarchy> = $r1;

        $r0 = new org.simpleframework.xml.core.ContactMap;

        specialinvoke $r0.<org.simpleframework.xml.core.ContactMap: void <init>()>();

        $r5.<org.simpleframework.xml.core.FieldScanner: org.simpleframework.xml.core.ContactMap done> = $r0;

        $r5.<org.simpleframework.xml.core.FieldScanner: org.simpleframework.xml.DefaultType access> = $r3;

        specialinvoke $r5.<org.simpleframework.xml.core.FieldScanner: void scan(java.lang.Class)>($r4);

        return;
    }

    private void build()
    {
        org.simpleframework.xml.core.Contact $r0;
        java.lang.Object $r1;
        boolean $z0;
        java.util.Iterator $r2;
        org.simpleframework.xml.core.ContactMap $r3;
        org.simpleframework.xml.core.FieldScanner $r4;

        $r4 := @this: org.simpleframework.xml.core.FieldScanner;

        $r3 = $r4.<org.simpleframework.xml.core.FieldScanner: org.simpleframework.xml.core.ContactMap done>;

        $r2 = virtualinvoke $r3.<org.simpleframework.xml.core.ContactMap: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r1 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $r0 = (org.simpleframework.xml.core.Contact) $r1;

        virtualinvoke $r4.<org.simpleframework.xml.core.FieldScanner: boolean add(java.lang.Object)>($r0);

        goto label1;

     label2:
        return;
    }

    private boolean isStatic(java.lang.reflect.Field)
    {
        boolean $z0;
        int $i0;
        java.lang.reflect.Field $r0;
        org.simpleframework.xml.core.FieldScanner $r1;

        $r1 := @this: org.simpleframework.xml.core.FieldScanner;

        $r0 := @parameter0: java.lang.reflect.Field;

        $i0 = virtualinvoke $r0.<java.lang.reflect.Field: int getModifiers()>();

        $z0 = staticinvoke <java.lang.reflect.Modifier: boolean isStatic(int)>($i0);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    private void process(java.lang.reflect.Field, java.lang.Class) throws java.lang.Exception
    {
        java.lang.annotation.Annotation $r0;
        org.simpleframework.xml.core.AnnotationFactory $r1;
        java.lang.Class $r2;
        java.lang.reflect.Field $r3;
        org.simpleframework.xml.core.FieldScanner $r4;

        $r4 := @this: org.simpleframework.xml.core.FieldScanner;

        $r3 := @parameter0: java.lang.reflect.Field;

        $r2 := @parameter1: java.lang.Class;

        $r1 = $r4.<org.simpleframework.xml.core.FieldScanner: org.simpleframework.xml.core.AnnotationFactory factory>;

        $r0 = virtualinvoke $r1.<org.simpleframework.xml.core.AnnotationFactory: java.lang.annotation.Annotation getInstance(java.lang.Class)>($r2);

        if $r0 == null goto label1;

        specialinvoke $r4.<org.simpleframework.xml.core.FieldScanner: void process(java.lang.reflect.Field,java.lang.annotation.Annotation)>($r3, $r0);

        return;

     label1:
        return;
    }

    private void process(java.lang.reflect.Field, java.lang.annotation.Annotation)
    {
        org.simpleframework.xml.core.ContactMap $r0;
        boolean $z0;
        org.simpleframework.xml.core.FieldContact $r1;
        java.lang.annotation.Annotation $r2;
        java.lang.reflect.Field $r3;
        org.simpleframework.xml.core.FieldScanner $r4;

        $r4 := @this: org.simpleframework.xml.core.FieldScanner;

        $r3 := @parameter0: java.lang.reflect.Field;

        $r2 := @parameter1: java.lang.annotation.Annotation;

        $r1 = new org.simpleframework.xml.core.FieldContact;

        specialinvoke $r1.<org.simpleframework.xml.core.FieldContact: void <init>(java.lang.reflect.Field,java.lang.annotation.Annotation)>($r3, $r2);

        $z0 = virtualinvoke $r3.<java.lang.reflect.Field: boolean isAccessible()>();

        if $z0 != 0 goto label1;

        virtualinvoke $r3.<java.lang.reflect.Field: void setAccessible(boolean)>(1);

     label1:
        $r0 = $r4.<org.simpleframework.xml.core.FieldScanner: org.simpleframework.xml.core.ContactMap done>;

        virtualinvoke $r0.<org.simpleframework.xml.core.ContactMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, $r1);

        return;
    }

    private void remove(java.lang.reflect.Field, java.lang.annotation.Annotation)
    {
        org.simpleframework.xml.core.ContactMap $r0;
        java.lang.annotation.Annotation $r1;
        java.lang.reflect.Field $r2;
        org.simpleframework.xml.core.FieldScanner $r3;

        $r3 := @this: org.simpleframework.xml.core.FieldScanner;

        $r2 := @parameter0: java.lang.reflect.Field;

        $r1 := @parameter1: java.lang.annotation.Annotation;

        $r0 = $r3.<org.simpleframework.xml.core.FieldScanner: org.simpleframework.xml.core.ContactMap done>;

        virtualinvoke $r0.<org.simpleframework.xml.core.ContactMap: java.lang.Object remove(java.lang.Object)>($r2);

        return;
    }

    private void scan(java.lang.Class) throws java.lang.Exception
    {
        org.simpleframework.xml.DefaultType $r0;
        java.lang.Object $r1, $r9;
        boolean $z0, $z1;
        java.util.Iterator $r2, $r8;
        org.simpleframework.xml.core.Hierarchy $r3, $r7;
        java.lang.Class $r4, $r5, $r10;
        org.simpleframework.xml.core.FieldScanner $r6;

        $r6 := @this: org.simpleframework.xml.core.FieldScanner;

        $r4 := @parameter0: java.lang.Class;

        $r3 = $r6.<org.simpleframework.xml.core.FieldScanner: org.simpleframework.xml.core.Hierarchy hierarchy>;

        $r2 = virtualinvoke $r3.<org.simpleframework.xml.core.Hierarchy: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r1 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (java.lang.Class) $r1;

        $r0 = $r6.<org.simpleframework.xml.core.FieldScanner: org.simpleframework.xml.DefaultType access>;

        specialinvoke $r6.<org.simpleframework.xml.core.FieldScanner: void scan(java.lang.Class,org.simpleframework.xml.DefaultType)>($r5, $r0);

        goto label1;

     label2:
        $r7 = $r6.<org.simpleframework.xml.core.FieldScanner: org.simpleframework.xml.core.Hierarchy hierarchy>;

        $r8 = virtualinvoke $r7.<org.simpleframework.xml.core.Hierarchy: java.util.Iterator iterator()>();

     label3:
        $z1 = interfaceinvoke $r8.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r9 = interfaceinvoke $r8.<java.util.Iterator: java.lang.Object next()>();

        $r10 = (java.lang.Class) $r9;

        specialinvoke $r6.<org.simpleframework.xml.core.FieldScanner: void scan(java.lang.Class,java.lang.Class)>($r10, $r4);

        goto label3;

     label4:
        specialinvoke $r6.<org.simpleframework.xml.core.FieldScanner: void build()>();

        return;
    }

    private void scan(java.lang.Class, java.lang.Class)
    {
        java.lang.reflect.Field[] $r0;
        int $i0, $i1;
        java.lang.reflect.Field $r1;
        java.lang.Class $r2, $r3;
        org.simpleframework.xml.core.FieldScanner $r4;

        $r4 := @this: org.simpleframework.xml.core.FieldScanner;

        $r2 := @parameter0: java.lang.Class;

        $r3 := @parameter1: java.lang.Class;

        $r0 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()>();

        $i1 = lengthof $r0;

        $i0 = 0;

     label1:
        if $i0 >= $i1 goto label2;

        $r1 = $r0[$i0];

        specialinvoke $r4.<org.simpleframework.xml.core.FieldScanner: void scan(java.lang.reflect.Field)>($r1);

        $i0 = $i0 + 1;

        goto label1;

     label2:
        return;
    }

    private void scan(java.lang.Class, org.simpleframework.xml.DefaultType) throws java.lang.Exception
    {
        boolean $z0;
        java.lang.reflect.Field[] $r0;
        int $i0, $i1;
        java.lang.reflect.Field $r1;
        org.simpleframework.xml.DefaultType $r2, $r3;
        java.lang.Class $r4, $r6;
        org.simpleframework.xml.core.FieldScanner $r5;

        $r5 := @this: org.simpleframework.xml.core.FieldScanner;

        $r4 := @parameter0: java.lang.Class;

        $r2 := @parameter1: org.simpleframework.xml.DefaultType;

        $r0 = virtualinvoke $r4.<java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()>();

        $r3 = <org.simpleframework.xml.DefaultType: org.simpleframework.xml.DefaultType FIELD>;

        if $r2 != $r3 goto label3;

        $i1 = lengthof $r0;

        $i0 = 0;

     label1:
        if $i0 >= $i1 goto label4;

        $r1 = $r0[$i0];

        $r6 = virtualinvoke $r1.<java.lang.reflect.Field: java.lang.Class getType()>();

        $z0 = specialinvoke $r5.<org.simpleframework.xml.core.FieldScanner: boolean isStatic(java.lang.reflect.Field)>($r1);

        if $z0 != 0 goto label2;

        specialinvoke $r5.<org.simpleframework.xml.core.FieldScanner: void process(java.lang.reflect.Field,java.lang.Class)>($r1, $r6);

     label2:
        $i0 = $i0 + 1;

        goto label1;

     label3:
        return;

     label4:
        return;
    }

    private void scan(java.lang.reflect.Field)
    {
        java.lang.annotation.Annotation[] $r0;
        java.lang.annotation.Annotation $r1;
        int $i0, $i1;
        java.lang.reflect.Field $r2;
        org.simpleframework.xml.core.FieldScanner $r3;

        $r3 := @this: org.simpleframework.xml.core.FieldScanner;

        $r2 := @parameter0: java.lang.reflect.Field;

        $r0 = virtualinvoke $r2.<java.lang.reflect.Field: java.lang.annotation.Annotation[] getDeclaredAnnotations()>();

        $i1 = lengthof $r0;

        $i0 = 0;

     label1:
        if $i0 >= $i1 goto label2;

        $r1 = $r0[$i0];

        specialinvoke $r3.<org.simpleframework.xml.core.FieldScanner: void scan(java.lang.reflect.Field,java.lang.annotation.Annotation)>($r2, $r1);

        $i0 = $i0 + 1;

        goto label1;

     label2:
        return;
    }

    private void scan(java.lang.reflect.Field, java.lang.annotation.Annotation)
    {
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10;
        java.lang.annotation.Annotation $r0;
        java.lang.reflect.Field $r1;
        org.simpleframework.xml.core.FieldScanner $r2;

        $r2 := @this: org.simpleframework.xml.core.FieldScanner;

        $r1 := @parameter0: java.lang.reflect.Field;

        $r0 := @parameter1: java.lang.annotation.Annotation;

        $z0 = $r0 instanceof org.simpleframework.xml.Attribute;

        if $z0 == 0 goto label01;

        specialinvoke $r2.<org.simpleframework.xml.core.FieldScanner: void process(java.lang.reflect.Field,java.lang.annotation.Annotation)>($r1, $r0);

     label01:
        $z1 = $r0 instanceof org.simpleframework.xml.ElementUnion;

        if $z1 == 0 goto label02;

        specialinvoke $r2.<org.simpleframework.xml.core.FieldScanner: void process(java.lang.reflect.Field,java.lang.annotation.Annotation)>($r1, $r0);

     label02:
        $z2 = $r0 instanceof org.simpleframework.xml.ElementListUnion;

        if $z2 == 0 goto label03;

        specialinvoke $r2.<org.simpleframework.xml.core.FieldScanner: void process(java.lang.reflect.Field,java.lang.annotation.Annotation)>($r1, $r0);

     label03:
        $z3 = $r0 instanceof org.simpleframework.xml.ElementMapUnion;

        if $z3 == 0 goto label04;

        specialinvoke $r2.<org.simpleframework.xml.core.FieldScanner: void process(java.lang.reflect.Field,java.lang.annotation.Annotation)>($r1, $r0);

     label04:
        $z4 = $r0 instanceof org.simpleframework.xml.ElementList;

        if $z4 == 0 goto label05;

        specialinvoke $r2.<org.simpleframework.xml.core.FieldScanner: void process(java.lang.reflect.Field,java.lang.annotation.Annotation)>($r1, $r0);

     label05:
        $z5 = $r0 instanceof org.simpleframework.xml.ElementArray;

        if $z5 == 0 goto label06;

        specialinvoke $r2.<org.simpleframework.xml.core.FieldScanner: void process(java.lang.reflect.Field,java.lang.annotation.Annotation)>($r1, $r0);

     label06:
        $z6 = $r0 instanceof org.simpleframework.xml.ElementMap;

        if $z6 == 0 goto label07;

        specialinvoke $r2.<org.simpleframework.xml.core.FieldScanner: void process(java.lang.reflect.Field,java.lang.annotation.Annotation)>($r1, $r0);

     label07:
        $z7 = $r0 instanceof org.simpleframework.xml.Element;

        if $z7 == 0 goto label08;

        specialinvoke $r2.<org.simpleframework.xml.core.FieldScanner: void process(java.lang.reflect.Field,java.lang.annotation.Annotation)>($r1, $r0);

     label08:
        $z8 = $r0 instanceof org.simpleframework.xml.Transient;

        if $z8 == 0 goto label09;

        specialinvoke $r2.<org.simpleframework.xml.core.FieldScanner: void remove(java.lang.reflect.Field,java.lang.annotation.Annotation)>($r1, $r0);

     label09:
        $z9 = $r0 instanceof org.simpleframework.xml.Version;

        if $z9 == 0 goto label10;

        specialinvoke $r2.<org.simpleframework.xml.core.FieldScanner: void process(java.lang.reflect.Field,java.lang.annotation.Annotation)>($r1, $r0);

     label10:
        $z10 = $r0 instanceof org.simpleframework.xml.Text;

        if $z10 == 0 goto label11;

        specialinvoke $r2.<org.simpleframework.xml.core.FieldScanner: void process(java.lang.reflect.Field,java.lang.annotation.Annotation)>($r1, $r0);

        return;

     label11:
        return;
    }
}
