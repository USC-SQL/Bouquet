class org.simpleframework.xml.core.CompositeList extends java.lang.Object implements org.simpleframework.xml.core.Converter
{
    private final org.simpleframework.xml.strategy.Type entry;
    private final org.simpleframework.xml.core.CollectionFactory factory;
    private final java.lang.String name;
    private final org.simpleframework.xml.core.Traverser root;
    private final org.simpleframework.xml.strategy.Type type;

    public void <init>(org.simpleframework.xml.core.Context, org.simpleframework.xml.strategy.Type, org.simpleframework.xml.strategy.Type, java.lang.String)
    {
        org.simpleframework.xml.core.Traverser $r0;
        org.simpleframework.xml.core.CollectionFactory $r1;
        java.lang.String $r2;
        org.simpleframework.xml.strategy.Type $r3, $r4;
        org.simpleframework.xml.core.Context $r5;
        org.simpleframework.xml.core.CompositeList $r6;

        $r6 := @this: org.simpleframework.xml.core.CompositeList;

        $r5 := @parameter0: org.simpleframework.xml.core.Context;

        $r3 := @parameter1: org.simpleframework.xml.strategy.Type;

        $r4 := @parameter2: org.simpleframework.xml.strategy.Type;

        $r2 := @parameter3: java.lang.String;

        specialinvoke $r6.<java.lang.Object: void <init>()>();

        $r1 = new org.simpleframework.xml.core.CollectionFactory;

        specialinvoke $r1.<org.simpleframework.xml.core.CollectionFactory: void <init>(org.simpleframework.xml.core.Context,org.simpleframework.xml.strategy.Type)>($r5, $r3);

        $r6.<org.simpleframework.xml.core.CompositeList: org.simpleframework.xml.core.CollectionFactory factory> = $r1;

        $r0 = new org.simpleframework.xml.core.Traverser;

        specialinvoke $r0.<org.simpleframework.xml.core.Traverser: void <init>(org.simpleframework.xml.core.Context)>($r5);

        $r6.<org.simpleframework.xml.core.CompositeList: org.simpleframework.xml.core.Traverser root> = $r0;

        $r6.<org.simpleframework.xml.core.CompositeList: org.simpleframework.xml.strategy.Type entry> = $r4;

        $r6.<org.simpleframework.xml.core.CompositeList: org.simpleframework.xml.strategy.Type type> = $r3;

        $r6.<org.simpleframework.xml.core.CompositeList: java.lang.String name> = $r2;

        return;
    }

    private java.lang.Object populate(org.simpleframework.xml.stream.InputNode, java.lang.Object) throws java.lang.Exception
    {
        org.simpleframework.xml.core.Traverser $r0;
        java.lang.Class $r1;
        java.util.Collection $r2;
        org.simpleframework.xml.strategy.Type $r3;
        java.lang.Object $r4, $r8;
        org.simpleframework.xml.stream.InputNode $r5, $r6;
        org.simpleframework.xml.core.CompositeList $r7;

        $r7 := @this: org.simpleframework.xml.core.CompositeList;

        $r5 := @parameter0: org.simpleframework.xml.stream.InputNode;

        $r4 := @parameter1: java.lang.Object;

        $r2 = (java.util.Collection) $r4;

     label1:
        $r6 = interfaceinvoke $r5.<org.simpleframework.xml.stream.InputNode: org.simpleframework.xml.stream.InputNode getNext()>();

        $r3 = $r7.<org.simpleframework.xml.core.CompositeList: org.simpleframework.xml.strategy.Type entry>;

        $r1 = interfaceinvoke $r3.<org.simpleframework.xml.strategy.Type: java.lang.Class getType()>();

        if $r6 != null goto label2;

        return $r2;

     label2:
        $r0 = $r7.<org.simpleframework.xml.core.CompositeList: org.simpleframework.xml.core.Traverser root>;

        $r8 = virtualinvoke $r0.<org.simpleframework.xml.core.Traverser: java.lang.Object read(org.simpleframework.xml.stream.InputNode,java.lang.Class)>($r6, $r1);

        interfaceinvoke $r2.<java.util.Collection: boolean add(java.lang.Object)>($r8);

        goto label1;
    }

    private boolean validate(org.simpleframework.xml.stream.InputNode, java.lang.Class) throws java.lang.Exception
    {
        org.simpleframework.xml.core.Traverser $r0;
        org.simpleframework.xml.strategy.Type $r1;
        java.lang.Class $r2, $r6;
        org.simpleframework.xml.stream.InputNode $r3, $r4;
        org.simpleframework.xml.core.CompositeList $r5;

        $r5 := @this: org.simpleframework.xml.core.CompositeList;

        $r3 := @parameter0: org.simpleframework.xml.stream.InputNode;

        $r2 := @parameter1: java.lang.Class;

     label1:
        $r4 = interfaceinvoke $r3.<org.simpleframework.xml.stream.InputNode: org.simpleframework.xml.stream.InputNode getNext()>();

        $r1 = $r5.<org.simpleframework.xml.core.CompositeList: org.simpleframework.xml.strategy.Type entry>;

        $r6 = interfaceinvoke $r1.<org.simpleframework.xml.strategy.Type: java.lang.Class getType()>();

        if $r4 != null goto label2;

        return 1;

     label2:
        $r0 = $r5.<org.simpleframework.xml.core.CompositeList: org.simpleframework.xml.core.Traverser root>;

        virtualinvoke $r0.<org.simpleframework.xml.core.Traverser: boolean validate(org.simpleframework.xml.stream.InputNode,java.lang.Class)>($r4, $r6);

        goto label1;
    }

    public java.lang.Object read(org.simpleframework.xml.stream.InputNode) throws java.lang.Exception
    {
        boolean $z0;
        java.lang.Object $r0, $r5;
        org.simpleframework.xml.core.Instance $r1;
        org.simpleframework.xml.core.CollectionFactory $r2;
        org.simpleframework.xml.stream.InputNode $r3;
        org.simpleframework.xml.core.CompositeList $r4;

        $r4 := @this: org.simpleframework.xml.core.CompositeList;

        $r3 := @parameter0: org.simpleframework.xml.stream.InputNode;

        $r2 = $r4.<org.simpleframework.xml.core.CompositeList: org.simpleframework.xml.core.CollectionFactory factory>;

        $r1 = virtualinvoke $r2.<org.simpleframework.xml.core.CollectionFactory: org.simpleframework.xml.core.Instance getInstance(org.simpleframework.xml.stream.InputNode)>($r3);

        $r0 = interfaceinvoke $r1.<org.simpleframework.xml.core.Instance: java.lang.Object getInstance()>();

        $z0 = interfaceinvoke $r1.<org.simpleframework.xml.core.Instance: boolean isReference()>();

        if $z0 != 0 goto label1;

        $r5 = specialinvoke $r4.<org.simpleframework.xml.core.CompositeList: java.lang.Object populate(org.simpleframework.xml.stream.InputNode,java.lang.Object)>($r3, $r0);

        return $r5;

     label1:
        return $r0;
    }

    public java.lang.Object read(org.simpleframework.xml.stream.InputNode, java.lang.Object) throws java.lang.Exception
    {
        boolean $z0;
        org.simpleframework.xml.core.Instance $r0;
        org.simpleframework.xml.core.CollectionFactory $r1;
        java.lang.Object $r2, $r5, $r6;
        org.simpleframework.xml.stream.InputNode $r3;
        org.simpleframework.xml.core.CompositeList $r4;

        $r4 := @this: org.simpleframework.xml.core.CompositeList;

        $r3 := @parameter0: org.simpleframework.xml.stream.InputNode;

        $r2 := @parameter1: java.lang.Object;

        $r1 = $r4.<org.simpleframework.xml.core.CompositeList: org.simpleframework.xml.core.CollectionFactory factory>;

        $r0 = virtualinvoke $r1.<org.simpleframework.xml.core.CollectionFactory: org.simpleframework.xml.core.Instance getInstance(org.simpleframework.xml.stream.InputNode)>($r3);

        $z0 = interfaceinvoke $r0.<org.simpleframework.xml.core.Instance: boolean isReference()>();

        if $z0 == 0 goto label1;

        $r5 = interfaceinvoke $r0.<org.simpleframework.xml.core.Instance: java.lang.Object getInstance()>();

        return $r5;

     label1:
        interfaceinvoke $r0.<org.simpleframework.xml.core.Instance: java.lang.Object setInstance(java.lang.Object)>($r2);

        if $r2 == null goto label2;

        $r6 = specialinvoke $r4.<org.simpleframework.xml.core.CompositeList: java.lang.Object populate(org.simpleframework.xml.stream.InputNode,java.lang.Object)>($r3, $r2);

        return $r6;

     label2:
        return $r2;
    }

    public boolean validate(org.simpleframework.xml.stream.InputNode) throws java.lang.Exception
    {
        java.lang.Class $r0;
        boolean $z0, $z1;
        org.simpleframework.xml.core.Instance $r1;
        org.simpleframework.xml.core.CollectionFactory $r2;
        org.simpleframework.xml.stream.InputNode $r3;
        org.simpleframework.xml.core.CompositeList $r4;

        $r4 := @this: org.simpleframework.xml.core.CompositeList;

        $r3 := @parameter0: org.simpleframework.xml.stream.InputNode;

        $r2 = $r4.<org.simpleframework.xml.core.CompositeList: org.simpleframework.xml.core.CollectionFactory factory>;

        $r1 = virtualinvoke $r2.<org.simpleframework.xml.core.CollectionFactory: org.simpleframework.xml.core.Instance getInstance(org.simpleframework.xml.stream.InputNode)>($r3);

        $z0 = interfaceinvoke $r1.<org.simpleframework.xml.core.Instance: boolean isReference()>();

        if $z0 != 0 goto label1;

        interfaceinvoke $r1.<org.simpleframework.xml.core.Instance: java.lang.Object setInstance(java.lang.Object)>(null);

        $r0 = interfaceinvoke $r1.<org.simpleframework.xml.core.Instance: java.lang.Class getType()>();

        $z1 = specialinvoke $r4.<org.simpleframework.xml.core.CompositeList: boolean validate(org.simpleframework.xml.stream.InputNode,java.lang.Class)>($r3, $r0);

        return $z1;

     label1:
        return 1;
    }

    public void write(org.simpleframework.xml.stream.OutputNode, java.lang.Object) throws java.lang.Exception
    {
        java.lang.String $r0;
        org.simpleframework.xml.core.Traverser $r1;
        java.lang.Object[] $r2;
        org.simpleframework.xml.core.PersistenceException $r3;
        java.lang.Class $r4, $r5;
        boolean $z0, $z1;
        java.util.Collection $r6;
        java.util.Iterator $r7;
        org.simpleframework.xml.strategy.Type $r8, $r13, $r14;
        java.lang.Object $r9, $r12;
        org.simpleframework.xml.stream.OutputNode $r10;
        org.simpleframework.xml.core.CompositeList $r11;

        $r11 := @this: org.simpleframework.xml.core.CompositeList;

        $r10 := @parameter0: org.simpleframework.xml.stream.OutputNode;

        $r9 := @parameter1: java.lang.Object;

        $r6 = (java.util.Collection) $r9;

        $r7 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r12 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        if $r12 == null goto label1;

        $r8 = $r11.<org.simpleframework.xml.core.CompositeList: org.simpleframework.xml.strategy.Type entry>;

        $r4 = interfaceinvoke $r8.<org.simpleframework.xml.strategy.Type: java.lang.Class getType()>();

        $r5 = virtualinvoke $r12.<java.lang.Object: java.lang.Class getClass()>();

        $z1 = virtualinvoke $r4.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r5);

        if $z1 != 0 goto label2;

        $r3 = new org.simpleframework.xml.core.PersistenceException;

        $r2 = newarray (java.lang.Object)[3];

        $r2[0] = $r5;

        $r13 = $r11.<org.simpleframework.xml.core.CompositeList: org.simpleframework.xml.strategy.Type entry>;

        $r2[1] = $r13;

        $r14 = $r11.<org.simpleframework.xml.core.CompositeList: org.simpleframework.xml.strategy.Type type>;

        $r2[2] = $r14;

        specialinvoke $r3.<org.simpleframework.xml.core.PersistenceException: void <init>(java.lang.String,java.lang.Object[])>("Entry %s does not match %s for %s", $r2);

        throw $r3;

     label2:
        $r1 = $r11.<org.simpleframework.xml.core.CompositeList: org.simpleframework.xml.core.Traverser root>;

        $r0 = $r11.<org.simpleframework.xml.core.CompositeList: java.lang.String name>;

        virtualinvoke $r1.<org.simpleframework.xml.core.Traverser: void write(org.simpleframework.xml.stream.OutputNode,java.lang.Object,java.lang.Class,java.lang.String)>($r10, $r12, $r4, $r0);

        goto label1;

     label3:
        return;
    }
}
