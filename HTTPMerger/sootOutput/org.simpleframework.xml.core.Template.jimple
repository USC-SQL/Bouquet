class org.simpleframework.xml.core.Template extends java.lang.Object
{
    protected char[] buf;
    protected java.lang.String cache;
    protected int count;

    public void <init>()
    {
        org.simpleframework.xml.core.Template $r0;

        $r0 := @this: org.simpleframework.xml.core.Template;

        specialinvoke $r0.<org.simpleframework.xml.core.Template: void <init>(int)>(16);

        return;
    }

    public void <init>(int)
    {
        char[] $r0;
        int $i0;
        org.simpleframework.xml.core.Template $r1;

        $r1 := @this: org.simpleframework.xml.core.Template;

        $i0 := @parameter0: int;

        specialinvoke $r1.<java.lang.Object: void <init>()>();

        $r0 = newarray (char)[$i0];

        $r1.<org.simpleframework.xml.core.Template: char[] buf> = $r0;

        return;
    }

    public void append(char)
    {
        char[] $r0;
        int $i0, $i1, $i3, $i4;
        char $c2;
        org.simpleframework.xml.core.Template $r1;

        $r1 := @this: org.simpleframework.xml.core.Template;

        $c2 := @parameter0: char;

        $i0 = $r1.<org.simpleframework.xml.core.Template: int count>;

        $i1 = $i0 + 1;

        virtualinvoke $r1.<org.simpleframework.xml.core.Template: void ensureCapacity(int)>($i1);

        $r0 = $r1.<org.simpleframework.xml.core.Template: char[] buf>;

        $i3 = $r1.<org.simpleframework.xml.core.Template: int count>;

        $i4 = $i3 + 1;

        $r1.<org.simpleframework.xml.core.Template: int count> = $i4;

        $r0[$i3] = $c2;

        return;
    }

    public void append(java.lang.String)
    {
        char[] $r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        java.lang.String $r1;
        org.simpleframework.xml.core.Template $r2;

        $r2 := @this: org.simpleframework.xml.core.Template;

        $r1 := @parameter0: java.lang.String;

        $i0 = $r2.<org.simpleframework.xml.core.Template: int count>;

        $i1 = virtualinvoke $r1.<java.lang.String: int length()>();

        $i2 = $i0 + $i1;

        virtualinvoke $r2.<org.simpleframework.xml.core.Template: void ensureCapacity(int)>($i2);

        $i3 = virtualinvoke $r1.<java.lang.String: int length()>();

        $r0 = $r2.<org.simpleframework.xml.core.Template: char[] buf>;

        $i4 = $r2.<org.simpleframework.xml.core.Template: int count>;

        virtualinvoke $r1.<java.lang.String: void getChars(int,int,char[],int)>(0, $i3, $r0, $i4);

        $i5 = $r2.<org.simpleframework.xml.core.Template: int count>;

        $i6 = virtualinvoke $r1.<java.lang.String: int length()>();

        $i7 = $i5 + $i6;

        $r2.<org.simpleframework.xml.core.Template: int count> = $i7;

        return;
    }

    public void append(java.lang.String, int, int)
    {
        char[] $r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        java.lang.String $r1;
        org.simpleframework.xml.core.Template $r2;

        $r2 := @this: org.simpleframework.xml.core.Template;

        $r1 := @parameter0: java.lang.String;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i2 = $r2.<org.simpleframework.xml.core.Template: int count>;

        $i3 = $i2 + $i1;

        virtualinvoke $r2.<org.simpleframework.xml.core.Template: void ensureCapacity(int)>($i3);

        $r0 = $r2.<org.simpleframework.xml.core.Template: char[] buf>;

        $i4 = $r2.<org.simpleframework.xml.core.Template: int count>;

        virtualinvoke $r1.<java.lang.String: void getChars(int,int,char[],int)>($i0, $i1, $r0, $i4);

        $i5 = $r2.<org.simpleframework.xml.core.Template: int count>;

        $i6 = $i5 + $i1;

        $r2.<org.simpleframework.xml.core.Template: int count> = $i6;

        return;
    }

    public void append(org.simpleframework.xml.core.Template)
    {
        int $i0;
        char[] $r0;
        org.simpleframework.xml.core.Template $r1, $r2;

        $r1 := @this: org.simpleframework.xml.core.Template;

        $r2 := @parameter0: org.simpleframework.xml.core.Template;

        $r0 = $r2.<org.simpleframework.xml.core.Template: char[] buf>;

        $i0 = $r2.<org.simpleframework.xml.core.Template: int count>;

        virtualinvoke $r1.<org.simpleframework.xml.core.Template: void append(char[],int,int)>($r0, 0, $i0);

        return;
    }

    public void append(org.simpleframework.xml.core.Template, int, int)
    {
        char[] $r0;
        int $i0, $i1;
        org.simpleframework.xml.core.Template $r1, $r2;

        $r1 := @this: org.simpleframework.xml.core.Template;

        $r2 := @parameter0: org.simpleframework.xml.core.Template;

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $r0 = $r2.<org.simpleframework.xml.core.Template: char[] buf>;

        virtualinvoke $r1.<org.simpleframework.xml.core.Template: void append(char[],int,int)>($r0, $i0, $i1);

        return;
    }

    public void append(char[], int, int)
    {
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        char[] $r0, $r1;
        org.simpleframework.xml.core.Template $r2;

        $r2 := @this: org.simpleframework.xml.core.Template;

        $r0 := @parameter0: char[];

        $i0 := @parameter1: int;

        $i1 := @parameter2: int;

        $i2 = $r2.<org.simpleframework.xml.core.Template: int count>;

        $i3 = $i2 + $i1;

        virtualinvoke $r2.<org.simpleframework.xml.core.Template: void ensureCapacity(int)>($i3);

        $r1 = $r2.<org.simpleframework.xml.core.Template: char[] buf>;

        $i4 = $r2.<org.simpleframework.xml.core.Template: int count>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r0, $i0, $r1, $i4, $i1);

        $i5 = $r2.<org.simpleframework.xml.core.Template: int count>;

        $i6 = $i5 + $i1;

        $r2.<org.simpleframework.xml.core.Template: int count> = $i6;

        return;
    }

    public void clear()
    {
        org.simpleframework.xml.core.Template $r0;

        $r0 := @this: org.simpleframework.xml.core.Template;

        $r0.<org.simpleframework.xml.core.Template: java.lang.String cache> = null;

        $r0.<org.simpleframework.xml.core.Template: int count> = 0;

        return;
    }

    protected void ensureCapacity(int)
    {
        char[] $r0, $r1, $r3, $r4;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        org.simpleframework.xml.core.Template $r2;

        $r2 := @this: org.simpleframework.xml.core.Template;

        $i0 := @parameter0: int;

        $r0 = $r2.<org.simpleframework.xml.core.Template: char[] buf>;

        $i1 = lengthof $r0;

        if $i1 >= $i0 goto label1;

        $r3 = $r2.<org.simpleframework.xml.core.Template: char[] buf>;

        $i2 = lengthof $r3;

        $i3 = $i2 * 2;

        $i4 = staticinvoke <java.lang.Math: int max(int,int)>($i0, $i3);

        $r4 = newarray (char)[$i4];

        $r1 = $r2.<org.simpleframework.xml.core.Template: char[] buf>;

        $i5 = $r2.<org.simpleframework.xml.core.Template: int count>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r1, 0, $r4, 0, $i5);

        $r2.<org.simpleframework.xml.core.Template: char[] buf> = $r4;

        return;

     label1:
        return;
    }

    public int length()
    {
        int i0;
        org.simpleframework.xml.core.Template $r0;

        $r0 := @this: org.simpleframework.xml.core.Template;

        i0 = $r0.<org.simpleframework.xml.core.Template: int count>;

        return i0;
    }

    public java.lang.String toString()
    {
        int $i0;
        char[] $r0;
        java.lang.String $r1;
        org.simpleframework.xml.core.Template $r2;

        $r2 := @this: org.simpleframework.xml.core.Template;

        $r1 = new java.lang.String;

        $r0 = $r2.<org.simpleframework.xml.core.Template: char[] buf>;

        $i0 = $r2.<org.simpleframework.xml.core.Template: int count>;

        specialinvoke $r1.<java.lang.String: void <init>(char[],int,int)>($r0, 0, $i0);

        return $r1;
    }
}
