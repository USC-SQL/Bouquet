public class org.json.simple.JSONValue extends java.lang.Object
{

    public void <init>()
    {
        org.json.simple.JSONValue $r0;

        $r0 := @this: org.json.simple.JSONValue;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.lang.String escape(java.lang.String)
    {
        java.lang.StringBuffer $r0;
        java.lang.String $r1, $r2;

        $r1 := @parameter0: java.lang.String;

        if $r1 != null goto label1;

        return null;

     label1:
        $r0 = new java.lang.StringBuffer;

        specialinvoke $r0.<java.lang.StringBuffer: void <init>()>();

        staticinvoke <org.json.simple.JSONValue: void escape(java.lang.String,java.lang.StringBuffer)>($r1, $r0);

        $r2 = virtualinvoke $r0.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r2;
    }

    static void escape(java.lang.String, java.lang.StringBuffer)
    {
        char $c0;
        int $i1, $i2, $i3, $i4, $i5;
        java.lang.StringBuffer $r0;
        java.lang.String $r1, $r2, $r3;

        $r1 := @parameter0: java.lang.String;

        $r0 := @parameter1: java.lang.StringBuffer;

        $i1 = 0;

     label01:
        $i2 = virtualinvoke $r1.<java.lang.String: int length()>();

        if $i1 >= $i2 goto label18;

        $c0 = virtualinvoke $r1.<java.lang.String: char charAt(int)>($i1);

        lookupswitch($c0)
        {
            case 8: goto label10;
            case 9: goto label14;
            case 10: goto label12;
            case 12: goto label11;
            case 13: goto label13;
            case 34: goto label07;
            case 47: goto label15;
            case 92: goto label09;
            default: goto label02;
        };

     label02:
        if $c0 < 0 goto label03;

        if $c0 <= 31 goto label05;

     label03:
        if $c0 < 127 goto label04;

        if $c0 <= 159 goto label05;

     label04:
        if $c0 < 8192 goto label17;

        if $c0 > 8447 goto label17;

     label05:
        $r2 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($c0);

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\\u");

        $i4 = 0;

     label06:
        $i3 = virtualinvoke $r2.<java.lang.String: int length()>();

        $i5 = 4 - $i3;

        if $i4 >= $i5 goto label16;

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(48);

        $i4 = $i4 + 1;

        goto label06;

     label07:
        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\\\"");

     label08:
        $i1 = $i1 + 1;

        goto label01;

     label09:
        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\\\\");

        goto label08;

     label10:
        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\\b");

        goto label08;

     label11:
        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\\f");

        goto label08;

     label12:
        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\\n");

        goto label08;

     label13:
        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\\r");

        goto label08;

     label14:
        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\\t");

        goto label08;

     label15:
        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\\/");

        goto label08;

     label16:
        $r3 = virtualinvoke $r2.<java.lang.String: java.lang.String toUpperCase()>();

        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

        goto label08;

     label17:
        virtualinvoke $r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c0);

        goto label08;

     label18:
        return;
    }

    public static java.lang.Object parse(java.io.Reader)
    {
        java.lang.Object $r0;
        org.json.simple.parser.JSONParser $r1;
        java.lang.Exception $r2;
        java.io.Reader $r3;

        $r3 := @parameter0: java.io.Reader;

        $r1 = new org.json.simple.parser.JSONParser;

     label1:
        specialinvoke $r1.<org.json.simple.parser.JSONParser: void <init>()>();

        $r0 = virtualinvoke $r1.<org.json.simple.parser.JSONParser: java.lang.Object parse(java.io.Reader)>($r3);

     label2:
        return $r0;

     label3:
        $r2 := @caughtexception;

        return null;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public static java.lang.Object parse(java.lang.String)
    {
        java.lang.Object $r0;
        java.io.StringReader $r1;
        java.lang.String $r2;

        $r2 := @parameter0: java.lang.String;

        $r1 = new java.io.StringReader;

        specialinvoke $r1.<java.io.StringReader: void <init>(java.lang.String)>($r2);

        $r0 = staticinvoke <org.json.simple.JSONValue: java.lang.Object parse(java.io.Reader)>($r1);

        return $r0;
    }

    public static java.lang.Object parseWithException(java.io.Reader) throws java.io.IOException, org.json.simple.parser.ParseException
    {
        java.lang.Object $r0;
        org.json.simple.parser.JSONParser $r1;
        java.io.Reader $r2;

        $r2 := @parameter0: java.io.Reader;

        $r1 = new org.json.simple.parser.JSONParser;

        specialinvoke $r1.<org.json.simple.parser.JSONParser: void <init>()>();

        $r0 = virtualinvoke $r1.<org.json.simple.parser.JSONParser: java.lang.Object parse(java.io.Reader)>($r2);

        return $r0;
    }

    public static java.lang.Object parseWithException(java.lang.String) throws org.json.simple.parser.ParseException
    {
        java.lang.Object $r0;
        org.json.simple.parser.JSONParser $r1;
        java.lang.String $r2;

        $r2 := @parameter0: java.lang.String;

        $r1 = new org.json.simple.parser.JSONParser;

        specialinvoke $r1.<org.json.simple.parser.JSONParser: void <init>()>();

        $r0 = virtualinvoke $r1.<org.json.simple.parser.JSONParser: java.lang.Object parse(java.lang.String)>($r2);

        return $r0;
    }

    public static java.lang.String toJSONString(java.lang.Object)
    {
        java.util.List $r0;
        java.util.Map $r1;
        org.json.simple.JSONAware $r2;
        java.lang.Float $r3, $r15;
        java.lang.Double $r4, $r13;
        java.lang.String $r5, $r9, $r12, $r14, $r16, $r17, $r18, $r19, $r20, $r21, $r22;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11;
        java.lang.StringBuffer $r6, $r8, $r10, $r11;
        java.lang.Object $r7;

        $r7 := @parameter0: java.lang.Object;

        if $r7 != null goto label01;

        return "null";

     label01:
        $z0 = $r7 instanceof java.lang.String;

        if $z0 == 0 goto label02;

        $r6 = new java.lang.StringBuffer;

        specialinvoke $r6.<java.lang.StringBuffer: void <init>()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\"");

        $r5 = (java.lang.String) $r7;

        $r9 = staticinvoke <org.json.simple.JSONValue: java.lang.String escape(java.lang.String)>($r5);

        $r10 = virtualinvoke $r8.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\"");

        $r12 = virtualinvoke $r11.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r12;

     label02:
        $z1 = $r7 instanceof java.lang.Double;

        if $z1 == 0 goto label05;

        $r4 = (java.lang.Double) $r7;

        $z2 = virtualinvoke $r4.<java.lang.Double: boolean isInfinite()>();

        if $z2 != 0 goto label03;

        $r13 = (java.lang.Double) $r7;

        $z3 = virtualinvoke $r13.<java.lang.Double: boolean isNaN()>();

        if $z3 == 0 goto label04;

     label03:
        return "null";

     label04:
        $r14 = virtualinvoke $r7.<java.lang.Object: java.lang.String toString()>();

        return $r14;

     label05:
        $z4 = $r7 instanceof java.lang.Float;

        if $z4 == 0 goto label08;

        $r3 = (java.lang.Float) $r7;

        $z5 = virtualinvoke $r3.<java.lang.Float: boolean isInfinite()>();

        if $z5 != 0 goto label06;

        $r15 = (java.lang.Float) $r7;

        $z6 = virtualinvoke $r15.<java.lang.Float: boolean isNaN()>();

        if $z6 == 0 goto label07;

     label06:
        return "null";

     label07:
        $r16 = virtualinvoke $r7.<java.lang.Object: java.lang.String toString()>();

        return $r16;

     label08:
        $z7 = $r7 instanceof java.lang.Number;

        if $z7 == 0 goto label09;

        $r17 = virtualinvoke $r7.<java.lang.Object: java.lang.String toString()>();

        return $r17;

     label09:
        $z8 = $r7 instanceof java.lang.Boolean;

        if $z8 == 0 goto label10;

        $r18 = virtualinvoke $r7.<java.lang.Object: java.lang.String toString()>();

        return $r18;

     label10:
        $z9 = $r7 instanceof org.json.simple.JSONAware;

        if $z9 == 0 goto label11;

        $r2 = (org.json.simple.JSONAware) $r7;

        $r19 = interfaceinvoke $r2.<org.json.simple.JSONAware: java.lang.String toJSONString()>();

        return $r19;

     label11:
        $z10 = $r7 instanceof java.util.Map;

        if $z10 == 0 goto label12;

        $r1 = (java.util.Map) $r7;

        $r20 = staticinvoke <org.json.simple.JSONObject: java.lang.String toJSONString(java.util.Map)>($r1);

        return $r20;

     label12:
        $z11 = $r7 instanceof java.util.List;

        if $z11 == 0 goto label13;

        $r0 = (java.util.List) $r7;

        $r21 = staticinvoke <org.json.simple.JSONArray: java.lang.String toJSONString(java.util.List)>($r0);

        return $r21;

     label13:
        $r22 = virtualinvoke $r7.<java.lang.Object: java.lang.String toString()>();

        return $r22;
    }

    public static void writeJSONString(java.lang.Object, java.io.Writer) throws java.io.IOException
    {
        java.util.List $r0;
        java.util.Map $r1;
        org.json.simple.JSONAware $r2;
        org.json.simple.JSONStreamAware $r3;
        java.lang.Float $r4, $r12;
        java.lang.Double $r5, $r10;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12;
        java.lang.String $r6, $r9, $r11, $r13, $r14, $r15, $r16, $r17;
        java.io.Writer $r7;
        java.lang.Object $r8;

        $r8 := @parameter0: java.lang.Object;

        $r7 := @parameter1: java.io.Writer;

        if $r8 != null goto label01;

        virtualinvoke $r7.<java.io.Writer: void write(java.lang.String)>("null");

        return;

     label01:
        $z0 = $r8 instanceof java.lang.String;

        if $z0 == 0 goto label02;

        virtualinvoke $r7.<java.io.Writer: void write(int)>(34);

        $r6 = (java.lang.String) $r8;

        $r9 = staticinvoke <org.json.simple.JSONValue: java.lang.String escape(java.lang.String)>($r6);

        virtualinvoke $r7.<java.io.Writer: void write(java.lang.String)>($r9);

        virtualinvoke $r7.<java.io.Writer: void write(int)>(34);

        return;

     label02:
        $z1 = $r8 instanceof java.lang.Double;

        if $z1 == 0 goto label05;

        $r5 = (java.lang.Double) $r8;

        $z2 = virtualinvoke $r5.<java.lang.Double: boolean isInfinite()>();

        if $z2 != 0 goto label03;

        $r10 = (java.lang.Double) $r8;

        $z3 = virtualinvoke $r10.<java.lang.Double: boolean isNaN()>();

        if $z3 == 0 goto label04;

     label03:
        virtualinvoke $r7.<java.io.Writer: void write(java.lang.String)>("null");

        return;

     label04:
        $r11 = virtualinvoke $r8.<java.lang.Object: java.lang.String toString()>();

        virtualinvoke $r7.<java.io.Writer: void write(java.lang.String)>($r11);

        return;

     label05:
        $z4 = $r8 instanceof java.lang.Float;

        if $z4 == 0 goto label08;

        $r4 = (java.lang.Float) $r8;

        $z5 = virtualinvoke $r4.<java.lang.Float: boolean isInfinite()>();

        if $z5 != 0 goto label06;

        $r12 = (java.lang.Float) $r8;

        $z6 = virtualinvoke $r12.<java.lang.Float: boolean isNaN()>();

        if $z6 == 0 goto label07;

     label06:
        virtualinvoke $r7.<java.io.Writer: void write(java.lang.String)>("null");

        return;

     label07:
        $r13 = virtualinvoke $r8.<java.lang.Object: java.lang.String toString()>();

        virtualinvoke $r7.<java.io.Writer: void write(java.lang.String)>($r13);

        return;

     label08:
        $z7 = $r8 instanceof java.lang.Number;

        if $z7 == 0 goto label09;

        $r14 = virtualinvoke $r8.<java.lang.Object: java.lang.String toString()>();

        virtualinvoke $r7.<java.io.Writer: void write(java.lang.String)>($r14);

        return;

     label09:
        $z8 = $r8 instanceof java.lang.Boolean;

        if $z8 == 0 goto label10;

        $r15 = virtualinvoke $r8.<java.lang.Object: java.lang.String toString()>();

        virtualinvoke $r7.<java.io.Writer: void write(java.lang.String)>($r15);

        return;

     label10:
        $z9 = $r8 instanceof org.json.simple.JSONStreamAware;

        if $z9 == 0 goto label11;

        $r3 = (org.json.simple.JSONStreamAware) $r8;

        interfaceinvoke $r3.<org.json.simple.JSONStreamAware: void writeJSONString(java.io.Writer)>($r7);

        return;

     label11:
        $z10 = $r8 instanceof org.json.simple.JSONAware;

        if $z10 == 0 goto label12;

        $r2 = (org.json.simple.JSONAware) $r8;

        $r16 = interfaceinvoke $r2.<org.json.simple.JSONAware: java.lang.String toJSONString()>();

        virtualinvoke $r7.<java.io.Writer: void write(java.lang.String)>($r16);

        return;

     label12:
        $z11 = $r8 instanceof java.util.Map;

        if $z11 == 0 goto label13;

        $r1 = (java.util.Map) $r8;

        staticinvoke <org.json.simple.JSONObject: void writeJSONString(java.util.Map,java.io.Writer)>($r1, $r7);

        return;

     label13:
        $z12 = $r8 instanceof java.util.List;

        if $z12 == 0 goto label14;

        $r0 = (java.util.List) $r8;

        staticinvoke <org.json.simple.JSONArray: void writeJSONString(java.util.List,java.io.Writer)>($r0, $r7);

        return;

     label14:
        $r17 = virtualinvoke $r8.<java.lang.Object: java.lang.String toString()>();

        virtualinvoke $r7.<java.io.Writer: void write(java.lang.String)>($r17);

        return;
    }
}
