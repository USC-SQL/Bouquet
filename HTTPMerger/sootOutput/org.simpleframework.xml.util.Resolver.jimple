public class org.simpleframework.xml.util.Resolver extends java.util.AbstractSet
{
    private final org.simpleframework.xml.util.Resolver$Cache cache;
    private final org.simpleframework.xml.util.Resolver$Stack stack;

    public void <init>()
    {
        org.simpleframework.xml.util.Resolver$Cache $r0;
        org.simpleframework.xml.util.Resolver$Stack $r1;
        org.simpleframework.xml.util.Resolver $r2;

        $r2 := @this: org.simpleframework.xml.util.Resolver;

        specialinvoke $r2.<java.util.AbstractSet: void <init>()>();

        $r1 = new org.simpleframework.xml.util.Resolver$Stack;

        specialinvoke $r1.<org.simpleframework.xml.util.Resolver$Stack: void <init>(org.simpleframework.xml.util.Resolver,org.simpleframework.xml.util.Resolver$1)>($r2, null);

        $r2.<org.simpleframework.xml.util.Resolver: org.simpleframework.xml.util.Resolver$Stack stack> = $r1;

        $r0 = new org.simpleframework.xml.util.Resolver$Cache;

        specialinvoke $r0.<org.simpleframework.xml.util.Resolver$Cache: void <init>(org.simpleframework.xml.util.Resolver)>($r2);

        $r2.<org.simpleframework.xml.util.Resolver: org.simpleframework.xml.util.Resolver$Cache cache> = $r0;

        return;
    }

    static org.simpleframework.xml.util.Resolver$Cache access$100(org.simpleframework.xml.util.Resolver)
    {
        org.simpleframework.xml.util.Resolver$Cache r0;
        org.simpleframework.xml.util.Resolver $r1;

        $r1 := @parameter0: org.simpleframework.xml.util.Resolver;

        r0 = $r1.<org.simpleframework.xml.util.Resolver: org.simpleframework.xml.util.Resolver$Cache cache>;

        return r0;
    }

    private boolean match(char[], int, char[], int)
    {
        boolean $z0;
        char $c0, $c1, $c6, $c8, $c11, $c12, $c14, $c17, $c19, $c21, $c24;
        int $i2, $i3, $i4, $i5, $i7, $i9, $i10, $i13, $i15, $i16, $i18, $i20, $i22, $i23, $i25;
        char[] $r0, $r1;
        org.simpleframework.xml.util.Resolver $r2;

        $r2 := @this: org.simpleframework.xml.util.Resolver;

        $r0 := @parameter0: char[];

        $i2 := @parameter1: int;

        $r1 := @parameter2: char[];

        $i3 := @parameter3: int;

     label01:
        $i4 = lengthof $r1;

        if $i3 >= $i4 goto label09;

        $i5 = lengthof $r0;

        if $i2 >= $i5 goto label09;

        $c0 = $r1[$i3];

        if $c0 != 42 goto label08;

     label02:
        $c6 = $r1[$i3];

        if $c6 != 42 goto label03;

        $i3 = $i3 + 1;

        $i7 = lengthof $r1;

        if $i3 < $i7 goto label02;

        return 1;

     label03:
        $c8 = $r1[$i3];

        if $c8 != 63 goto label04;

        $i3 = $i3 + 1;

        $i9 = lengthof $r1;

        if $i3 >= $i9 goto label13;

     label04:
        $i10 = lengthof $r0;

        if $i2 >= $i10 goto label07;

        $c1 = $r0[$i2];

        $c11 = $r1[$i3];

        if $c1 == $c11 goto label05;

        $c12 = $r1[$i3];

        if $c12 != 63 goto label06;

     label05:
        $i13 = $i3 + -1;

        $c14 = $r1[$i13];

        if $c14 == 63 goto label07;

        $z0 = specialinvoke $r2.<org.simpleframework.xml.util.Resolver: boolean match(char[],int,char[],int)>($r0, $i2, $r1, $i3);

        if $z0 != 0 goto label14;

     label06:
        $i2 = $i2 + 1;

        goto label04;

     label07:
        $i15 = lengthof $r0;

        if $i15 != $i2 goto label08;

        return 0;

     label08:
        $i16 = $i2 + 1;

        $c17 = $r0[$i2];

        $i18 = $i3 + 1;

        $c19 = $r1[$i3];

        if $c17 == $c19 goto label12;

        $i20 = $i18 + -1;

        $c21 = $r1[$i20];

        if $c21 == 63 goto label12;

        return 0;

     label09:
        $i22 = lengthof $r1;

        if $i22 != $i3 goto label10;

        $i23 = lengthof $r0;

        if $i23 == $i2 goto label15;

        return 0;

     label10:
        $c24 = $r1[$i3];

        if $c24 != 42 goto label11;

        $i3 = $i3 + 1;

        $i25 = lengthof $r1;

        if $i3 < $i25 goto label10;

        return 1;

     label11:
        return 0;

     label12:
        $i3 = $i18;

        $i2 = $i16;

        goto label01;

     label13:
        return 1;

     label14:
        return 1;

     label15:
        return 1;
    }

    private boolean match(char[], char[])
    {
        boolean $z0;
        char[] $r0, $r1;
        org.simpleframework.xml.util.Resolver $r2;

        $r2 := @this: org.simpleframework.xml.util.Resolver;

        $r0 := @parameter0: char[];

        $r1 := @parameter1: char[];

        $z0 = specialinvoke $r2.<org.simpleframework.xml.util.Resolver: boolean match(char[],int,char[],int)>($r0, 0, $r1, 0);

        return $z0;
    }

    private java.util.List resolveAll(java.lang.String, char[])
    {
        org.simpleframework.xml.util.Resolver$Cache $r0;
        org.simpleframework.xml.util.Match $r1;
        java.lang.Object $r2;
        boolean $z0, $z1;
        java.util.Iterator $r3;
        org.simpleframework.xml.util.Resolver$Stack $r4;
        java.util.ArrayList $r5;
        char[] $r6, $r7;
        java.lang.String $r8, $r9;
        org.simpleframework.xml.util.Resolver $r10;

        $r10 := @this: org.simpleframework.xml.util.Resolver;

        $r8 := @parameter0: java.lang.String;

        $r6 := @parameter1: char[];

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        $r4 = $r10.<org.simpleframework.xml.util.Resolver: org.simpleframework.xml.util.Resolver$Stack stack>;

        $r3 = virtualinvoke $r4.<org.simpleframework.xml.util.Resolver$Stack: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke $r3.<java.util.Iterator: java.lang.Object next()>();

        $r1 = (org.simpleframework.xml.util.Match) $r2;

        $r9 = interfaceinvoke $r1.<org.simpleframework.xml.util.Match: java.lang.String getPattern()>();

        $r7 = virtualinvoke $r9.<java.lang.String: char[] toCharArray()>();

        $z1 = specialinvoke $r10.<org.simpleframework.xml.util.Resolver: boolean match(char[],char[])>($r6, $r7);

        if $z1 == 0 goto label1;

        $r0 = $r10.<org.simpleframework.xml.util.Resolver: org.simpleframework.xml.util.Resolver$Cache cache>;

        virtualinvoke $r0.<org.simpleframework.xml.util.Resolver$Cache: java.lang.Object put(java.lang.Object,java.lang.Object)>($r8, $r5);

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>($r1);

        goto label1;

     label2:
        return $r5;
    }

    public volatile boolean add(java.lang.Object)
    {
        org.simpleframework.xml.util.Match $r0;
        boolean $z0;
        java.lang.Object $r1;
        org.simpleframework.xml.util.Resolver $r2;

        $r2 := @this: org.simpleframework.xml.util.Resolver;

        $r1 := @parameter0: java.lang.Object;

        $r0 = (org.simpleframework.xml.util.Match) $r1;

        $z0 = virtualinvoke $r2.<org.simpleframework.xml.util.Resolver: boolean add(org.simpleframework.xml.util.Match)>($r0);

        return $z0;
    }

    public boolean add(org.simpleframework.xml.util.Match)
    {
        org.simpleframework.xml.util.Resolver$Stack $r0;
        org.simpleframework.xml.util.Match $r1;
        org.simpleframework.xml.util.Resolver $r2;

        $r2 := @this: org.simpleframework.xml.util.Resolver;

        $r1 := @parameter0: org.simpleframework.xml.util.Match;

        $r0 = $r2.<org.simpleframework.xml.util.Resolver: org.simpleframework.xml.util.Resolver$Stack stack>;

        virtualinvoke $r0.<org.simpleframework.xml.util.Resolver$Stack: void push(org.simpleframework.xml.util.Match)>($r1);

        return 1;
    }

    public void clear()
    {
        org.simpleframework.xml.util.Resolver$Stack $r0;
        org.simpleframework.xml.util.Resolver$Cache $r1;
        org.simpleframework.xml.util.Resolver $r2;

        $r2 := @this: org.simpleframework.xml.util.Resolver;

        $r1 = $r2.<org.simpleframework.xml.util.Resolver: org.simpleframework.xml.util.Resolver$Cache cache>;

        virtualinvoke $r1.<org.simpleframework.xml.util.Resolver$Cache: void clear()>();

        $r0 = $r2.<org.simpleframework.xml.util.Resolver: org.simpleframework.xml.util.Resolver$Stack stack>;

        virtualinvoke $r0.<org.simpleframework.xml.util.Resolver$Stack: void clear()>();

        return;
    }

    public java.util.Iterator iterator()
    {
        java.util.Iterator $r0;
        org.simpleframework.xml.util.Resolver$Stack $r1;
        org.simpleframework.xml.util.Resolver $r2;

        $r2 := @this: org.simpleframework.xml.util.Resolver;

        $r1 = $r2.<org.simpleframework.xml.util.Resolver: org.simpleframework.xml.util.Resolver$Stack stack>;

        $r0 = virtualinvoke $r1.<org.simpleframework.xml.util.Resolver$Stack: java.util.Iterator sequence()>();

        return $r0;
    }

    public boolean remove(org.simpleframework.xml.util.Match)
    {
        org.simpleframework.xml.util.Resolver$Stack $r0;
        boolean $z0;
        org.simpleframework.xml.util.Resolver$Cache $r1;
        org.simpleframework.xml.util.Match $r2;
        org.simpleframework.xml.util.Resolver $r3;

        $r3 := @this: org.simpleframework.xml.util.Resolver;

        $r2 := @parameter0: org.simpleframework.xml.util.Match;

        $r1 = $r3.<org.simpleframework.xml.util.Resolver: org.simpleframework.xml.util.Resolver$Cache cache>;

        virtualinvoke $r1.<org.simpleframework.xml.util.Resolver$Cache: void clear()>();

        $r0 = $r3.<org.simpleframework.xml.util.Resolver: org.simpleframework.xml.util.Resolver$Stack stack>;

        $z0 = virtualinvoke $r0.<org.simpleframework.xml.util.Resolver$Stack: boolean remove(java.lang.Object)>($r2);

        return $z0;
    }

    public org.simpleframework.xml.util.Match resolve(java.lang.String)
    {
        org.simpleframework.xml.util.Match $r0;
        boolean $z0;
        java.util.List $r1;
        java.lang.Object $r2, $r6;
        org.simpleframework.xml.util.Resolver$Cache $r3;
        java.lang.String $r4;
        org.simpleframework.xml.util.Resolver $r5;

        $r5 := @this: org.simpleframework.xml.util.Resolver;

        $r4 := @parameter0: java.lang.String;

        $r3 = $r5.<org.simpleframework.xml.util.Resolver: org.simpleframework.xml.util.Resolver$Cache cache>;

        $r2 = virtualinvoke $r3.<org.simpleframework.xml.util.Resolver$Cache: java.lang.Object get(java.lang.Object)>($r4);

        $r1 = (java.util.List) $r2;

        if $r1 != null goto label1;

        $r1 = virtualinvoke $r5.<org.simpleframework.xml.util.Resolver: java.util.List resolveAll(java.lang.String)>($r4);

     label1:
        $z0 = interfaceinvoke $r1.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label2;

        return null;

     label2:
        $r6 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(0);

        $r0 = (org.simpleframework.xml.util.Match) $r6;

        return $r0;
    }

    public java.util.List resolveAll(java.lang.String)
    {
        char[] $r0;
        java.util.List $r1, $r6;
        java.lang.Object $r2;
        org.simpleframework.xml.util.Resolver$Cache $r3;
        java.lang.String $r4;
        org.simpleframework.xml.util.Resolver $r5;

        $r5 := @this: org.simpleframework.xml.util.Resolver;

        $r4 := @parameter0: java.lang.String;

        $r3 = $r5.<org.simpleframework.xml.util.Resolver: org.simpleframework.xml.util.Resolver$Cache cache>;

        $r2 = virtualinvoke $r3.<org.simpleframework.xml.util.Resolver$Cache: java.lang.Object get(java.lang.Object)>($r4);

        $r1 = (java.util.List) $r2;

        if $r1 == null goto label1;

        return $r1;

     label1:
        $r0 = virtualinvoke $r4.<java.lang.String: char[] toCharArray()>();

        if $r0 != null goto label2;

        return null;

     label2:
        $r6 = specialinvoke $r5.<org.simpleframework.xml.util.Resolver: java.util.List resolveAll(java.lang.String,char[])>($r4, $r0);

        return $r6;
    }

    public int size()
    {
        int $i0;
        org.simpleframework.xml.util.Resolver$Stack $r0;
        org.simpleframework.xml.util.Resolver $r1;

        $r1 := @this: org.simpleframework.xml.util.Resolver;

        $r0 = $r1.<org.simpleframework.xml.util.Resolver: org.simpleframework.xml.util.Resolver$Stack stack>;

        $i0 = virtualinvoke $r0.<org.simpleframework.xml.util.Resolver$Stack: int size()>();

        return $i0;
    }
}
