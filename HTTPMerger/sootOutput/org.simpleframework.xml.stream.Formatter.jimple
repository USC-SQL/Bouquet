class org.simpleframework.xml.stream.Formatter extends java.lang.Object
{
    private static final char[] AND;
    private static final char[] CLOSE;
    private static final char[] DOUBLE;
    private static final char[] GREATER;
    private static final char[] LESS;
    private static final char[] NAMESPACE;
    private static final char[] OPEN;
    private static final char[] SINGLE;
    private org.simpleframework.xml.stream.OutputBuffer buffer;
    private org.simpleframework.xml.stream.Indenter indenter;
    private org.simpleframework.xml.stream.Formatter$Tag last;
    private java.lang.String prolog;
    private java.io.Writer result;

    static void <clinit>()
    {
        char[] $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7;

        $r0 = newarray (char)[5];

        $r0[0] = 120;

        $r0[1] = 109;

        $r0[2] = 108;

        $r0[3] = 110;

        $r0[4] = 115;

        <org.simpleframework.xml.stream.Formatter: char[] NAMESPACE> = $r0;

        $r1 = newarray (char)[4];

        $r1[0] = 38;

        $r1[1] = 108;

        $r1[2] = 116;

        $r1[3] = 59;

        <org.simpleframework.xml.stream.Formatter: char[] LESS> = $r1;

        $r2 = newarray (char)[4];

        $r2[0] = 38;

        $r2[1] = 103;

        $r2[2] = 116;

        $r2[3] = 59;

        <org.simpleframework.xml.stream.Formatter: char[] GREATER> = $r2;

        $r3 = newarray (char)[6];

        $r3[0] = 38;

        $r3[1] = 113;

        $r3[2] = 117;

        $r3[3] = 111;

        $r3[4] = 116;

        $r3[5] = 59;

        <org.simpleframework.xml.stream.Formatter: char[] DOUBLE> = $r3;

        $r4 = newarray (char)[6];

        $r4[0] = 38;

        $r4[1] = 97;

        $r4[2] = 112;

        $r4[3] = 111;

        $r4[4] = 115;

        $r4[5] = 59;

        <org.simpleframework.xml.stream.Formatter: char[] SINGLE> = $r4;

        $r5 = newarray (char)[5];

        $r5[0] = 38;

        $r5[1] = 97;

        $r5[2] = 109;

        $r5[3] = 112;

        $r5[4] = 59;

        <org.simpleframework.xml.stream.Formatter: char[] AND> = $r5;

        $r6 = newarray (char)[5];

        $r6[0] = 60;

        $r6[1] = 33;

        $r6[2] = 45;

        $r6[3] = 45;

        $r6[4] = 32;

        <org.simpleframework.xml.stream.Formatter: char[] OPEN> = $r6;

        $r7 = newarray (char)[4];

        $r7[0] = 32;

        $r7[1] = 45;

        $r7[2] = 45;

        $r7[3] = 62;

        <org.simpleframework.xml.stream.Formatter: char[] CLOSE> = $r7;

        return;
    }

    public void <init>(java.io.Writer, org.simpleframework.xml.stream.Format)
    {
        org.simpleframework.xml.stream.OutputBuffer $r0;
        org.simpleframework.xml.stream.Indenter $r1;
        java.lang.String $r2;
        java.io.BufferedWriter $r3;
        org.simpleframework.xml.stream.Format $r4;
        java.io.Writer $r5;
        org.simpleframework.xml.stream.Formatter $r6;

        $r6 := @this: org.simpleframework.xml.stream.Formatter;

        $r5 := @parameter0: java.io.Writer;

        $r4 := @parameter1: org.simpleframework.xml.stream.Format;

        specialinvoke $r6.<java.lang.Object: void <init>()>();

        $r3 = new java.io.BufferedWriter;

        specialinvoke $r3.<java.io.BufferedWriter: void <init>(java.io.Writer,int)>($r5, 1024);

        $r6.<org.simpleframework.xml.stream.Formatter: java.io.Writer result> = $r3;

        $r1 = new org.simpleframework.xml.stream.Indenter;

        specialinvoke $r1.<org.simpleframework.xml.stream.Indenter: void <init>(org.simpleframework.xml.stream.Format)>($r4);

        $r6.<org.simpleframework.xml.stream.Formatter: org.simpleframework.xml.stream.Indenter indenter> = $r1;

        $r0 = new org.simpleframework.xml.stream.OutputBuffer;

        specialinvoke $r0.<org.simpleframework.xml.stream.OutputBuffer: void <init>()>();

        $r6.<org.simpleframework.xml.stream.Formatter: org.simpleframework.xml.stream.OutputBuffer buffer> = $r0;

        $r2 = virtualinvoke $r4.<org.simpleframework.xml.stream.Format: java.lang.String getProlog()>();

        $r6.<org.simpleframework.xml.stream.Formatter: java.lang.String prolog> = $r2;

        return;
    }

    private void append(char) throws java.lang.Exception
    {
        org.simpleframework.xml.stream.OutputBuffer $r0;
        char $c0;
        org.simpleframework.xml.stream.Formatter $r1;

        $r1 := @this: org.simpleframework.xml.stream.Formatter;

        $c0 := @parameter0: char;

        $r0 = $r1.<org.simpleframework.xml.stream.Formatter: org.simpleframework.xml.stream.OutputBuffer buffer>;

        virtualinvoke $r0.<org.simpleframework.xml.stream.OutputBuffer: void append(char)>($c0);

        return;
    }

    private void append(java.lang.String) throws java.lang.Exception
    {
        org.simpleframework.xml.stream.OutputBuffer $r0;
        java.lang.String $r1;
        org.simpleframework.xml.stream.Formatter $r2;

        $r2 := @this: org.simpleframework.xml.stream.Formatter;

        $r1 := @parameter0: java.lang.String;

        $r0 = $r2.<org.simpleframework.xml.stream.Formatter: org.simpleframework.xml.stream.OutputBuffer buffer>;

        virtualinvoke $r0.<org.simpleframework.xml.stream.OutputBuffer: void append(java.lang.String)>($r1);

        return;
    }

    private void append(char[]) throws java.lang.Exception
    {
        org.simpleframework.xml.stream.OutputBuffer $r0;
        char[] $r1;
        org.simpleframework.xml.stream.Formatter $r2;

        $r2 := @this: org.simpleframework.xml.stream.Formatter;

        $r1 := @parameter0: char[];

        $r0 = $r2.<org.simpleframework.xml.stream.Formatter: org.simpleframework.xml.stream.OutputBuffer buffer>;

        virtualinvoke $r0.<org.simpleframework.xml.stream.OutputBuffer: void append(char[])>($r1);

        return;
    }

    private void data(java.lang.String) throws java.lang.Exception
    {
        java.lang.String $r0;
        org.simpleframework.xml.stream.Formatter $r1;

        $r1 := @this: org.simpleframework.xml.stream.Formatter;

        $r0 := @parameter0: java.lang.String;

        specialinvoke $r1.<org.simpleframework.xml.stream.Formatter: void write(java.lang.String)>("<![CDATA[");

        specialinvoke $r1.<org.simpleframework.xml.stream.Formatter: void write(java.lang.String)>($r0);

        specialinvoke $r1.<org.simpleframework.xml.stream.Formatter: void write(java.lang.String)>("]]>");

        return;
    }

    private void escape(char) throws java.lang.Exception
    {
        char[] $r0;
        char $c0;
        org.simpleframework.xml.stream.Formatter $r1;

        $r1 := @this: org.simpleframework.xml.stream.Formatter;

        $c0 := @parameter0: char;

        $r0 = specialinvoke $r1.<org.simpleframework.xml.stream.Formatter: char[] symbol(char)>($c0);

        if $r0 == null goto label1;

        specialinvoke $r1.<org.simpleframework.xml.stream.Formatter: void write(char[])>($r0);

        return;

     label1:
        specialinvoke $r1.<org.simpleframework.xml.stream.Formatter: void write(char)>($c0);

        return;
    }

    private void escape(java.lang.String) throws java.lang.Exception
    {
        char $c0;
        int $i1, $i2;
        java.lang.String $r0;
        org.simpleframework.xml.stream.Formatter $r1;

        $r1 := @this: org.simpleframework.xml.stream.Formatter;

        $r0 := @parameter0: java.lang.String;

        $i2 = virtualinvoke $r0.<java.lang.String: int length()>();

        $i1 = 0;

     label1:
        if $i1 >= $i2 goto label2;

        $c0 = virtualinvoke $r0.<java.lang.String: char charAt(int)>($i1);

        specialinvoke $r1.<org.simpleframework.xml.stream.Formatter: void escape(char)>($c0);

        $i1 = $i1 + 1;

        goto label1;

     label2:
        return;
    }

    private boolean isEmpty(java.lang.String)
    {
        int $i0;
        java.lang.String $r0;
        org.simpleframework.xml.stream.Formatter $r1;

        $r1 := @this: org.simpleframework.xml.stream.Formatter;

        $r0 := @parameter0: java.lang.String;

        if $r0 == null goto label2;

        $i0 = virtualinvoke $r0.<java.lang.String: int length()>();

        if $i0 != 0 goto label1;

        return 1;

     label1:
        return 0;

     label2:
        return 1;
    }

    private boolean isText(char)
    {
        char $c0;
        org.simpleframework.xml.stream.Formatter $r0;

        $r0 := @this: org.simpleframework.xml.stream.Formatter;

        $c0 := @parameter0: char;

        lookupswitch($c0)
        {
            case 9: goto label2;
            case 10: goto label2;
            case 13: goto label2;
            case 32: goto label2;
            default: goto label1;
        };

     label1:
        if $c0 <= 32 goto label4;

        if $c0 > 126 goto label4;

        if $c0 == 247 goto label3;

     label2:
        return 1;

     label3:
        return 0;

     label4:
        return 0;
    }

    private char[] symbol(char)
    {
        char[] r0, r2, r3, r4, r5;
        char $c0;
        org.simpleframework.xml.stream.Formatter $r1;

        $r1 := @this: org.simpleframework.xml.stream.Formatter;

        $c0 := @parameter0: char;

        lookupswitch($c0)
        {
            case 34: goto label4;
            case 38: goto label6;
            case 39: goto label5;
            case 60: goto label2;
            case 62: goto label3;
            default: goto label1;
        };

     label1:
        return null;

     label2:
        r0 = <org.simpleframework.xml.stream.Formatter: char[] LESS>;

        return r0;

     label3:
        r2 = <org.simpleframework.xml.stream.Formatter: char[] GREATER>;

        return r2;

     label4:
        r3 = <org.simpleframework.xml.stream.Formatter: char[] DOUBLE>;

        return r3;

     label5:
        r4 = <org.simpleframework.xml.stream.Formatter: char[] SINGLE>;

        return r4;

     label6:
        r5 = <org.simpleframework.xml.stream.Formatter: char[] AND>;

        return r5;
    }

    private java.lang.String unicode(char)
    {
        java.lang.String $r0;
        char $c0;
        org.simpleframework.xml.stream.Formatter $r1;

        $r1 := @this: org.simpleframework.xml.stream.Formatter;

        $c0 := @parameter0: char;

        $r0 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($c0);

        return $r0;
    }

    private void write(char) throws java.lang.Exception
    {
        java.io.Writer $r0, $r4;
        org.simpleframework.xml.stream.OutputBuffer $r1, $r3;
        char $c0;
        org.simpleframework.xml.stream.Formatter $r2;

        $r2 := @this: org.simpleframework.xml.stream.Formatter;

        $c0 := @parameter0: char;

        $r1 = $r2.<org.simpleframework.xml.stream.Formatter: org.simpleframework.xml.stream.OutputBuffer buffer>;

        $r0 = $r2.<org.simpleframework.xml.stream.Formatter: java.io.Writer result>;

        virtualinvoke $r1.<org.simpleframework.xml.stream.OutputBuffer: void write(java.io.Writer)>($r0);

        $r3 = $r2.<org.simpleframework.xml.stream.Formatter: org.simpleframework.xml.stream.OutputBuffer buffer>;

        virtualinvoke $r3.<org.simpleframework.xml.stream.OutputBuffer: void clear()>();

        $r4 = $r2.<org.simpleframework.xml.stream.Formatter: java.io.Writer result>;

        virtualinvoke $r4.<java.io.Writer: void write(int)>($c0);

        return;
    }

    private void write(java.lang.String) throws java.lang.Exception
    {
        java.io.Writer $r0, $r5;
        org.simpleframework.xml.stream.OutputBuffer $r1, $r4;
        java.lang.String $r2;
        org.simpleframework.xml.stream.Formatter $r3;

        $r3 := @this: org.simpleframework.xml.stream.Formatter;

        $r2 := @parameter0: java.lang.String;

        $r1 = $r3.<org.simpleframework.xml.stream.Formatter: org.simpleframework.xml.stream.OutputBuffer buffer>;

        $r0 = $r3.<org.simpleframework.xml.stream.Formatter: java.io.Writer result>;

        virtualinvoke $r1.<org.simpleframework.xml.stream.OutputBuffer: void write(java.io.Writer)>($r0);

        $r4 = $r3.<org.simpleframework.xml.stream.Formatter: org.simpleframework.xml.stream.OutputBuffer buffer>;

        virtualinvoke $r4.<org.simpleframework.xml.stream.OutputBuffer: void clear()>();

        $r5 = $r3.<org.simpleframework.xml.stream.Formatter: java.io.Writer result>;

        virtualinvoke $r5.<java.io.Writer: void write(java.lang.String)>($r2);

        return;
    }

    private void write(java.lang.String, java.lang.String) throws java.lang.Exception
    {
        boolean $z0;
        java.io.Writer $r0, $r6, $r7, $r8;
        org.simpleframework.xml.stream.OutputBuffer $r1, $r5;
        java.lang.String $r2, $r3;
        org.simpleframework.xml.stream.Formatter $r4;

        $r4 := @this: org.simpleframework.xml.stream.Formatter;

        $r2 := @parameter0: java.lang.String;

        $r3 := @parameter1: java.lang.String;

        $r1 = $r4.<org.simpleframework.xml.stream.Formatter: org.simpleframework.xml.stream.OutputBuffer buffer>;

        $r0 = $r4.<org.simpleframework.xml.stream.Formatter: java.io.Writer result>;

        virtualinvoke $r1.<org.simpleframework.xml.stream.OutputBuffer: void write(java.io.Writer)>($r0);

        $r5 = $r4.<org.simpleframework.xml.stream.Formatter: org.simpleframework.xml.stream.OutputBuffer buffer>;

        virtualinvoke $r5.<org.simpleframework.xml.stream.OutputBuffer: void clear()>();

        $z0 = specialinvoke $r4.<org.simpleframework.xml.stream.Formatter: boolean isEmpty(java.lang.String)>($r3);

        if $z0 != 0 goto label1;

        $r6 = $r4.<org.simpleframework.xml.stream.Formatter: java.io.Writer result>;

        virtualinvoke $r6.<java.io.Writer: void write(java.lang.String)>($r3);

        $r7 = $r4.<org.simpleframework.xml.stream.Formatter: java.io.Writer result>;

        virtualinvoke $r7.<java.io.Writer: void write(int)>(58);

     label1:
        $r8 = $r4.<org.simpleframework.xml.stream.Formatter: java.io.Writer result>;

        virtualinvoke $r8.<java.io.Writer: void write(java.lang.String)>($r2);

        return;
    }

    private void write(char[]) throws java.lang.Exception
    {
        java.io.Writer $r0, $r5;
        org.simpleframework.xml.stream.OutputBuffer $r1, $r4;
        char[] $r2;
        org.simpleframework.xml.stream.Formatter $r3;

        $r3 := @this: org.simpleframework.xml.stream.Formatter;

        $r2 := @parameter0: char[];

        $r1 = $r3.<org.simpleframework.xml.stream.Formatter: org.simpleframework.xml.stream.OutputBuffer buffer>;

        $r0 = $r3.<org.simpleframework.xml.stream.Formatter: java.io.Writer result>;

        virtualinvoke $r1.<org.simpleframework.xml.stream.OutputBuffer: void write(java.io.Writer)>($r0);

        $r4 = $r3.<org.simpleframework.xml.stream.Formatter: org.simpleframework.xml.stream.OutputBuffer buffer>;

        virtualinvoke $r4.<org.simpleframework.xml.stream.OutputBuffer: void clear()>();

        $r5 = $r3.<org.simpleframework.xml.stream.Formatter: java.io.Writer result>;

        virtualinvoke $r5.<java.io.Writer: void write(char[])>($r2);

        return;
    }

    public void flush() throws java.lang.Exception
    {
        java.io.Writer $r0, $r4;
        org.simpleframework.xml.stream.OutputBuffer $r1, $r3;
        org.simpleframework.xml.stream.Formatter $r2;

        $r2 := @this: org.simpleframework.xml.stream.Formatter;

        $r1 = $r2.<org.simpleframework.xml.stream.Formatter: org.simpleframework.xml.stream.OutputBuffer buffer>;

        $r0 = $r2.<org.simpleframework.xml.stream.Formatter: java.io.Writer result>;

        virtualinvoke $r1.<org.simpleframework.xml.stream.OutputBuffer: void write(java.io.Writer)>($r0);

        $r3 = $r2.<org.simpleframework.xml.stream.Formatter: org.simpleframework.xml.stream.OutputBuffer buffer>;

        virtualinvoke $r3.<org.simpleframework.xml.stream.OutputBuffer: void clear()>();

        $r4 = $r2.<org.simpleframework.xml.stream.Formatter: java.io.Writer result>;

        virtualinvoke $r4.<java.io.Writer: void flush()>();

        return;
    }

    public void writeAttribute(java.lang.String, java.lang.String, java.lang.String) throws java.lang.Exception
    {
        org.simpleframework.xml.stream.NodeException $r0;
        org.simpleframework.xml.stream.Formatter$Tag $r1, $r2;
        java.lang.String $r3, $r4, $r5;
        org.simpleframework.xml.stream.Formatter $r6;

        $r6 := @this: org.simpleframework.xml.stream.Formatter;

        $r3 := @parameter0: java.lang.String;

        $r4 := @parameter1: java.lang.String;

        $r5 := @parameter2: java.lang.String;

        $r1 = $r6.<org.simpleframework.xml.stream.Formatter: org.simpleframework.xml.stream.Formatter$Tag last>;

        $r2 = <org.simpleframework.xml.stream.Formatter$Tag: org.simpleframework.xml.stream.Formatter$Tag START>;

        if $r1 == $r2 goto label1;

        $r0 = new org.simpleframework.xml.stream.NodeException;

        specialinvoke $r0.<org.simpleframework.xml.stream.NodeException: void <init>(java.lang.String)>("Start element required");

        throw $r0;

     label1:
        specialinvoke $r6.<org.simpleframework.xml.stream.Formatter: void write(char)>(32);

        specialinvoke $r6.<org.simpleframework.xml.stream.Formatter: void write(java.lang.String,java.lang.String)>($r3, $r5);

        specialinvoke $r6.<org.simpleframework.xml.stream.Formatter: void write(char)>(61);

        specialinvoke $r6.<org.simpleframework.xml.stream.Formatter: void write(char)>(34);

        specialinvoke $r6.<org.simpleframework.xml.stream.Formatter: void escape(java.lang.String)>($r4);

        specialinvoke $r6.<org.simpleframework.xml.stream.Formatter: void write(char)>(34);

        return;
    }

    public void writeComment(java.lang.String) throws java.lang.Exception
    {
        char[] $r0, $r7;
        org.simpleframework.xml.stream.Formatter$Tag $r1, $r2, $r8;
        org.simpleframework.xml.stream.Indenter $r3;
        java.lang.String $r4, $r5;
        org.simpleframework.xml.stream.Formatter $r6;

        $r6 := @this: org.simpleframework.xml.stream.Formatter;

        $r4 := @parameter0: java.lang.String;

        $r3 = $r6.<org.simpleframework.xml.stream.Formatter: org.simpleframework.xml.stream.Indenter indenter>;

        $r5 = virtualinvoke $r3.<org.simpleframework.xml.stream.Indenter: java.lang.String top()>();

        $r2 = $r6.<org.simpleframework.xml.stream.Formatter: org.simpleframework.xml.stream.Formatter$Tag last>;

        $r1 = <org.simpleframework.xml.stream.Formatter$Tag: org.simpleframework.xml.stream.Formatter$Tag START>;

        if $r2 != $r1 goto label1;

        specialinvoke $r6.<org.simpleframework.xml.stream.Formatter: void append(char)>(62);

     label1:
        if $r5 == null goto label2;

        specialinvoke $r6.<org.simpleframework.xml.stream.Formatter: void append(java.lang.String)>($r5);

        $r0 = <org.simpleframework.xml.stream.Formatter: char[] OPEN>;

        specialinvoke $r6.<org.simpleframework.xml.stream.Formatter: void append(char[])>($r0);

        specialinvoke $r6.<org.simpleframework.xml.stream.Formatter: void append(java.lang.String)>($r4);

        $r7 = <org.simpleframework.xml.stream.Formatter: char[] CLOSE>;

        specialinvoke $r6.<org.simpleframework.xml.stream.Formatter: void append(char[])>($r7);

     label2:
        $r8 = <org.simpleframework.xml.stream.Formatter$Tag: org.simpleframework.xml.stream.Formatter$Tag COMMENT>;

        $r6.<org.simpleframework.xml.stream.Formatter: org.simpleframework.xml.stream.Formatter$Tag last> = $r8;

        return;
    }

    public void writeEnd(java.lang.String, java.lang.String) throws java.lang.Exception
    {
        org.simpleframework.xml.stream.Formatter$Tag $r0, $r1, $r7, $r8, $r9, $r10, $r11;
        org.simpleframework.xml.stream.Indenter $r2;
        java.lang.String $r3, $r4, $r5;
        org.simpleframework.xml.stream.Formatter $r6;

        $r6 := @this: org.simpleframework.xml.stream.Formatter;

        $r3 := @parameter0: java.lang.String;

        $r4 := @parameter1: java.lang.String;

        $r2 = $r6.<org.simpleframework.xml.stream.Formatter: org.simpleframework.xml.stream.Indenter indenter>;

        $r5 = virtualinvoke $r2.<org.simpleframework.xml.stream.Indenter: java.lang.String pop()>();

        $r1 = $r6.<org.simpleframework.xml.stream.Formatter: org.simpleframework.xml.stream.Formatter$Tag last>;

        $r0 = <org.simpleframework.xml.stream.Formatter$Tag: org.simpleframework.xml.stream.Formatter$Tag START>;

        if $r1 != $r0 goto label2;

        specialinvoke $r6.<org.simpleframework.xml.stream.Formatter: void write(char)>(47);

        specialinvoke $r6.<org.simpleframework.xml.stream.Formatter: void write(char)>(62);

     label1:
        $r7 = <org.simpleframework.xml.stream.Formatter$Tag: org.simpleframework.xml.stream.Formatter$Tag END>;

        $r6.<org.simpleframework.xml.stream.Formatter: org.simpleframework.xml.stream.Formatter$Tag last> = $r7;

        return;

     label2:
        $r8 = $r6.<org.simpleframework.xml.stream.Formatter: org.simpleframework.xml.stream.Formatter$Tag last>;

        $r9 = <org.simpleframework.xml.stream.Formatter$Tag: org.simpleframework.xml.stream.Formatter$Tag TEXT>;

        if $r8 == $r9 goto label3;

        specialinvoke $r6.<org.simpleframework.xml.stream.Formatter: void write(java.lang.String)>($r5);

     label3:
        $r10 = $r6.<org.simpleframework.xml.stream.Formatter: org.simpleframework.xml.stream.Formatter$Tag last>;

        $r11 = <org.simpleframework.xml.stream.Formatter$Tag: org.simpleframework.xml.stream.Formatter$Tag START>;

        if $r10 == $r11 goto label1;

        specialinvoke $r6.<org.simpleframework.xml.stream.Formatter: void write(char)>(60);

        specialinvoke $r6.<org.simpleframework.xml.stream.Formatter: void write(char)>(47);

        specialinvoke $r6.<org.simpleframework.xml.stream.Formatter: void write(java.lang.String,java.lang.String)>($r3, $r4);

        specialinvoke $r6.<org.simpleframework.xml.stream.Formatter: void write(char)>(62);

        goto label1;
    }

    public void writeNamespace(java.lang.String, java.lang.String) throws java.lang.Exception
    {
        char[] $r0;
        org.simpleframework.xml.stream.NodeException $r1;
        boolean $z0;
        org.simpleframework.xml.stream.Formatter$Tag $r2, $r3;
        java.lang.String $r4, $r5;
        org.simpleframework.xml.stream.Formatter $r6;

        $r6 := @this: org.simpleframework.xml.stream.Formatter;

        $r4 := @parameter0: java.lang.String;

        $r5 := @parameter1: java.lang.String;

        $r2 = $r6.<org.simpleframework.xml.stream.Formatter: org.simpleframework.xml.stream.Formatter$Tag last>;

        $r3 = <org.simpleframework.xml.stream.Formatter$Tag: org.simpleframework.xml.stream.Formatter$Tag START>;

        if $r2 == $r3 goto label1;

        $r1 = new org.simpleframework.xml.stream.NodeException;

        specialinvoke $r1.<org.simpleframework.xml.stream.NodeException: void <init>(java.lang.String)>("Start element required");

        throw $r1;

     label1:
        specialinvoke $r6.<org.simpleframework.xml.stream.Formatter: void write(char)>(32);

        $r0 = <org.simpleframework.xml.stream.Formatter: char[] NAMESPACE>;

        specialinvoke $r6.<org.simpleframework.xml.stream.Formatter: void write(char[])>($r0);

        $z0 = specialinvoke $r6.<org.simpleframework.xml.stream.Formatter: boolean isEmpty(java.lang.String)>($r5);

        if $z0 != 0 goto label2;

        specialinvoke $r6.<org.simpleframework.xml.stream.Formatter: void write(char)>(58);

        specialinvoke $r6.<org.simpleframework.xml.stream.Formatter: void write(java.lang.String)>($r5);

     label2:
        specialinvoke $r6.<org.simpleframework.xml.stream.Formatter: void write(char)>(61);

        specialinvoke $r6.<org.simpleframework.xml.stream.Formatter: void write(char)>(34);

        specialinvoke $r6.<org.simpleframework.xml.stream.Formatter: void escape(java.lang.String)>($r4);

        specialinvoke $r6.<org.simpleframework.xml.stream.Formatter: void write(char)>(34);

        return;
    }

    public void writeProlog() throws java.lang.Exception
    {
        java.lang.String $r0, $r2;
        org.simpleframework.xml.stream.Formatter $r1;

        $r1 := @this: org.simpleframework.xml.stream.Formatter;

        $r0 = $r1.<org.simpleframework.xml.stream.Formatter: java.lang.String prolog>;

        if $r0 == null goto label1;

        $r2 = $r1.<org.simpleframework.xml.stream.Formatter: java.lang.String prolog>;

        specialinvoke $r1.<org.simpleframework.xml.stream.Formatter: void write(java.lang.String)>($r2);

        specialinvoke $r1.<org.simpleframework.xml.stream.Formatter: void write(java.lang.String)>("\n");

        return;

     label1:
        return;
    }

    public void writeStart(java.lang.String, java.lang.String) throws java.lang.Exception
    {
        boolean $z0;
        org.simpleframework.xml.stream.Formatter$Tag $r0, $r1, $r7;
        org.simpleframework.xml.stream.Indenter $r2;
        java.lang.String $r3, $r4, $r5;
        org.simpleframework.xml.stream.Formatter $r6;

        $r6 := @this: org.simpleframework.xml.stream.Formatter;

        $r3 := @parameter0: java.lang.String;

        $r4 := @parameter1: java.lang.String;

        $r2 = $r6.<org.simpleframework.xml.stream.Formatter: org.simpleframework.xml.stream.Indenter indenter>;

        $r5 = virtualinvoke $r2.<org.simpleframework.xml.stream.Indenter: java.lang.String push()>();

        $r1 = $r6.<org.simpleframework.xml.stream.Formatter: org.simpleframework.xml.stream.Formatter$Tag last>;

        $r0 = <org.simpleframework.xml.stream.Formatter$Tag: org.simpleframework.xml.stream.Formatter$Tag START>;

        if $r1 != $r0 goto label1;

        specialinvoke $r6.<org.simpleframework.xml.stream.Formatter: void append(char)>(62);

     label1:
        virtualinvoke $r6.<org.simpleframework.xml.stream.Formatter: void flush()>();

        specialinvoke $r6.<org.simpleframework.xml.stream.Formatter: void append(java.lang.String)>($r5);

        specialinvoke $r6.<org.simpleframework.xml.stream.Formatter: void append(char)>(60);

        $z0 = specialinvoke $r6.<org.simpleframework.xml.stream.Formatter: boolean isEmpty(java.lang.String)>($r4);

        if $z0 != 0 goto label2;

        specialinvoke $r6.<org.simpleframework.xml.stream.Formatter: void append(java.lang.String)>($r4);

        specialinvoke $r6.<org.simpleframework.xml.stream.Formatter: void append(char)>(58);

     label2:
        specialinvoke $r6.<org.simpleframework.xml.stream.Formatter: void append(java.lang.String)>($r3);

        $r7 = <org.simpleframework.xml.stream.Formatter$Tag: org.simpleframework.xml.stream.Formatter$Tag START>;

        $r6.<org.simpleframework.xml.stream.Formatter: org.simpleframework.xml.stream.Formatter$Tag last> = $r7;

        return;
    }

    public void writeText(java.lang.String) throws java.lang.Exception
    {
        org.simpleframework.xml.stream.Mode $r0;
        java.lang.String $r1;
        org.simpleframework.xml.stream.Formatter $r2;

        $r2 := @this: org.simpleframework.xml.stream.Formatter;

        $r1 := @parameter0: java.lang.String;

        $r0 = <org.simpleframework.xml.stream.Mode: org.simpleframework.xml.stream.Mode ESCAPE>;

        virtualinvoke $r2.<org.simpleframework.xml.stream.Formatter: void writeText(java.lang.String,org.simpleframework.xml.stream.Mode)>($r1, $r0);

        return;
    }

    public void writeText(java.lang.String, org.simpleframework.xml.stream.Mode) throws java.lang.Exception
    {
        org.simpleframework.xml.stream.Formatter$Tag $r0, $r1, $r6;
        org.simpleframework.xml.stream.Mode $r2, $r3;
        java.lang.String $r4;
        org.simpleframework.xml.stream.Formatter $r5;

        $r5 := @this: org.simpleframework.xml.stream.Formatter;

        $r4 := @parameter0: java.lang.String;

        $r2 := @parameter1: org.simpleframework.xml.stream.Mode;

        $r0 = $r5.<org.simpleframework.xml.stream.Formatter: org.simpleframework.xml.stream.Formatter$Tag last>;

        $r1 = <org.simpleframework.xml.stream.Formatter$Tag: org.simpleframework.xml.stream.Formatter$Tag START>;

        if $r0 != $r1 goto label1;

        specialinvoke $r5.<org.simpleframework.xml.stream.Formatter: void write(char)>(62);

     label1:
        $r3 = <org.simpleframework.xml.stream.Mode: org.simpleframework.xml.stream.Mode DATA>;

        if $r2 != $r3 goto label3;

        specialinvoke $r5.<org.simpleframework.xml.stream.Formatter: void data(java.lang.String)>($r4);

     label2:
        $r6 = <org.simpleframework.xml.stream.Formatter$Tag: org.simpleframework.xml.stream.Formatter$Tag TEXT>;

        $r5.<org.simpleframework.xml.stream.Formatter: org.simpleframework.xml.stream.Formatter$Tag last> = $r6;

        return;

     label3:
        specialinvoke $r5.<org.simpleframework.xml.stream.Formatter: void escape(java.lang.String)>($r4);

        goto label2;
    }
}
