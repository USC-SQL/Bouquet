class org.simpleframework.xml.util.WeakCache$Segment extends java.util.WeakHashMap
{
    final org.simpleframework.xml.util.WeakCache this$0;

    private void <init>(org.simpleframework.xml.util.WeakCache)
    {
        org.simpleframework.xml.util.WeakCache $r0;
        org.simpleframework.xml.util.WeakCache$Segment $r1;

        $r1 := @this: org.simpleframework.xml.util.WeakCache$Segment;

        $r0 := @parameter0: org.simpleframework.xml.util.WeakCache;

        $r1.<org.simpleframework.xml.util.WeakCache$Segment: org.simpleframework.xml.util.WeakCache this$0> = $r0;

        specialinvoke $r1.<java.util.WeakHashMap: void <init>()>();

        return;
    }

    void <init>(org.simpleframework.xml.util.WeakCache, org.simpleframework.xml.util.WeakCache$1)
    {
        org.simpleframework.xml.util.WeakCache$1 $r0;
        org.simpleframework.xml.util.WeakCache $r1;
        org.simpleframework.xml.util.WeakCache$Segment $r2;

        $r2 := @this: org.simpleframework.xml.util.WeakCache$Segment;

        $r1 := @parameter0: org.simpleframework.xml.util.WeakCache;

        $r0 := @parameter1: org.simpleframework.xml.util.WeakCache$1;

        specialinvoke $r2.<org.simpleframework.xml.util.WeakCache$Segment: void <init>(org.simpleframework.xml.util.WeakCache)>($r1);

        return;
    }

    public void cache(java.lang.Object, java.lang.Object)
    {
        java.lang.Throwable $r0;
        java.lang.Object $r1, $r2;
        org.simpleframework.xml.util.WeakCache$Segment $r3;

        $r3 := @this: org.simpleframework.xml.util.WeakCache$Segment;

        $r1 := @parameter0: java.lang.Object;

        $r2 := @parameter1: java.lang.Object;

        entermonitor $r3;

     label1:
        virtualinvoke $r3.<org.simpleframework.xml.util.WeakCache$Segment: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, $r2);

     label2:
        exitmonitor $r3;

        return;

     label3:
        $r0 := @caughtexception;

        exitmonitor $r3;

        throw $r0;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public boolean contains(java.lang.Object)
    {
        java.lang.Throwable $r0;
        boolean $z0;
        java.lang.Object $r1;
        org.simpleframework.xml.util.WeakCache$Segment $r2;

        $r2 := @this: org.simpleframework.xml.util.WeakCache$Segment;

        $r1 := @parameter0: java.lang.Object;

        entermonitor $r2;

     label1:
        $z0 = virtualinvoke $r2.<org.simpleframework.xml.util.WeakCache$Segment: boolean containsKey(java.lang.Object)>($r1);

     label2:
        exitmonitor $r2;

        return $z0;

     label3:
        $r0 := @caughtexception;

        exitmonitor $r2;

        throw $r0;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public java.lang.Object fetch(java.lang.Object)
    {
        java.lang.Throwable $r0;
        java.lang.Object $r1, $r3;
        org.simpleframework.xml.util.WeakCache$Segment $r2;

        $r2 := @this: org.simpleframework.xml.util.WeakCache$Segment;

        $r1 := @parameter0: java.lang.Object;

        entermonitor $r2;

     label1:
        $r3 = virtualinvoke $r2.<org.simpleframework.xml.util.WeakCache$Segment: java.lang.Object get(java.lang.Object)>($r1);

     label2:
        exitmonitor $r2;

        return $r3;

     label3:
        $r0 := @caughtexception;

        exitmonitor $r2;

        throw $r0;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public java.lang.Object take(java.lang.Object)
    {
        java.lang.Throwable $r0;
        java.lang.Object $r1, $r3;
        org.simpleframework.xml.util.WeakCache$Segment $r2;

        $r2 := @this: org.simpleframework.xml.util.WeakCache$Segment;

        $r1 := @parameter0: java.lang.Object;

        entermonitor $r2;

     label1:
        $r3 = virtualinvoke $r2.<org.simpleframework.xml.util.WeakCache$Segment: java.lang.Object remove(java.lang.Object)>($r1);

     label2:
        exitmonitor $r2;

        return $r3;

     label3:
        $r0 := @caughtexception;

        exitmonitor $r2;

        throw $r0;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
}
