class org.simpleframework.xml.core.Support extends java.lang.Object implements org.simpleframework.xml.filter.Filter
{
    private final org.simpleframework.xml.core.InstanceFactory creator;
    private final org.simpleframework.xml.core.ScannerFactory factory;
    private final org.simpleframework.xml.filter.Filter filter;
    private final org.simpleframework.xml.stream.Format format;
    private final org.simpleframework.xml.transform.Matcher matcher;
    private final org.simpleframework.xml.transform.Transformer transform;

    public void <init>()
    {
        org.simpleframework.xml.filter.PlatformFilter $r0;
        org.simpleframework.xml.core.Support $r1;

        $r1 := @this: org.simpleframework.xml.core.Support;

        $r0 = new org.simpleframework.xml.filter.PlatformFilter;

        specialinvoke $r0.<org.simpleframework.xml.filter.PlatformFilter: void <init>()>();

        specialinvoke $r1.<org.simpleframework.xml.core.Support: void <init>(org.simpleframework.xml.filter.Filter)>($r0);

        return;
    }

    public void <init>(org.simpleframework.xml.filter.Filter)
    {
        org.simpleframework.xml.core.EmptyMatcher $r0;
        org.simpleframework.xml.filter.Filter $r1;
        org.simpleframework.xml.core.Support $r2;

        $r2 := @this: org.simpleframework.xml.core.Support;

        $r1 := @parameter0: org.simpleframework.xml.filter.Filter;

        $r0 = new org.simpleframework.xml.core.EmptyMatcher;

        specialinvoke $r0.<org.simpleframework.xml.core.EmptyMatcher: void <init>()>();

        specialinvoke $r2.<org.simpleframework.xml.core.Support: void <init>(org.simpleframework.xml.filter.Filter,org.simpleframework.xml.transform.Matcher)>($r1, $r0);

        return;
    }

    public void <init>(org.simpleframework.xml.filter.Filter, org.simpleframework.xml.transform.Matcher)
    {
        org.simpleframework.xml.stream.Format $r0;
        org.simpleframework.xml.transform.Matcher $r1;
        org.simpleframework.xml.filter.Filter $r2;
        org.simpleframework.xml.core.Support $r3;

        $r3 := @this: org.simpleframework.xml.core.Support;

        $r2 := @parameter0: org.simpleframework.xml.filter.Filter;

        $r1 := @parameter1: org.simpleframework.xml.transform.Matcher;

        $r0 = new org.simpleframework.xml.stream.Format;

        specialinvoke $r0.<org.simpleframework.xml.stream.Format: void <init>()>();

        specialinvoke $r3.<org.simpleframework.xml.core.Support: void <init>(org.simpleframework.xml.filter.Filter,org.simpleframework.xml.transform.Matcher,org.simpleframework.xml.stream.Format)>($r2, $r1, $r0);

        return;
    }

    public void <init>(org.simpleframework.xml.filter.Filter, org.simpleframework.xml.transform.Matcher, org.simpleframework.xml.stream.Format)
    {
        org.simpleframework.xml.core.InstanceFactory $r0;
        org.simpleframework.xml.core.ScannerFactory $r1;
        org.simpleframework.xml.transform.Transformer $r2;
        org.simpleframework.xml.stream.Format $r3;
        org.simpleframework.xml.transform.Matcher $r4;
        org.simpleframework.xml.filter.Filter $r5;
        org.simpleframework.xml.core.Support $r6;

        $r6 := @this: org.simpleframework.xml.core.Support;

        $r5 := @parameter0: org.simpleframework.xml.filter.Filter;

        $r4 := @parameter1: org.simpleframework.xml.transform.Matcher;

        $r3 := @parameter2: org.simpleframework.xml.stream.Format;

        specialinvoke $r6.<java.lang.Object: void <init>()>();

        $r2 = new org.simpleframework.xml.transform.Transformer;

        specialinvoke $r2.<org.simpleframework.xml.transform.Transformer: void <init>(org.simpleframework.xml.transform.Matcher)>($r4);

        $r6.<org.simpleframework.xml.core.Support: org.simpleframework.xml.transform.Transformer transform> = $r2;

        $r1 = new org.simpleframework.xml.core.ScannerFactory;

        specialinvoke $r1.<org.simpleframework.xml.core.ScannerFactory: void <init>(org.simpleframework.xml.stream.Format)>($r3);

        $r6.<org.simpleframework.xml.core.Support: org.simpleframework.xml.core.ScannerFactory factory> = $r1;

        $r0 = new org.simpleframework.xml.core.InstanceFactory;

        specialinvoke $r0.<org.simpleframework.xml.core.InstanceFactory: void <init>()>();

        $r6.<org.simpleframework.xml.core.Support: org.simpleframework.xml.core.InstanceFactory creator> = $r0;

        $r6.<org.simpleframework.xml.core.Support: org.simpleframework.xml.transform.Matcher matcher> = $r4;

        $r6.<org.simpleframework.xml.core.Support: org.simpleframework.xml.filter.Filter filter> = $r5;

        $r6.<org.simpleframework.xml.core.Support: org.simpleframework.xml.stream.Format format> = $r3;

        return;
    }

    private java.lang.String getClassName(java.lang.Class) throws java.lang.Exception
    {
        java.lang.String $r0, $r3;
        boolean $z0, $z1;
        java.lang.Class $r1;
        org.simpleframework.xml.core.Support $r2;

        $r2 := @this: org.simpleframework.xml.core.Support;

        $r1 := @parameter0: java.lang.Class;

        $z0 = virtualinvoke $r1.<java.lang.Class: boolean isArray()>();

        if $z0 == 0 goto label1;

        $r1 = virtualinvoke $r1.<java.lang.Class: java.lang.Class getComponentType()>();

     label1:
        $r0 = virtualinvoke $r1.<java.lang.Class: java.lang.String getSimpleName()>();

        $z1 = virtualinvoke $r1.<java.lang.Class: boolean isPrimitive()>();

        if $z1 == 0 goto label2;

        return $r0;

     label2:
        $r3 = staticinvoke <org.simpleframework.xml.core.Reflector: java.lang.String getName(java.lang.String)>($r0);

        return $r3;
    }

    public static java.lang.Class getPrimitive(java.lang.Class)
    {
        java.lang.Class $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8;

        $r0 := @parameter0: java.lang.Class;

        $r1 = <java.lang.Double: java.lang.Class TYPE>;

        if $r0 != $r1 goto label1;

        return class "java/lang/Double";

     label1:
        $r2 = <java.lang.Float: java.lang.Class TYPE>;

        if $r0 != $r2 goto label2;

        return class "java/lang/Float";

     label2:
        $r3 = <java.lang.Integer: java.lang.Class TYPE>;

        if $r0 != $r3 goto label3;

        return class "java/lang/Integer";

     label3:
        $r4 = <java.lang.Long: java.lang.Class TYPE>;

        if $r0 != $r4 goto label4;

        return class "java/lang/Long";

     label4:
        $r5 = <java.lang.Boolean: java.lang.Class TYPE>;

        if $r0 != $r5 goto label5;

        return class "java/lang/Boolean";

     label5:
        $r6 = <java.lang.Character: java.lang.Class TYPE>;

        if $r0 != $r6 goto label6;

        return class "java/lang/Character";

     label6:
        $r7 = <java.lang.Short: java.lang.Class TYPE>;

        if $r0 != $r7 goto label7;

        return class "java/lang/Short";

     label7:
        $r8 = <java.lang.Byte: java.lang.Class TYPE>;

        if $r0 != $r8 goto label8;

        return class "java/lang/Byte";

     label8:
        return $r0;
    }

    public static boolean isAssignable(java.lang.Class, java.lang.Class)
    {
        boolean $z0, $z1, $z2;
        java.lang.Class $r0, $r1;

        $r0 := @parameter0: java.lang.Class;

        $r1 := @parameter1: java.lang.Class;

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean isPrimitive()>();

        if $z0 == 0 goto label1;

        $r0 = staticinvoke <org.simpleframework.xml.core.Support: java.lang.Class getPrimitive(java.lang.Class)>($r0);

     label1:
        $z1 = virtualinvoke $r1.<java.lang.Class: boolean isPrimitive()>();

        if $z1 == 0 goto label2;

        $r1 = staticinvoke <org.simpleframework.xml.core.Support: java.lang.Class getPrimitive(java.lang.Class)>($r1);

     label2:
        $z2 = virtualinvoke $r1.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r0);

        return $z2;
    }

    public static boolean isFloat(java.lang.Class) throws java.lang.Exception
    {
        java.lang.Class $r0, $r1, $r2;

        $r0 := @parameter0: java.lang.Class;

        if $r0 != class "java/lang/Double" goto label1;

        return 1;

     label1:
        if $r0 == class "java/lang/Float" goto label2;

        $r1 = <java.lang.Float: java.lang.Class TYPE>;

        if $r0 == $r1 goto label3;

        $r2 = <java.lang.Double: java.lang.Class TYPE>;

        if $r0 == $r2 goto label4;

        return 0;

     label2:
        return 1;

     label3:
        return 1;

     label4:
        return 1;
    }

    public org.simpleframework.xml.core.Instance getInstance(java.lang.Class)
    {
        org.simpleframework.xml.core.Instance $r0;
        org.simpleframework.xml.core.InstanceFactory $r1;
        java.lang.Class $r2;
        org.simpleframework.xml.core.Support $r3;

        $r3 := @this: org.simpleframework.xml.core.Support;

        $r2 := @parameter0: java.lang.Class;

        $r1 = $r3.<org.simpleframework.xml.core.Support: org.simpleframework.xml.core.InstanceFactory creator>;

        $r0 = virtualinvoke $r1.<org.simpleframework.xml.core.InstanceFactory: org.simpleframework.xml.core.Instance getInstance(java.lang.Class)>($r2);

        return $r0;
    }

    public org.simpleframework.xml.core.Instance getInstance(org.simpleframework.xml.strategy.Value)
    {
        org.simpleframework.xml.core.Instance $r0;
        org.simpleframework.xml.core.InstanceFactory $r1;
        org.simpleframework.xml.strategy.Value $r2;
        org.simpleframework.xml.core.Support $r3;

        $r3 := @this: org.simpleframework.xml.core.Support;

        $r2 := @parameter0: org.simpleframework.xml.strategy.Value;

        $r1 = $r3.<org.simpleframework.xml.core.Support: org.simpleframework.xml.core.InstanceFactory creator>;

        $r0 = virtualinvoke $r1.<org.simpleframework.xml.core.InstanceFactory: org.simpleframework.xml.core.Instance getInstance(org.simpleframework.xml.strategy.Value)>($r2);

        return $r0;
    }

    public java.lang.String getName(java.lang.Class) throws java.lang.Exception
    {
        java.lang.String $r0, $r4;
        org.simpleframework.xml.core.Scanner $r1;
        java.lang.Class $r2;
        org.simpleframework.xml.core.Support $r3;

        $r3 := @this: org.simpleframework.xml.core.Support;

        $r2 := @parameter0: java.lang.Class;

        $r1 = virtualinvoke $r3.<org.simpleframework.xml.core.Support: org.simpleframework.xml.core.Scanner getScanner(java.lang.Class)>($r2);

        $r0 = virtualinvoke $r1.<org.simpleframework.xml.core.Scanner: java.lang.String getName()>();

        if $r0 == null goto label1;

        return $r0;

     label1:
        $r4 = specialinvoke $r3.<org.simpleframework.xml.core.Support: java.lang.String getClassName(java.lang.Class)>($r2);

        return $r4;
    }

    public org.simpleframework.xml.core.Scanner getScanner(java.lang.Class) throws java.lang.Exception
    {
        org.simpleframework.xml.core.Scanner $r0;
        org.simpleframework.xml.core.ScannerFactory $r1;
        java.lang.Class $r2;
        org.simpleframework.xml.core.Support $r3;

        $r3 := @this: org.simpleframework.xml.core.Support;

        $r2 := @parameter0: java.lang.Class;

        $r1 = $r3.<org.simpleframework.xml.core.Support: org.simpleframework.xml.core.ScannerFactory factory>;

        $r0 = virtualinvoke $r1.<org.simpleframework.xml.core.ScannerFactory: org.simpleframework.xml.core.Scanner getInstance(java.lang.Class)>($r2);

        return $r0;
    }

    public org.simpleframework.xml.stream.Style getStyle()
    {
        org.simpleframework.xml.stream.Style $r0;
        org.simpleframework.xml.stream.Format $r1;
        org.simpleframework.xml.core.Support $r2;

        $r2 := @this: org.simpleframework.xml.core.Support;

        $r1 = $r2.<org.simpleframework.xml.core.Support: org.simpleframework.xml.stream.Format format>;

        $r0 = virtualinvoke $r1.<org.simpleframework.xml.stream.Format: org.simpleframework.xml.stream.Style getStyle()>();

        return $r0;
    }

    public org.simpleframework.xml.transform.Transform getTransform(java.lang.Class) throws java.lang.Exception
    {
        org.simpleframework.xml.transform.Transform $r0;
        org.simpleframework.xml.transform.Matcher $r1;
        java.lang.Class $r2;
        org.simpleframework.xml.core.Support $r3;

        $r3 := @this: org.simpleframework.xml.core.Support;

        $r2 := @parameter0: java.lang.Class;

        $r1 = $r3.<org.simpleframework.xml.core.Support: org.simpleframework.xml.transform.Matcher matcher>;

        $r0 = interfaceinvoke $r1.<org.simpleframework.xml.transform.Matcher: org.simpleframework.xml.transform.Transform match(java.lang.Class)>($r2);

        return $r0;
    }

    public boolean isPrimitive(java.lang.Class) throws java.lang.Exception
    {
        org.simpleframework.xml.transform.Transformer $r0;
        boolean $z0, $z1, $z2;
        java.lang.Class $r1;
        org.simpleframework.xml.core.Support $r2;

        $r2 := @this: org.simpleframework.xml.core.Support;

        $r1 := @parameter0: java.lang.Class;

        if $r1 != class "java/lang/String" goto label1;

        return 1;

     label1:
        $z0 = virtualinvoke $r1.<java.lang.Class: boolean isEnum()>();

        if $z0 != 0 goto label2;

        $z1 = virtualinvoke $r1.<java.lang.Class: boolean isPrimitive()>();

        if $z1 != 0 goto label3;

        $r0 = $r2.<org.simpleframework.xml.core.Support: org.simpleframework.xml.transform.Transformer transform>;

        $z2 = virtualinvoke $r0.<org.simpleframework.xml.transform.Transformer: boolean valid(java.lang.Class)>($r1);

        return $z2;

     label2:
        return 1;

     label3:
        return 1;
    }

    public java.lang.Object read(java.lang.String, java.lang.Class) throws java.lang.Exception
    {
        java.lang.Object $r0;
        org.simpleframework.xml.transform.Transformer $r1;
        java.lang.Class $r2;
        java.lang.String $r3;
        org.simpleframework.xml.core.Support $r4;

        $r4 := @this: org.simpleframework.xml.core.Support;

        $r3 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.Class;

        $r1 = $r4.<org.simpleframework.xml.core.Support: org.simpleframework.xml.transform.Transformer transform>;

        $r0 = virtualinvoke $r1.<org.simpleframework.xml.transform.Transformer: java.lang.Object read(java.lang.String,java.lang.Class)>($r3, $r2);

        return $r0;
    }

    public java.lang.String replace(java.lang.String)
    {
        org.simpleframework.xml.filter.Filter $r0;
        java.lang.String $r1, $r3;
        org.simpleframework.xml.core.Support $r2;

        $r2 := @this: org.simpleframework.xml.core.Support;

        $r1 := @parameter0: java.lang.String;

        $r0 = $r2.<org.simpleframework.xml.core.Support: org.simpleframework.xml.filter.Filter filter>;

        $r3 = interfaceinvoke $r0.<org.simpleframework.xml.filter.Filter: java.lang.String replace(java.lang.String)>($r1);

        return $r3;
    }

    public boolean valid(java.lang.Class) throws java.lang.Exception
    {
        boolean $z0;
        org.simpleframework.xml.transform.Transformer $r0;
        java.lang.Class $r1;
        org.simpleframework.xml.core.Support $r2;

        $r2 := @this: org.simpleframework.xml.core.Support;

        $r1 := @parameter0: java.lang.Class;

        $r0 = $r2.<org.simpleframework.xml.core.Support: org.simpleframework.xml.transform.Transformer transform>;

        $z0 = virtualinvoke $r0.<org.simpleframework.xml.transform.Transformer: boolean valid(java.lang.Class)>($r1);

        return $z0;
    }

    public java.lang.String write(java.lang.Object, java.lang.Class) throws java.lang.Exception
    {
        java.lang.String $r0;
        org.simpleframework.xml.transform.Transformer $r1;
        java.lang.Class $r2;
        java.lang.Object $r3;
        org.simpleframework.xml.core.Support $r4;

        $r4 := @this: org.simpleframework.xml.core.Support;

        $r3 := @parameter0: java.lang.Object;

        $r2 := @parameter1: java.lang.Class;

        $r1 = $r4.<org.simpleframework.xml.core.Support: org.simpleframework.xml.transform.Transformer transform>;

        $r0 = virtualinvoke $r1.<org.simpleframework.xml.transform.Transformer: java.lang.String write(java.lang.Object,java.lang.Class)>($r3, $r2);

        return $r0;
    }
}
