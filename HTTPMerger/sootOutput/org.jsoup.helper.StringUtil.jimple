public final class org.jsoup.helper.StringUtil extends java.lang.Object
{
    private static final java.lang.String[] padding;

    static void <clinit>()
    {
        java.lang.String[] $r0;

        $r0 = newarray (java.lang.String)[11];

        $r0[0] = "";

        $r0[1] = " ";

        $r0[2] = "  ";

        $r0[3] = "   ";

        $r0[4] = "    ";

        $r0[5] = "     ";

        $r0[6] = "      ";

        $r0[7] = "       ";

        $r0[8] = "        ";

        $r0[9] = "         ";

        $r0[10] = "          ";

        <org.jsoup.helper.StringUtil: java.lang.String[] padding> = $r0;

        return;
    }

    public void <init>()
    {
        org.jsoup.helper.StringUtil $r0;

        $r0 := @this: org.jsoup.helper.StringUtil;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static transient boolean in(java.lang.String, java.lang.String[])
    {
        boolean $z0;
        int $i0, $i1;
        java.lang.String[] $r0;
        java.lang.String $r1, $r2;

        $r1 := @parameter0: java.lang.String;

        $r0 := @parameter1: java.lang.String[];

        $i1 = lengthof $r0;

        $i0 = 0;

     label1:
        if $i0 >= $i1 goto label3;

        $r2 = $r0[$i0];

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label2;

        return 1;

     label2:
        $i0 = $i0 + 1;

        goto label1;

     label3:
        return 0;
    }

    public static boolean isBlank(java.lang.String)
    {
        boolean $z0;
        int $i0, $i1, $i2, $i3;
        java.lang.String $r0;

        $r0 := @parameter0: java.lang.String;

        if $r0 == null goto label4;

        $i0 = virtualinvoke $r0.<java.lang.String: int length()>();

        if $i0 != 0 goto label1;

        return 1;

     label1:
        $i1 = virtualinvoke $r0.<java.lang.String: int length()>();

        $i3 = 0;

     label2:
        if $i3 >= $i1 goto label5;

        $i2 = virtualinvoke $r0.<java.lang.String: int codePointAt(int)>($i3);

        $z0 = staticinvoke <org.jsoup.helper.StringUtil: boolean isWhitespace(int)>($i2);

        if $z0 != 0 goto label3;

        return 0;

     label3:
        $i3 = $i3 + 1;

        goto label2;

     label4:
        return 1;

     label5:
        return 1;
    }

    public static boolean isNumeric(java.lang.String)
    {
        boolean $z0;
        int $i0, $i1, $i2, $i3;
        java.lang.String $r0;

        $r0 := @parameter0: java.lang.String;

        if $r0 == null goto label4;

        $i0 = virtualinvoke $r0.<java.lang.String: int length()>();

        if $i0 != 0 goto label1;

        return 0;

     label1:
        $i1 = virtualinvoke $r0.<java.lang.String: int length()>();

        $i3 = 0;

     label2:
        if $i3 >= $i1 goto label3;

        $i2 = virtualinvoke $r0.<java.lang.String: int codePointAt(int)>($i3);

        $z0 = staticinvoke <java.lang.Character: boolean isDigit(int)>($i2);

        if $z0 == 0 goto label5;

        $i3 = $i3 + 1;

        goto label2;

     label3:
        return 1;

     label4:
        return 0;

     label5:
        return 0;
    }

    public static boolean isWhitespace(int)
    {
        int $i0;

        $i0 := @parameter0: int;

        if $i0 == 32 goto label1;

        if $i0 == 9 goto label1;

        if $i0 == 10 goto label1;

        if $i0 == 12 goto label1;

        if $i0 != 13 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }

    public static java.lang.String join(java.util.Collection, java.lang.String)
    {
        java.util.Iterator $r0;
        java.lang.String $r1, $r3;
        java.util.Collection $r2;

        $r2 := @parameter0: java.util.Collection;

        $r1 := @parameter1: java.lang.String;

        $r0 = interfaceinvoke $r2.<java.util.Collection: java.util.Iterator iterator()>();

        $r3 = staticinvoke <org.jsoup.helper.StringUtil: java.lang.String join(java.util.Iterator,java.lang.String)>($r0, $r1);

        return $r3;
    }

    public static java.lang.String join(java.util.Iterator, java.lang.String)
    {
        java.lang.StringBuilder $r0, $r5;
        java.lang.Object $r1, $r6;
        boolean $z0, $z1, $z2;
        java.lang.String $r2, $r3, $r7;
        java.util.Iterator $r4;

        $r4 := @parameter0: java.util.Iterator;

        $r2 := @parameter1: java.lang.String;

        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        return "";

     label1:
        $r1 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        $r3 = virtualinvoke $r1.<java.lang.Object: java.lang.String toString()>();

        $z1 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>(int)>(64);

        $r5 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

     label2:
        $z2 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label3;

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r6 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r6);

        goto label2;

     label3:
        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r7;

     label4:
        return $r3;
    }

    public static java.lang.String normaliseWhitespace(java.lang.String)
    {
        java.lang.StringBuilder $r0;
        boolean $z0, $z1, $z2;
        int $i0, $i1, $i2, $i3;
        java.lang.String $r1, $r2;

        $r1 := @parameter0: java.lang.String;

        $r0 = new java.lang.StringBuilder;

        $i0 = virtualinvoke $r1.<java.lang.String: int length()>();

        specialinvoke $r0.<java.lang.StringBuilder: void <init>(int)>($i0);

        $z0 = 0;

        $z1 = 0;

        $i1 = virtualinvoke $r1.<java.lang.String: int length()>();

        $i3 = 0;

     label1:
        if $i3 >= $i1 goto label6;

        $i2 = virtualinvoke $r1.<java.lang.String: int codePointAt(int)>($i3);

        $z2 = staticinvoke <org.jsoup.helper.StringUtil: boolean isWhitespace(int)>($i2);

        if $z2 == 0 goto label5;

        if $z0 == 0 goto label3;

        $z1 = 1;

     label2:
        $i3 = $i3 + 1;

        goto label1;

     label3:
        if $i2 == 32 goto label4;

        $z1 = 1;

     label4:
        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32);

        $z0 = 1;

        goto label2;

     label5:
        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder appendCodePoint(int)>($i2);

        $z0 = 0;

        goto label2;

     label6:
        if $z1 == 0 goto label7;

        $r2 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r2;

     label7:
        return $r1;
    }

    public static java.lang.String padding(int)
    {
        java.lang.String[] $r0, $r4;
        java.lang.String $r1, $r5;
        java.lang.IllegalArgumentException $r2;
        char[] $r3;
        int $i0, $i1, $i2;

        $i0 := @parameter0: int;

        if $i0 >= 0 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("width must be > 0");

        throw $r2;

     label1:
        $r0 = <org.jsoup.helper.StringUtil: java.lang.String[] padding>;

        $i1 = lengthof $r0;

        if $i0 >= $i1 goto label2;

        $r4 = <org.jsoup.helper.StringUtil: java.lang.String[] padding>;

        $r1 = $r4[$i0];

        return $r1;

     label2:
        $r3 = newarray (char)[$i0];

        $i2 = 0;

     label3:
        if $i2 >= $i0 goto label4;

        $r3[$i2] = 32;

        $i2 = $i2 + 1;

        goto label3;

     label4:
        $r5 = staticinvoke <java.lang.String: java.lang.String valueOf(char[])>($r3);

        return $r5;
    }
}
