class org.jsoup.parser.ParseErrorList extends java.util.ArrayList
{
    private static final int INITIAL_CAPACITY;
    private final int maxSize;

    void <init>(int, int)
    {
        int $i0, $i1;
        org.jsoup.parser.ParseErrorList $r0;

        $r0 := @this: org.jsoup.parser.ParseErrorList;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        specialinvoke $r0.<java.util.ArrayList: void <init>(int)>($i0);

        $r0.<org.jsoup.parser.ParseErrorList: int maxSize> = $i1;

        return;
    }

    static org.jsoup.parser.ParseErrorList noTracking()
    {
        org.jsoup.parser.ParseErrorList $r0;

        $r0 = new org.jsoup.parser.ParseErrorList;

        specialinvoke $r0.<org.jsoup.parser.ParseErrorList: void <init>(int,int)>(0, 0);

        return $r0;
    }

    static org.jsoup.parser.ParseErrorList tracking(int)
    {
        org.jsoup.parser.ParseErrorList $r0;
        int $i0;

        $i0 := @parameter0: int;

        $r0 = new org.jsoup.parser.ParseErrorList;

        specialinvoke $r0.<org.jsoup.parser.ParseErrorList: void <init>(int,int)>(16, $i0);

        return $r0;
    }

    boolean canAddError()
    {
        int $i0, $i1;
        org.jsoup.parser.ParseErrorList $r0;

        $r0 := @this: org.jsoup.parser.ParseErrorList;

        $i1 = virtualinvoke $r0.<org.jsoup.parser.ParseErrorList: int size()>();

        $i0 = $r0.<org.jsoup.parser.ParseErrorList: int maxSize>;

        if $i1 >= $i0 goto label1;

        return 1;

     label1:
        return 0;
    }

    int getMaxSize()
    {
        int i0;
        org.jsoup.parser.ParseErrorList $r0;

        $r0 := @this: org.jsoup.parser.ParseErrorList;

        i0 = $r0.<org.jsoup.parser.ParseErrorList: int maxSize>;

        return i0;
    }

    public static void <clinit>()
    {
        <org.jsoup.parser.ParseErrorList: int INITIAL_CAPACITY> = 16;

        <org.jsoup.parser.ParseErrorList: int INITIAL_CAPACITY> = 16;

        return;
    }
}
