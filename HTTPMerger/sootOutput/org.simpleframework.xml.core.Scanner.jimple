class org.simpleframework.xml.core.Scanner extends java.lang.Object implements org.simpleframework.xml.core.Policy
{
    private org.simpleframework.xml.DefaultType access;
    private org.simpleframework.xml.core.StructureBuilder builder;
    private java.lang.String name;
    private boolean required;
    private org.simpleframework.xml.core.ClassScanner scanner;
    private org.simpleframework.xml.core.Structure structure;
    private java.lang.Class type;

    public void <init>(java.lang.Class) throws java.lang.Exception
    {
        org.simpleframework.xml.stream.Format $r0;
        java.lang.Class $r1;
        org.simpleframework.xml.core.Scanner $r2;

        $r2 := @this: org.simpleframework.xml.core.Scanner;

        $r1 := @parameter0: java.lang.Class;

        $r0 = new org.simpleframework.xml.stream.Format;

        specialinvoke $r0.<org.simpleframework.xml.stream.Format: void <init>()>();

        specialinvoke $r2.<org.simpleframework.xml.core.Scanner: void <init>(java.lang.Class,org.simpleframework.xml.stream.Format)>($r1, $r0);

        return;
    }

    public void <init>(java.lang.Class, org.simpleframework.xml.stream.Format) throws java.lang.Exception
    {
        org.simpleframework.xml.core.StructureBuilder $r0;
        org.simpleframework.xml.core.ClassScanner $r1;
        org.simpleframework.xml.stream.Format $r2;
        java.lang.Class $r3;
        org.simpleframework.xml.core.Scanner $r4;

        $r4 := @this: org.simpleframework.xml.core.Scanner;

        $r3 := @parameter0: java.lang.Class;

        $r2 := @parameter1: org.simpleframework.xml.stream.Format;

        specialinvoke $r4.<java.lang.Object: void <init>()>();

        $r1 = new org.simpleframework.xml.core.ClassScanner;

        specialinvoke $r1.<org.simpleframework.xml.core.ClassScanner: void <init>(java.lang.Class,org.simpleframework.xml.stream.Format)>($r3, $r2);

        $r4.<org.simpleframework.xml.core.Scanner: org.simpleframework.xml.core.ClassScanner scanner> = $r1;

        $r0 = new org.simpleframework.xml.core.StructureBuilder;

        specialinvoke $r0.<org.simpleframework.xml.core.StructureBuilder: void <init>(org.simpleframework.xml.core.Scanner,java.lang.Class,org.simpleframework.xml.stream.Format)>($r4, $r3, $r2);

        $r4.<org.simpleframework.xml.core.Scanner: org.simpleframework.xml.core.StructureBuilder builder> = $r0;

        $r4.<org.simpleframework.xml.core.Scanner: java.lang.Class type> = $r3;

        specialinvoke $r4.<org.simpleframework.xml.core.Scanner: void scan(java.lang.Class)>($r3);

        return;
    }

    private void access(java.lang.Class)
    {
        org.simpleframework.xml.DefaultType $r0;
        boolean $z0;
        org.simpleframework.xml.Default $r1;
        org.simpleframework.xml.core.ClassScanner $r2;
        java.lang.Class $r3;
        org.simpleframework.xml.core.Scanner $r4;

        $r4 := @this: org.simpleframework.xml.core.Scanner;

        $r3 := @parameter0: java.lang.Class;

        $r2 = $r4.<org.simpleframework.xml.core.Scanner: org.simpleframework.xml.core.ClassScanner scanner>;

        $r1 = virtualinvoke $r2.<org.simpleframework.xml.core.ClassScanner: org.simpleframework.xml.Default getDefault()>();

        if $r1 == null goto label1;

        $z0 = interfaceinvoke $r1.<org.simpleframework.xml.Default: boolean required()>();

        $r4.<org.simpleframework.xml.core.Scanner: boolean required> = $z0;

        $r0 = interfaceinvoke $r1.<org.simpleframework.xml.Default: org.simpleframework.xml.DefaultType value()>();

        $r4.<org.simpleframework.xml.core.Scanner: org.simpleframework.xml.DefaultType access> = $r0;

        return;

     label1:
        return;
    }

    private void commit(java.lang.Class) throws java.lang.Exception
    {
        org.simpleframework.xml.core.StructureBuilder $r0;
        org.simpleframework.xml.core.Structure $r1, $r4;
        java.lang.Class $r2;
        org.simpleframework.xml.core.Scanner $r3;

        $r3 := @this: org.simpleframework.xml.core.Scanner;

        $r2 := @parameter0: java.lang.Class;

        $r1 = $r3.<org.simpleframework.xml.core.Scanner: org.simpleframework.xml.core.Structure structure>;

        if $r1 != null goto label1;

        $r0 = $r3.<org.simpleframework.xml.core.Scanner: org.simpleframework.xml.core.StructureBuilder builder>;

        $r4 = virtualinvoke $r0.<org.simpleframework.xml.core.StructureBuilder: org.simpleframework.xml.core.Structure build(java.lang.Class)>($r2);

        $r3.<org.simpleframework.xml.core.Scanner: org.simpleframework.xml.core.Structure structure> = $r4;

     label1:
        $r3.<org.simpleframework.xml.core.Scanner: org.simpleframework.xml.core.StructureBuilder builder> = null;

        return;
    }

    private void field(java.lang.Class) throws java.lang.Exception
    {
        org.simpleframework.xml.core.StructureBuilder $r0;
        java.lang.annotation.Annotation $r1;
        org.simpleframework.xml.core.Contact $r2;
        java.lang.Object $r3;
        java.util.Iterator $r4;
        boolean $z0, $z1;
        org.simpleframework.xml.DefaultType $r5;
        org.simpleframework.xml.core.FieldScanner $r6;
        java.lang.Class $r7;
        org.simpleframework.xml.core.Scanner $r8;

        $r8 := @this: org.simpleframework.xml.core.Scanner;

        $r7 := @parameter0: java.lang.Class;

        $r6 = new org.simpleframework.xml.core.FieldScanner;

        $r5 = $r8.<org.simpleframework.xml.core.Scanner: org.simpleframework.xml.DefaultType access>;

        $z0 = $r8.<org.simpleframework.xml.core.Scanner: boolean required>;

        specialinvoke $r6.<org.simpleframework.xml.core.FieldScanner: void <init>(java.lang.Class,org.simpleframework.xml.DefaultType,boolean)>($r7, $r5, $z0);

        $r4 = virtualinvoke $r6.<org.simpleframework.xml.core.ContactList: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label2;

        $r3 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        $r2 = (org.simpleframework.xml.core.Contact) $r3;

        $r1 = interfaceinvoke $r2.<org.simpleframework.xml.core.Contact: java.lang.annotation.Annotation getAnnotation()>();

        if $r1 == null goto label1;

        $r0 = $r8.<org.simpleframework.xml.core.Scanner: org.simpleframework.xml.core.StructureBuilder builder>;

        virtualinvoke $r0.<org.simpleframework.xml.core.StructureBuilder: void process(org.simpleframework.xml.core.Contact,java.lang.annotation.Annotation)>($r2, $r1);

        goto label1;

     label2:
        return;
    }

    private boolean isEmpty(java.lang.String)
    {
        int $i0;
        java.lang.String $r0;
        org.simpleframework.xml.core.Scanner $r1;

        $r1 := @this: org.simpleframework.xml.core.Scanner;

        $r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke $r0.<java.lang.String: int length()>();

        if $i0 != 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    private void method(java.lang.Class) throws java.lang.Exception
    {
        org.simpleframework.xml.core.StructureBuilder $r0;
        java.lang.annotation.Annotation $r1;
        org.simpleframework.xml.core.Contact $r2;
        java.lang.Object $r3;
        java.util.Iterator $r4;
        boolean $z0, $z1;
        org.simpleframework.xml.DefaultType $r5;
        org.simpleframework.xml.core.MethodScanner $r6;
        java.lang.Class $r7;
        org.simpleframework.xml.core.Scanner $r8;

        $r8 := @this: org.simpleframework.xml.core.Scanner;

        $r7 := @parameter0: java.lang.Class;

        $r6 = new org.simpleframework.xml.core.MethodScanner;

        $r5 = $r8.<org.simpleframework.xml.core.Scanner: org.simpleframework.xml.DefaultType access>;

        $z0 = $r8.<org.simpleframework.xml.core.Scanner: boolean required>;

        specialinvoke $r6.<org.simpleframework.xml.core.MethodScanner: void <init>(java.lang.Class,org.simpleframework.xml.DefaultType,boolean)>($r7, $r5, $z0);

        $r4 = virtualinvoke $r6.<org.simpleframework.xml.core.ContactList: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label2;

        $r3 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        $r2 = (org.simpleframework.xml.core.Contact) $r3;

        $r1 = interfaceinvoke $r2.<org.simpleframework.xml.core.Contact: java.lang.annotation.Annotation getAnnotation()>();

        if $r1 == null goto label1;

        $r0 = $r8.<org.simpleframework.xml.core.Scanner: org.simpleframework.xml.core.StructureBuilder builder>;

        virtualinvoke $r0.<org.simpleframework.xml.core.StructureBuilder: void process(org.simpleframework.xml.core.Contact,java.lang.annotation.Annotation)>($r2, $r1);

        goto label1;

     label2:
        return;
    }

    private void order(java.lang.Class) throws java.lang.Exception
    {
        org.simpleframework.xml.core.StructureBuilder $r0;
        java.lang.Class $r1;
        org.simpleframework.xml.core.Scanner $r2;

        $r2 := @this: org.simpleframework.xml.core.Scanner;

        $r1 := @parameter0: java.lang.Class;

        $r0 = $r2.<org.simpleframework.xml.core.Scanner: org.simpleframework.xml.core.StructureBuilder builder>;

        virtualinvoke $r0.<org.simpleframework.xml.core.StructureBuilder: void assemble(java.lang.Class)>($r1);

        return;
    }

    private void root(java.lang.Class)
    {
        boolean $z0;
        org.simpleframework.xml.Root $r0;
        org.simpleframework.xml.core.ClassScanner $r1;
        java.lang.String $r2, $r3, $r4, $r7;
        java.lang.Class $r5;
        org.simpleframework.xml.core.Scanner $r6;

        $r6 := @this: org.simpleframework.xml.core.Scanner;

        $r5 := @parameter0: java.lang.Class;

        $r3 = virtualinvoke $r5.<java.lang.Class: java.lang.String getSimpleName()>();

        $r1 = $r6.<org.simpleframework.xml.core.Scanner: org.simpleframework.xml.core.ClassScanner scanner>;

        $r0 = virtualinvoke $r1.<org.simpleframework.xml.core.ClassScanner: org.simpleframework.xml.Root getRoot()>();

        if $r0 == null goto label2;

        $r4 = interfaceinvoke $r0.<org.simpleframework.xml.Root: java.lang.String name()>();

        $r2 = $r4;

        $z0 = specialinvoke $r6.<org.simpleframework.xml.core.Scanner: boolean isEmpty(java.lang.String)>($r4);

        if $z0 == 0 goto label1;

        $r2 = staticinvoke <org.simpleframework.xml.core.Reflector: java.lang.String getName(java.lang.String)>($r3);

     label1:
        $r7 = virtualinvoke $r2.<java.lang.String: java.lang.String intern()>();

        $r6.<org.simpleframework.xml.core.Scanner: java.lang.String name> = $r7;

        return;

     label2:
        return;
    }

    private void scan(java.lang.Class) throws java.lang.Exception
    {
        java.lang.Class $r0;
        org.simpleframework.xml.core.Scanner $r1;

        $r1 := @this: org.simpleframework.xml.core.Scanner;

        $r0 := @parameter0: java.lang.Class;

        specialinvoke $r1.<org.simpleframework.xml.core.Scanner: void root(java.lang.Class)>($r0);

        specialinvoke $r1.<org.simpleframework.xml.core.Scanner: void order(java.lang.Class)>($r0);

        specialinvoke $r1.<org.simpleframework.xml.core.Scanner: void access(java.lang.Class)>($r0);

        specialinvoke $r1.<org.simpleframework.xml.core.Scanner: void field(java.lang.Class)>($r0);

        specialinvoke $r1.<org.simpleframework.xml.core.Scanner: void method(java.lang.Class)>($r0);

        specialinvoke $r1.<org.simpleframework.xml.core.Scanner: void validate(java.lang.Class)>($r0);

        specialinvoke $r1.<org.simpleframework.xml.core.Scanner: void commit(java.lang.Class)>($r0);

        return;
    }

    private void validate(java.lang.Class) throws java.lang.Exception
    {
        org.simpleframework.xml.core.StructureBuilder $r0, $r3;
        java.lang.Class $r1;
        org.simpleframework.xml.core.Scanner $r2;

        $r2 := @this: org.simpleframework.xml.core.Scanner;

        $r1 := @parameter0: java.lang.Class;

        $r0 = $r2.<org.simpleframework.xml.core.Scanner: org.simpleframework.xml.core.StructureBuilder builder>;

        virtualinvoke $r0.<org.simpleframework.xml.core.StructureBuilder: void commit(java.lang.Class)>($r1);

        $r3 = $r2.<org.simpleframework.xml.core.Scanner: org.simpleframework.xml.core.StructureBuilder builder>;

        virtualinvoke $r3.<org.simpleframework.xml.core.StructureBuilder: void validate(java.lang.Class)>($r1);

        return;
    }

    public org.simpleframework.xml.core.Caller getCaller(org.simpleframework.xml.core.Context)
    {
        org.simpleframework.xml.core.Caller $r0;
        org.simpleframework.xml.core.Context $r1;
        org.simpleframework.xml.core.Scanner $r2;

        $r2 := @this: org.simpleframework.xml.core.Scanner;

        $r1 := @parameter0: org.simpleframework.xml.core.Context;

        $r0 = new org.simpleframework.xml.core.Caller;

        specialinvoke $r0.<org.simpleframework.xml.core.Caller: void <init>(org.simpleframework.xml.core.Scanner,org.simpleframework.xml.core.Context)>($r2, $r1);

        return $r0;
    }

    public org.simpleframework.xml.core.Function getCommit()
    {
        org.simpleframework.xml.core.Function $r0;
        org.simpleframework.xml.core.ClassScanner $r1;
        org.simpleframework.xml.core.Scanner $r2;

        $r2 := @this: org.simpleframework.xml.core.Scanner;

        $r1 = $r2.<org.simpleframework.xml.core.Scanner: org.simpleframework.xml.core.ClassScanner scanner>;

        $r0 = virtualinvoke $r1.<org.simpleframework.xml.core.ClassScanner: org.simpleframework.xml.core.Function getCommit()>();

        return $r0;
    }

    public org.simpleframework.xml.core.Function getComplete()
    {
        org.simpleframework.xml.core.Function $r0;
        org.simpleframework.xml.core.ClassScanner $r1;
        org.simpleframework.xml.core.Scanner $r2;

        $r2 := @this: org.simpleframework.xml.core.Scanner;

        $r1 = $r2.<org.simpleframework.xml.core.Scanner: org.simpleframework.xml.core.ClassScanner scanner>;

        $r0 = virtualinvoke $r1.<org.simpleframework.xml.core.ClassScanner: org.simpleframework.xml.core.Function getComplete()>();

        return $r0;
    }

    public org.simpleframework.xml.core.Decorator getDecorator()
    {
        org.simpleframework.xml.core.Decorator $r0;
        org.simpleframework.xml.core.ClassScanner $r1;
        org.simpleframework.xml.core.Scanner $r2;

        $r2 := @this: org.simpleframework.xml.core.Scanner;

        $r1 = $r2.<org.simpleframework.xml.core.Scanner: org.simpleframework.xml.core.ClassScanner scanner>;

        $r0 = virtualinvoke $r1.<org.simpleframework.xml.core.ClassScanner: org.simpleframework.xml.core.Decorator getDecorator()>();

        return $r0;
    }

    public org.simpleframework.xml.core.Instantiator getInstantiator()
    {
        org.simpleframework.xml.core.Instantiator $r0;
        org.simpleframework.xml.core.Structure $r1;
        org.simpleframework.xml.core.Scanner $r2;

        $r2 := @this: org.simpleframework.xml.core.Scanner;

        $r1 = $r2.<org.simpleframework.xml.core.Scanner: org.simpleframework.xml.core.Structure structure>;

        $r0 = virtualinvoke $r1.<org.simpleframework.xml.core.Structure: org.simpleframework.xml.core.Instantiator getInstantiator()>();

        return $r0;
    }

    public java.lang.String getName()
    {
        java.lang.String r0;
        org.simpleframework.xml.core.Scanner $r1;

        $r1 := @this: org.simpleframework.xml.core.Scanner;

        r0 = $r1.<org.simpleframework.xml.core.Scanner: java.lang.String name>;

        return r0;
    }

    public org.simpleframework.xml.Order getOrder()
    {
        org.simpleframework.xml.Order $r0;
        org.simpleframework.xml.core.ClassScanner $r1;
        org.simpleframework.xml.core.Scanner $r2;

        $r2 := @this: org.simpleframework.xml.core.Scanner;

        $r1 = $r2.<org.simpleframework.xml.core.Scanner: org.simpleframework.xml.core.ClassScanner scanner>;

        $r0 = virtualinvoke $r1.<org.simpleframework.xml.core.ClassScanner: org.simpleframework.xml.Order getOrder()>();

        return $r0;
    }

    public org.simpleframework.xml.core.ParameterMap getParameters()
    {
        org.simpleframework.xml.core.ParameterMap $r0;
        org.simpleframework.xml.core.ClassScanner $r1;
        org.simpleframework.xml.core.Scanner $r2;

        $r2 := @this: org.simpleframework.xml.core.Scanner;

        $r1 = $r2.<org.simpleframework.xml.core.Scanner: org.simpleframework.xml.core.ClassScanner scanner>;

        $r0 = virtualinvoke $r1.<org.simpleframework.xml.core.ClassScanner: org.simpleframework.xml.core.ParameterMap getParameters()>();

        return $r0;
    }

    public org.simpleframework.xml.core.Function getPersist()
    {
        org.simpleframework.xml.core.Function $r0;
        org.simpleframework.xml.core.ClassScanner $r1;
        org.simpleframework.xml.core.Scanner $r2;

        $r2 := @this: org.simpleframework.xml.core.Scanner;

        $r1 = $r2.<org.simpleframework.xml.core.Scanner: org.simpleframework.xml.core.ClassScanner scanner>;

        $r0 = virtualinvoke $r1.<org.simpleframework.xml.core.ClassScanner: org.simpleframework.xml.core.Function getPersist()>();

        return $r0;
    }

    public org.simpleframework.xml.core.Function getReplace()
    {
        org.simpleframework.xml.core.Function $r0;
        org.simpleframework.xml.core.ClassScanner $r1;
        org.simpleframework.xml.core.Scanner $r2;

        $r2 := @this: org.simpleframework.xml.core.Scanner;

        $r1 = $r2.<org.simpleframework.xml.core.Scanner: org.simpleframework.xml.core.ClassScanner scanner>;

        $r0 = virtualinvoke $r1.<org.simpleframework.xml.core.ClassScanner: org.simpleframework.xml.core.Function getReplace()>();

        return $r0;
    }

    public org.simpleframework.xml.core.Function getResolve()
    {
        org.simpleframework.xml.core.Function $r0;
        org.simpleframework.xml.core.ClassScanner $r1;
        org.simpleframework.xml.core.Scanner $r2;

        $r2 := @this: org.simpleframework.xml.core.Scanner;

        $r1 = $r2.<org.simpleframework.xml.core.Scanner: org.simpleframework.xml.core.ClassScanner scanner>;

        $r0 = virtualinvoke $r1.<org.simpleframework.xml.core.ClassScanner: org.simpleframework.xml.core.Function getResolve()>();

        return $r0;
    }

    public org.simpleframework.xml.Version getRevision()
    {
        org.simpleframework.xml.Version $r0;
        org.simpleframework.xml.core.Structure $r1;
        org.simpleframework.xml.core.Scanner $r2;

        $r2 := @this: org.simpleframework.xml.core.Scanner;

        $r1 = $r2.<org.simpleframework.xml.core.Scanner: org.simpleframework.xml.core.Structure structure>;

        $r0 = virtualinvoke $r1.<org.simpleframework.xml.core.Structure: org.simpleframework.xml.Version getRevision()>();

        return $r0;
    }

    public org.simpleframework.xml.core.Section getSection()
    {
        org.simpleframework.xml.core.Section $r0;
        org.simpleframework.xml.core.Structure $r1;
        org.simpleframework.xml.core.Scanner $r2;

        $r2 := @this: org.simpleframework.xml.core.Scanner;

        $r1 = $r2.<org.simpleframework.xml.core.Scanner: org.simpleframework.xml.core.Structure structure>;

        $r0 = virtualinvoke $r1.<org.simpleframework.xml.core.Structure: org.simpleframework.xml.core.Section getSection()>();

        return $r0;
    }

    public org.simpleframework.xml.core.Signature getSignature()
    {
        org.simpleframework.xml.core.Signature $r0;
        org.simpleframework.xml.core.ClassScanner $r1;
        org.simpleframework.xml.core.Scanner $r2;

        $r2 := @this: org.simpleframework.xml.core.Scanner;

        $r1 = $r2.<org.simpleframework.xml.core.Scanner: org.simpleframework.xml.core.ClassScanner scanner>;

        $r0 = virtualinvoke $r1.<org.simpleframework.xml.core.ClassScanner: org.simpleframework.xml.core.Signature getSignature()>();

        return $r0;
    }

    public java.util.List getSignatures()
    {
        java.util.List $r0;
        org.simpleframework.xml.core.ClassScanner $r1;
        org.simpleframework.xml.core.Scanner $r2;

        $r2 := @this: org.simpleframework.xml.core.Scanner;

        $r1 = $r2.<org.simpleframework.xml.core.Scanner: org.simpleframework.xml.core.ClassScanner scanner>;

        $r0 = virtualinvoke $r1.<org.simpleframework.xml.core.ClassScanner: java.util.List getSignatures()>();

        return $r0;
    }

    public org.simpleframework.xml.core.Label getText()
    {
        org.simpleframework.xml.core.Label $r0;
        org.simpleframework.xml.core.Structure $r1;
        org.simpleframework.xml.core.Scanner $r2;

        $r2 := @this: org.simpleframework.xml.core.Scanner;

        $r1 = $r2.<org.simpleframework.xml.core.Scanner: org.simpleframework.xml.core.Structure structure>;

        $r0 = virtualinvoke $r1.<org.simpleframework.xml.core.Structure: org.simpleframework.xml.core.Label getText()>();

        return $r0;
    }

    public java.lang.Class getType()
    {
        java.lang.Class r0;
        org.simpleframework.xml.core.Scanner $r1;

        $r1 := @this: org.simpleframework.xml.core.Scanner;

        r0 = $r1.<org.simpleframework.xml.core.Scanner: java.lang.Class type>;

        return r0;
    }

    public org.simpleframework.xml.core.Function getValidate()
    {
        org.simpleframework.xml.core.Function $r0;
        org.simpleframework.xml.core.ClassScanner $r1;
        org.simpleframework.xml.core.Scanner $r2;

        $r2 := @this: org.simpleframework.xml.core.Scanner;

        $r1 = $r2.<org.simpleframework.xml.core.Scanner: org.simpleframework.xml.core.ClassScanner scanner>;

        $r0 = virtualinvoke $r1.<org.simpleframework.xml.core.ClassScanner: org.simpleframework.xml.core.Function getValidate()>();

        return $r0;
    }

    public org.simpleframework.xml.core.Label getVersion()
    {
        org.simpleframework.xml.core.Label $r0;
        org.simpleframework.xml.core.Structure $r1;
        org.simpleframework.xml.core.Scanner $r2;

        $r2 := @this: org.simpleframework.xml.core.Scanner;

        $r1 = $r2.<org.simpleframework.xml.core.Scanner: org.simpleframework.xml.core.Structure structure>;

        $r0 = virtualinvoke $r1.<org.simpleframework.xml.core.Structure: org.simpleframework.xml.core.Label getVersion()>();

        return $r0;
    }

    public boolean isEmpty()
    {
        org.simpleframework.xml.Root $r0;
        org.simpleframework.xml.core.ClassScanner $r1;
        org.simpleframework.xml.core.Scanner $r2;

        $r2 := @this: org.simpleframework.xml.core.Scanner;

        $r1 = $r2.<org.simpleframework.xml.core.Scanner: org.simpleframework.xml.core.ClassScanner scanner>;

        $r0 = virtualinvoke $r1.<org.simpleframework.xml.core.ClassScanner: org.simpleframework.xml.Root getRoot()>();

        if $r0 != null goto label1;

        return 1;

     label1:
        return 0;
    }

    public boolean isPrimitive()
    {
        boolean $z0;
        org.simpleframework.xml.core.Structure $r0;
        org.simpleframework.xml.core.Scanner $r1;

        $r1 := @this: org.simpleframework.xml.core.Scanner;

        $r0 = $r1.<org.simpleframework.xml.core.Scanner: org.simpleframework.xml.core.Structure structure>;

        $z0 = virtualinvoke $r0.<org.simpleframework.xml.core.Structure: boolean isPrimitive()>();

        return $z0;
    }

    public boolean isStrict()
    {
        boolean $z0;
        org.simpleframework.xml.core.ClassScanner $r0;
        org.simpleframework.xml.core.Scanner $r1;

        $r1 := @this: org.simpleframework.xml.core.Scanner;

        $r0 = $r1.<org.simpleframework.xml.core.Scanner: org.simpleframework.xml.core.ClassScanner scanner>;

        $z0 = virtualinvoke $r0.<org.simpleframework.xml.core.ClassScanner: boolean isStrict()>();

        return $z0;
    }
}
