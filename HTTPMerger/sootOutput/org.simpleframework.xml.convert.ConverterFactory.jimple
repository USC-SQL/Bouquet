class org.simpleframework.xml.convert.ConverterFactory extends java.lang.Object
{
    private final org.simpleframework.xml.convert.ConverterCache cache;

    public void <init>()
    {
        org.simpleframework.xml.convert.ConverterCache $r0;
        org.simpleframework.xml.convert.ConverterFactory $r1;

        $r1 := @this: org.simpleframework.xml.convert.ConverterFactory;

        specialinvoke $r1.<java.lang.Object: void <init>()>();

        $r0 = new org.simpleframework.xml.convert.ConverterCache;

        specialinvoke $r0.<org.simpleframework.xml.convert.ConverterCache: void <init>()>();

        $r1.<org.simpleframework.xml.convert.ConverterFactory: org.simpleframework.xml.convert.ConverterCache cache> = $r0;

        return;
    }

    private java.lang.reflect.Constructor getConstructor(java.lang.Class) throws java.lang.Exception
    {
        boolean $z0;
        java.lang.Class[] $r0;
        java.lang.reflect.Constructor $r1;
        java.lang.Class $r2;
        org.simpleframework.xml.convert.ConverterFactory $r3;

        $r3 := @this: org.simpleframework.xml.convert.ConverterFactory;

        $r2 := @parameter0: java.lang.Class;

        $r0 = newarray (java.lang.Class)[0];

        $r1 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.Constructor getDeclaredConstructor(java.lang.Class[])>($r0);

        $z0 = virtualinvoke $r1.<java.lang.reflect.Constructor: boolean isAccessible()>();

        if $z0 != 0 goto label1;

        virtualinvoke $r1.<java.lang.reflect.Constructor: void setAccessible(boolean)>(1);

        return $r1;

     label1:
        return $r1;
    }

    private org.simpleframework.xml.convert.Converter getConverter(java.lang.Class) throws java.lang.Exception
    {
        org.simpleframework.xml.convert.Converter $r0;
        java.lang.Object[] $r1;
        java.lang.reflect.Constructor $r2;
        org.simpleframework.xml.convert.ConvertException $r3;
        java.lang.Class $r4;
        org.simpleframework.xml.convert.ConverterFactory $r5;

        $r5 := @this: org.simpleframework.xml.convert.ConverterFactory;

        $r4 := @parameter0: java.lang.Class;

        $r2 = specialinvoke $r5.<org.simpleframework.xml.convert.ConverterFactory: java.lang.reflect.Constructor getConstructor(java.lang.Class)>($r4);

        if $r2 != null goto label1;

        $r3 = new org.simpleframework.xml.convert.ConvertException;

        $r1 = newarray (java.lang.Object)[1];

        $r1[0] = $r4;

        specialinvoke $r3.<org.simpleframework.xml.convert.ConvertException: void <init>(java.lang.String,java.lang.Object[])>("No default constructor for %s", $r1);

        throw $r3;

     label1:
        $r0 = specialinvoke $r5.<org.simpleframework.xml.convert.ConverterFactory: org.simpleframework.xml.convert.Converter getConverter(java.lang.Class,java.lang.reflect.Constructor)>($r4, $r2);

        return $r0;
    }

    private org.simpleframework.xml.convert.Converter getConverter(java.lang.Class, java.lang.reflect.Constructor) throws java.lang.Exception
    {
        org.simpleframework.xml.convert.ConverterCache $r0;
        org.simpleframework.xml.convert.Converter $r1;
        java.lang.Object[] $r2;
        java.lang.Object $r3;
        java.lang.reflect.Constructor $r4;
        java.lang.Class $r5;
        org.simpleframework.xml.convert.ConverterFactory $r6;

        $r6 := @this: org.simpleframework.xml.convert.ConverterFactory;

        $r5 := @parameter0: java.lang.Class;

        $r4 := @parameter1: java.lang.reflect.Constructor;

        $r2 = newarray (java.lang.Object)[0];

        $r3 = virtualinvoke $r4.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($r2);

        $r1 = (org.simpleframework.xml.convert.Converter) $r3;

        if $r1 == null goto label1;

        $r0 = $r6.<org.simpleframework.xml.convert.ConverterFactory: org.simpleframework.xml.convert.ConverterCache cache>;

        virtualinvoke $r0.<org.simpleframework.xml.convert.ConverterCache: void cache(java.lang.Object,java.lang.Object)>($r5, $r1);

        return $r1;

     label1:
        return $r1;
    }

    public org.simpleframework.xml.convert.Converter getInstance(java.lang.Class) throws java.lang.Exception
    {
        org.simpleframework.xml.convert.Converter $r0, $r5;
        java.lang.Object $r1;
        org.simpleframework.xml.convert.ConverterCache $r2;
        java.lang.Class $r3;
        org.simpleframework.xml.convert.ConverterFactory $r4;

        $r4 := @this: org.simpleframework.xml.convert.ConverterFactory;

        $r3 := @parameter0: java.lang.Class;

        $r2 = $r4.<org.simpleframework.xml.convert.ConverterFactory: org.simpleframework.xml.convert.ConverterCache cache>;

        $r1 = virtualinvoke $r2.<org.simpleframework.xml.convert.ConverterCache: java.lang.Object fetch(java.lang.Object)>($r3);

        $r0 = (org.simpleframework.xml.convert.Converter) $r1;

        if $r0 != null goto label1;

        $r5 = specialinvoke $r4.<org.simpleframework.xml.convert.ConverterFactory: org.simpleframework.xml.convert.Converter getConverter(java.lang.Class)>($r3);

        return $r5;

     label1:
        return $r0;
    }

    public org.simpleframework.xml.convert.Converter getInstance(org.simpleframework.xml.convert.Convert) throws java.lang.Exception
    {
        org.simpleframework.xml.convert.Converter $r0;
        java.lang.Object[] $r1;
        org.simpleframework.xml.convert.ConvertException $r2;
        boolean $z0;
        java.lang.Class $r3;
        org.simpleframework.xml.convert.Convert $r4;
        org.simpleframework.xml.convert.ConverterFactory $r5;

        $r5 := @this: org.simpleframework.xml.convert.ConverterFactory;

        $r4 := @parameter0: org.simpleframework.xml.convert.Convert;

        $r3 = interfaceinvoke $r4.<org.simpleframework.xml.convert.Convert: java.lang.Class value()>();

        $z0 = virtualinvoke $r3.<java.lang.Class: boolean isInterface()>();

        if $z0 == 0 goto label1;

        $r2 = new org.simpleframework.xml.convert.ConvertException;

        $r1 = newarray (java.lang.Object)[1];

        $r1[0] = $r3;

        specialinvoke $r2.<org.simpleframework.xml.convert.ConvertException: void <init>(java.lang.String,java.lang.Object[])>("Can not instantiate %s", $r1);

        throw $r2;

     label1:
        $r0 = virtualinvoke $r5.<org.simpleframework.xml.convert.ConverterFactory: org.simpleframework.xml.convert.Converter getInstance(java.lang.Class)>($r3);

        return $r0;
    }
}
