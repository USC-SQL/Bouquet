class org.simpleframework.xml.strategy.ReadGraph extends java.util.HashMap
{
    private final java.lang.String label;
    private final java.lang.String length;
    private final org.simpleframework.xml.strategy.Loader loader;
    private final java.lang.String mark;
    private final java.lang.String refer;

    public void <init>(org.simpleframework.xml.strategy.Contract, org.simpleframework.xml.strategy.Loader)
    {
        java.lang.String $r0, $r4, $r5, $r6;
        org.simpleframework.xml.strategy.Loader $r1;
        org.simpleframework.xml.strategy.Contract $r2;
        org.simpleframework.xml.strategy.ReadGraph $r3;

        $r3 := @this: org.simpleframework.xml.strategy.ReadGraph;

        $r2 := @parameter0: org.simpleframework.xml.strategy.Contract;

        $r1 := @parameter1: org.simpleframework.xml.strategy.Loader;

        specialinvoke $r3.<java.util.HashMap: void <init>()>();

        $r0 = virtualinvoke $r2.<org.simpleframework.xml.strategy.Contract: java.lang.String getReference()>();

        $r3.<org.simpleframework.xml.strategy.ReadGraph: java.lang.String refer> = $r0;

        $r4 = virtualinvoke $r2.<org.simpleframework.xml.strategy.Contract: java.lang.String getIdentity()>();

        $r3.<org.simpleframework.xml.strategy.ReadGraph: java.lang.String mark> = $r4;

        $r5 = virtualinvoke $r2.<org.simpleframework.xml.strategy.Contract: java.lang.String getLength()>();

        $r3.<org.simpleframework.xml.strategy.ReadGraph: java.lang.String length> = $r5;

        $r6 = virtualinvoke $r2.<org.simpleframework.xml.strategy.Contract: java.lang.String getLabel()>();

        $r3.<org.simpleframework.xml.strategy.ReadGraph: java.lang.String label> = $r6;

        $r3.<org.simpleframework.xml.strategy.ReadGraph: org.simpleframework.xml.strategy.Loader loader> = $r1;

        return;
    }

    private org.simpleframework.xml.strategy.Value readArray(org.simpleframework.xml.strategy.Type, java.lang.Class, org.simpleframework.xml.stream.NodeMap) throws java.lang.Exception
    {
        org.simpleframework.xml.strategy.ArrayValue $r0;
        org.simpleframework.xml.stream.Node $r1;
        java.lang.String $r2, $r7;
        int $i0;
        org.simpleframework.xml.stream.NodeMap $r3;
        java.lang.Class $r4;
        org.simpleframework.xml.strategy.Type $r5;
        org.simpleframework.xml.strategy.ReadGraph $r6;

        $r6 := @this: org.simpleframework.xml.strategy.ReadGraph;

        $r5 := @parameter0: org.simpleframework.xml.strategy.Type;

        $r4 := @parameter1: java.lang.Class;

        $r3 := @parameter2: org.simpleframework.xml.stream.NodeMap;

        $r2 = $r6.<org.simpleframework.xml.strategy.ReadGraph: java.lang.String length>;

        $r1 = interfaceinvoke $r3.<org.simpleframework.xml.stream.NodeMap: org.simpleframework.xml.stream.Node remove(java.lang.String)>($r2);

        $i0 = 0;

        if $r1 == null goto label1;

        $r7 = interfaceinvoke $r1.<org.simpleframework.xml.stream.Node: java.lang.String getValue()>();

        $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r7);

     label1:
        $r0 = new org.simpleframework.xml.strategy.ArrayValue;

        specialinvoke $r0.<org.simpleframework.xml.strategy.ArrayValue: void <init>(java.lang.Class,int)>($r4, $i0);

        return $r0;
    }

    private org.simpleframework.xml.strategy.Value readInstance(org.simpleframework.xml.strategy.Type, java.lang.Class, org.simpleframework.xml.stream.NodeMap) throws java.lang.Exception
    {
        java.lang.Object[] $r0;
        org.simpleframework.xml.strategy.CycleException $r1;
        boolean $z0;
        org.simpleframework.xml.strategy.Value $r2, $r10;
        org.simpleframework.xml.stream.Node $r3;
        java.lang.String $r4, $r9;
        org.simpleframework.xml.stream.NodeMap $r5;
        java.lang.Class $r6;
        org.simpleframework.xml.strategy.Type $r7;
        org.simpleframework.xml.strategy.ReadGraph $r8;

        $r8 := @this: org.simpleframework.xml.strategy.ReadGraph;

        $r7 := @parameter0: org.simpleframework.xml.strategy.Type;

        $r6 := @parameter1: java.lang.Class;

        $r5 := @parameter2: org.simpleframework.xml.stream.NodeMap;

        $r4 = $r8.<org.simpleframework.xml.strategy.ReadGraph: java.lang.String mark>;

        $r3 = interfaceinvoke $r5.<org.simpleframework.xml.stream.NodeMap: org.simpleframework.xml.stream.Node remove(java.lang.String)>($r4);

        if $r3 != null goto label1;

        $r2 = specialinvoke $r8.<org.simpleframework.xml.strategy.ReadGraph: org.simpleframework.xml.strategy.Value readReference(org.simpleframework.xml.strategy.Type,java.lang.Class,org.simpleframework.xml.stream.NodeMap)>($r7, $r6, $r5);

        return $r2;

     label1:
        $r9 = interfaceinvoke $r3.<org.simpleframework.xml.stream.Node: java.lang.String getValue()>();

        $z0 = virtualinvoke $r8.<org.simpleframework.xml.strategy.ReadGraph: boolean containsKey(java.lang.Object)>($r9);

        if $z0 == 0 goto label2;

        $r1 = new org.simpleframework.xml.strategy.CycleException;

        $r0 = newarray (java.lang.Object)[1];

        $r0[0] = $r9;

        specialinvoke $r1.<org.simpleframework.xml.strategy.CycleException: void <init>(java.lang.String,java.lang.Object[])>("Element \'%s\' already exists", $r0);

        throw $r1;

     label2:
        $r10 = specialinvoke $r8.<org.simpleframework.xml.strategy.ReadGraph: org.simpleframework.xml.strategy.Value readValue(org.simpleframework.xml.strategy.Type,java.lang.Class,org.simpleframework.xml.stream.NodeMap,java.lang.String)>($r7, $r6, $r5, $r9);

        return $r10;
    }

    private org.simpleframework.xml.strategy.Value readReference(org.simpleframework.xml.strategy.Type, java.lang.Class, org.simpleframework.xml.stream.NodeMap) throws java.lang.Exception
    {
        java.lang.Object[] $r0;
        org.simpleframework.xml.strategy.CycleException $r1;
        boolean $z0;
        java.lang.Object $r2;
        org.simpleframework.xml.strategy.Reference $r3;
        org.simpleframework.xml.strategy.Value $r4;
        org.simpleframework.xml.stream.Node $r5;
        java.lang.String $r6, $r11;
        org.simpleframework.xml.stream.NodeMap $r7;
        java.lang.Class $r8;
        org.simpleframework.xml.strategy.Type $r9;
        org.simpleframework.xml.strategy.ReadGraph $r10;

        $r10 := @this: org.simpleframework.xml.strategy.ReadGraph;

        $r9 := @parameter0: org.simpleframework.xml.strategy.Type;

        $r8 := @parameter1: java.lang.Class;

        $r7 := @parameter2: org.simpleframework.xml.stream.NodeMap;

        $r6 = $r10.<org.simpleframework.xml.strategy.ReadGraph: java.lang.String refer>;

        $r5 = interfaceinvoke $r7.<org.simpleframework.xml.stream.NodeMap: org.simpleframework.xml.stream.Node remove(java.lang.String)>($r6);

        if $r5 != null goto label1;

        $r4 = specialinvoke $r10.<org.simpleframework.xml.strategy.ReadGraph: org.simpleframework.xml.strategy.Value readValue(org.simpleframework.xml.strategy.Type,java.lang.Class,org.simpleframework.xml.stream.NodeMap)>($r9, $r8, $r7);

        return $r4;

     label1:
        $r11 = interfaceinvoke $r5.<org.simpleframework.xml.stream.Node: java.lang.String getValue()>();

        $r2 = virtualinvoke $r10.<org.simpleframework.xml.strategy.ReadGraph: java.lang.Object get(java.lang.Object)>($r11);

        $z0 = virtualinvoke $r10.<org.simpleframework.xml.strategy.ReadGraph: boolean containsKey(java.lang.Object)>($r11);

        if $z0 != 0 goto label2;

        $r1 = new org.simpleframework.xml.strategy.CycleException;

        $r0 = newarray (java.lang.Object)[1];

        $r0[0] = $r11;

        specialinvoke $r1.<org.simpleframework.xml.strategy.CycleException: void <init>(java.lang.String,java.lang.Object[])>("Invalid reference \'%s\' found", $r0);

        throw $r1;

     label2:
        $r3 = new org.simpleframework.xml.strategy.Reference;

        specialinvoke $r3.<org.simpleframework.xml.strategy.Reference: void <init>(java.lang.Object,java.lang.Class)>($r2, $r8);

        return $r3;
    }

    private org.simpleframework.xml.strategy.Value readValue(org.simpleframework.xml.strategy.Type, java.lang.Class, org.simpleframework.xml.stream.NodeMap) throws java.lang.Exception
    {
        org.simpleframework.xml.strategy.ObjectValue $r0;
        org.simpleframework.xml.strategy.Value $r1;
        boolean $z0;
        org.simpleframework.xml.stream.NodeMap $r2;
        java.lang.Class $r3, $r4;
        org.simpleframework.xml.strategy.Type $r5;
        org.simpleframework.xml.strategy.ReadGraph $r6;

        $r6 := @this: org.simpleframework.xml.strategy.ReadGraph;

        $r5 := @parameter0: org.simpleframework.xml.strategy.Type;

        $r3 := @parameter1: java.lang.Class;

        $r2 := @parameter2: org.simpleframework.xml.stream.NodeMap;

        $r4 = interfaceinvoke $r5.<org.simpleframework.xml.strategy.Type: java.lang.Class getType()>();

        $z0 = virtualinvoke $r4.<java.lang.Class: boolean isArray()>();

        if $z0 == 0 goto label1;

        $r1 = specialinvoke $r6.<org.simpleframework.xml.strategy.ReadGraph: org.simpleframework.xml.strategy.Value readArray(org.simpleframework.xml.strategy.Type,java.lang.Class,org.simpleframework.xml.stream.NodeMap)>($r5, $r3, $r2);

        return $r1;

     label1:
        $r0 = new org.simpleframework.xml.strategy.ObjectValue;

        specialinvoke $r0.<org.simpleframework.xml.strategy.ObjectValue: void <init>(java.lang.Class)>($r3);

        return $r0;
    }

    private org.simpleframework.xml.strategy.Value readValue(org.simpleframework.xml.strategy.Type, java.lang.Class, org.simpleframework.xml.stream.NodeMap, java.lang.String) throws java.lang.Exception
    {
        org.simpleframework.xml.strategy.Value $r0;
        org.simpleframework.xml.strategy.Allocate $r1;
        java.lang.String $r2;
        org.simpleframework.xml.stream.NodeMap $r3;
        java.lang.Class $r4;
        org.simpleframework.xml.strategy.Type $r5;
        org.simpleframework.xml.strategy.ReadGraph $r6;

        $r6 := @this: org.simpleframework.xml.strategy.ReadGraph;

        $r5 := @parameter0: org.simpleframework.xml.strategy.Type;

        $r4 := @parameter1: java.lang.Class;

        $r3 := @parameter2: org.simpleframework.xml.stream.NodeMap;

        $r2 := @parameter3: java.lang.String;

        $r0 = specialinvoke $r6.<org.simpleframework.xml.strategy.ReadGraph: org.simpleframework.xml.strategy.Value readValue(org.simpleframework.xml.strategy.Type,java.lang.Class,org.simpleframework.xml.stream.NodeMap)>($r5, $r4, $r3);

        if $r2 == null goto label1;

        $r1 = new org.simpleframework.xml.strategy.Allocate;

        specialinvoke $r1.<org.simpleframework.xml.strategy.Allocate: void <init>(org.simpleframework.xml.strategy.Value,java.util.Map,java.lang.String)>($r0, $r6, $r2);

        return $r1;

     label1:
        return $r0;
    }

    public org.simpleframework.xml.strategy.Value read(org.simpleframework.xml.strategy.Type, org.simpleframework.xml.stream.NodeMap) throws java.lang.Exception
    {
        org.simpleframework.xml.strategy.Value $r0;
        org.simpleframework.xml.strategy.Loader $r1;
        boolean $z0;
        org.simpleframework.xml.stream.Node $r2;
        java.lang.String $r3, $r9;
        java.lang.Class $r4, $r5;
        org.simpleframework.xml.stream.NodeMap $r6;
        org.simpleframework.xml.strategy.Type $r7;
        org.simpleframework.xml.strategy.ReadGraph $r8;

        $r8 := @this: org.simpleframework.xml.strategy.ReadGraph;

        $r7 := @parameter0: org.simpleframework.xml.strategy.Type;

        $r6 := @parameter1: org.simpleframework.xml.stream.NodeMap;

        $r3 = $r8.<org.simpleframework.xml.strategy.ReadGraph: java.lang.String label>;

        $r2 = interfaceinvoke $r6.<org.simpleframework.xml.stream.NodeMap: org.simpleframework.xml.stream.Node remove(java.lang.String)>($r3);

        $r5 = interfaceinvoke $r7.<org.simpleframework.xml.strategy.Type: java.lang.Class getType()>();

        $r4 = $r5;

        $z0 = virtualinvoke $r5.<java.lang.Class: boolean isArray()>();

        if $z0 == 0 goto label1;

        $r4 = virtualinvoke $r5.<java.lang.Class: java.lang.Class getComponentType()>();

     label1:
        if $r2 == null goto label2;

        $r9 = interfaceinvoke $r2.<org.simpleframework.xml.stream.Node: java.lang.String getValue()>();

        $r1 = $r8.<org.simpleframework.xml.strategy.ReadGraph: org.simpleframework.xml.strategy.Loader loader>;

        $r4 = virtualinvoke $r1.<org.simpleframework.xml.strategy.Loader: java.lang.Class load(java.lang.String)>($r9);

     label2:
        $r0 = specialinvoke $r8.<org.simpleframework.xml.strategy.ReadGraph: org.simpleframework.xml.strategy.Value readInstance(org.simpleframework.xml.strategy.Type,java.lang.Class,org.simpleframework.xml.stream.NodeMap)>($r7, $r4, $r6);

        return $r0;
    }
}
