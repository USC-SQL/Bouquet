class org.simpleframework.xml.convert.ConverterScanner extends java.lang.Object
{
    private final org.simpleframework.xml.convert.ScannerBuilder builder;
    private final org.simpleframework.xml.convert.ConverterFactory factory;

    public void <init>()
    {
        org.simpleframework.xml.convert.ScannerBuilder $r0;
        org.simpleframework.xml.convert.ConverterFactory $r1;
        org.simpleframework.xml.convert.ConverterScanner $r2;

        $r2 := @this: org.simpleframework.xml.convert.ConverterScanner;

        specialinvoke $r2.<java.lang.Object: void <init>()>();

        $r1 = new org.simpleframework.xml.convert.ConverterFactory;

        specialinvoke $r1.<org.simpleframework.xml.convert.ConverterFactory: void <init>()>();

        $r2.<org.simpleframework.xml.convert.ConverterScanner: org.simpleframework.xml.convert.ConverterFactory factory> = $r1;

        $r0 = new org.simpleframework.xml.convert.ScannerBuilder;

        specialinvoke $r0.<org.simpleframework.xml.convert.ScannerBuilder: void <init>()>();

        $r2.<org.simpleframework.xml.convert.ConverterScanner: org.simpleframework.xml.convert.ScannerBuilder builder> = $r0;

        return;
    }

    private java.lang.annotation.Annotation getAnnotation(java.lang.Class, java.lang.Class)
    {
        java.lang.annotation.Annotation $r0;
        org.simpleframework.xml.convert.Scanner $r1;
        org.simpleframework.xml.convert.ScannerBuilder $r2;
        java.lang.Class $r3, $r4;
        org.simpleframework.xml.convert.ConverterScanner $r5;

        $r5 := @this: org.simpleframework.xml.convert.ConverterScanner;

        $r3 := @parameter0: java.lang.Class;

        $r4 := @parameter1: java.lang.Class;

        $r2 = $r5.<org.simpleframework.xml.convert.ConverterScanner: org.simpleframework.xml.convert.ScannerBuilder builder>;

        $r1 = virtualinvoke $r2.<org.simpleframework.xml.convert.ScannerBuilder: org.simpleframework.xml.convert.Scanner build(java.lang.Class)>($r3);

        $r0 = interfaceinvoke $r1.<org.simpleframework.xml.convert.Scanner: java.lang.annotation.Annotation scan(java.lang.Class)>($r4);

        return $r0;
    }

    private org.simpleframework.xml.convert.Convert getConvert(java.lang.Class) throws java.lang.Exception
    {
        java.lang.Object[] $r0;
        org.simpleframework.xml.convert.ConvertException $r1;
        org.simpleframework.xml.Root $r2;
        org.simpleframework.xml.convert.Convert $r3;
        java.lang.annotation.Annotation $r4, $r7;
        java.lang.Class $r5;
        org.simpleframework.xml.convert.ConverterScanner $r6;

        $r6 := @this: org.simpleframework.xml.convert.ConverterScanner;

        $r5 := @parameter0: java.lang.Class;

        $r4 = specialinvoke $r6.<org.simpleframework.xml.convert.ConverterScanner: java.lang.annotation.Annotation getAnnotation(java.lang.Class,java.lang.Class)>($r5, class "org/simpleframework/xml/convert/Convert");

        $r3 = (org.simpleframework.xml.convert.Convert) $r4;

        if $r3 == null goto label1;

        $r7 = specialinvoke $r6.<org.simpleframework.xml.convert.ConverterScanner: java.lang.annotation.Annotation getAnnotation(java.lang.Class,java.lang.Class)>($r5, class "org/simpleframework/xml/Root");

        $r2 = (org.simpleframework.xml.Root) $r7;

        if $r2 != null goto label2;

        $r1 = new org.simpleframework.xml.convert.ConvertException;

        $r0 = newarray (java.lang.Object)[1];

        $r0[0] = $r5;

        specialinvoke $r1.<org.simpleframework.xml.convert.ConvertException: void <init>(java.lang.String,java.lang.Object[])>("Root annotation required for %s", $r0);

        throw $r1;

     label1:
        return $r3;

     label2:
        return $r3;
    }

    private org.simpleframework.xml.convert.Convert getConvert(org.simpleframework.xml.strategy.Type) throws java.lang.Exception
    {
        java.lang.Object[] $r0;
        org.simpleframework.xml.convert.ConvertException $r1;
        org.simpleframework.xml.Element $r2;
        org.simpleframework.xml.convert.Convert $r3;
        java.lang.annotation.Annotation $r4, $r7;
        org.simpleframework.xml.strategy.Type $r5;
        org.simpleframework.xml.convert.ConverterScanner $r6;

        $r6 := @this: org.simpleframework.xml.convert.ConverterScanner;

        $r5 := @parameter0: org.simpleframework.xml.strategy.Type;

        $r4 = interfaceinvoke $r5.<org.simpleframework.xml.strategy.Type: java.lang.annotation.Annotation getAnnotation(java.lang.Class)>(class "org/simpleframework/xml/convert/Convert");

        $r3 = (org.simpleframework.xml.convert.Convert) $r4;

        if $r3 == null goto label1;

        $r7 = interfaceinvoke $r5.<org.simpleframework.xml.strategy.Type: java.lang.annotation.Annotation getAnnotation(java.lang.Class)>(class "org/simpleframework/xml/Element");

        $r2 = (org.simpleframework.xml.Element) $r7;

        if $r2 != null goto label2;

        $r1 = new org.simpleframework.xml.convert.ConvertException;

        $r0 = newarray (java.lang.Object)[1];

        $r0[0] = $r5;

        specialinvoke $r1.<org.simpleframework.xml.convert.ConvertException: void <init>(java.lang.String,java.lang.Object[])>("Element annotation required for %s", $r0);

        throw $r1;

     label1:
        return $r3;

     label2:
        return $r3;
    }

    private org.simpleframework.xml.convert.Convert getConvert(org.simpleframework.xml.strategy.Type, java.lang.Class) throws java.lang.Exception
    {
        org.simpleframework.xml.convert.Convert $r0, $r4;
        java.lang.Class $r1;
        org.simpleframework.xml.strategy.Type $r2;
        org.simpleframework.xml.convert.ConverterScanner $r3;

        $r3 := @this: org.simpleframework.xml.convert.ConverterScanner;

        $r2 := @parameter0: org.simpleframework.xml.strategy.Type;

        $r1 := @parameter1: java.lang.Class;

        $r0 = specialinvoke $r3.<org.simpleframework.xml.convert.ConverterScanner: org.simpleframework.xml.convert.Convert getConvert(org.simpleframework.xml.strategy.Type)>($r2);

        if $r0 != null goto label1;

        $r4 = specialinvoke $r3.<org.simpleframework.xml.convert.ConverterScanner: org.simpleframework.xml.convert.Convert getConvert(java.lang.Class)>($r1);

        return $r4;

     label1:
        return $r0;
    }

    private java.lang.Class getType(org.simpleframework.xml.strategy.Type, java.lang.Object)
    {
        java.lang.Class $r0, $r4;
        java.lang.Object $r1;
        org.simpleframework.xml.strategy.Type $r2;
        org.simpleframework.xml.convert.ConverterScanner $r3;

        $r3 := @this: org.simpleframework.xml.convert.ConverterScanner;

        $r2 := @parameter0: org.simpleframework.xml.strategy.Type;

        $r1 := @parameter1: java.lang.Object;

        $r0 = interfaceinvoke $r2.<org.simpleframework.xml.strategy.Type: java.lang.Class getType()>();

        if $r1 == null goto label1;

        $r4 = virtualinvoke $r1.<java.lang.Object: java.lang.Class getClass()>();

        return $r4;

     label1:
        return $r0;
    }

    private java.lang.Class getType(org.simpleframework.xml.strategy.Type, org.simpleframework.xml.strategy.Value)
    {
        java.lang.Class $r0, $r4;
        org.simpleframework.xml.strategy.Value $r1;
        org.simpleframework.xml.strategy.Type $r2;
        org.simpleframework.xml.convert.ConverterScanner $r3;

        $r3 := @this: org.simpleframework.xml.convert.ConverterScanner;

        $r2 := @parameter0: org.simpleframework.xml.strategy.Type;

        $r1 := @parameter1: org.simpleframework.xml.strategy.Value;

        $r0 = interfaceinvoke $r2.<org.simpleframework.xml.strategy.Type: java.lang.Class getType()>();

        if $r1 == null goto label1;

        $r4 = interfaceinvoke $r1.<org.simpleframework.xml.strategy.Value: java.lang.Class getType()>();

        return $r4;

     label1:
        return $r0;
    }

    public org.simpleframework.xml.convert.Converter getConverter(org.simpleframework.xml.strategy.Type, java.lang.Object) throws java.lang.Exception
    {
        org.simpleframework.xml.convert.Converter $r0;
        org.simpleframework.xml.convert.Convert $r1;
        java.lang.Class $r2;
        org.simpleframework.xml.convert.ConverterFactory $r3;
        java.lang.Object $r4;
        org.simpleframework.xml.strategy.Type $r5;
        org.simpleframework.xml.convert.ConverterScanner $r6;

        $r6 := @this: org.simpleframework.xml.convert.ConverterScanner;

        $r5 := @parameter0: org.simpleframework.xml.strategy.Type;

        $r4 := @parameter1: java.lang.Object;

        $r2 = specialinvoke $r6.<org.simpleframework.xml.convert.ConverterScanner: java.lang.Class getType(org.simpleframework.xml.strategy.Type,java.lang.Object)>($r5, $r4);

        $r1 = specialinvoke $r6.<org.simpleframework.xml.convert.ConverterScanner: org.simpleframework.xml.convert.Convert getConvert(org.simpleframework.xml.strategy.Type,java.lang.Class)>($r5, $r2);

        if $r1 == null goto label1;

        $r3 = $r6.<org.simpleframework.xml.convert.ConverterScanner: org.simpleframework.xml.convert.ConverterFactory factory>;

        $r0 = virtualinvoke $r3.<org.simpleframework.xml.convert.ConverterFactory: org.simpleframework.xml.convert.Converter getInstance(org.simpleframework.xml.convert.Convert)>($r1);

        return $r0;

     label1:
        return null;
    }

    public org.simpleframework.xml.convert.Converter getConverter(org.simpleframework.xml.strategy.Type, org.simpleframework.xml.strategy.Value) throws java.lang.Exception
    {
        org.simpleframework.xml.convert.Converter $r0;
        org.simpleframework.xml.convert.Convert $r1;
        java.lang.Class $r2;
        org.simpleframework.xml.convert.ConverterFactory $r3;
        org.simpleframework.xml.strategy.Value $r4;
        org.simpleframework.xml.strategy.Type $r5;
        org.simpleframework.xml.convert.ConverterScanner $r6;

        $r6 := @this: org.simpleframework.xml.convert.ConverterScanner;

        $r5 := @parameter0: org.simpleframework.xml.strategy.Type;

        $r4 := @parameter1: org.simpleframework.xml.strategy.Value;

        $r2 = specialinvoke $r6.<org.simpleframework.xml.convert.ConverterScanner: java.lang.Class getType(org.simpleframework.xml.strategy.Type,org.simpleframework.xml.strategy.Value)>($r5, $r4);

        $r1 = specialinvoke $r6.<org.simpleframework.xml.convert.ConverterScanner: org.simpleframework.xml.convert.Convert getConvert(org.simpleframework.xml.strategy.Type,java.lang.Class)>($r5, $r2);

        if $r1 == null goto label1;

        $r3 = $r6.<org.simpleframework.xml.convert.ConverterScanner: org.simpleframework.xml.convert.ConverterFactory factory>;

        $r0 = virtualinvoke $r3.<org.simpleframework.xml.convert.ConverterFactory: org.simpleframework.xml.convert.Converter getInstance(org.simpleframework.xml.convert.Convert)>($r1);

        return $r0;

     label1:
        return null;
    }
}
