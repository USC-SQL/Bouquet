public class org.jsoup.nodes.Entities extends java.lang.Object
{
    private static final java.util.Map baseByVal;
    private static final java.util.Map full;
    private static final java.util.Map fullByVal;
    private static final java.util.regex.Pattern strictUnescapePattern;
    private static final java.util.regex.Pattern unescapePattern;
    private static final java.lang.Object[][] xhtmlArray;
    private static final java.util.Map xhtmlByVal;

    static void <clinit>()
    {
        java.lang.String $r0;
        java.lang.Character $r1;
        char $c0;
        java.lang.Object $r2, $r26;
        java.util.Map $r3, $r18, $r19, $r20, $r21, $r25;
        java.util.HashMap $r4;
        java.lang.Integer $r5, $r11, $r13, $r15, $r17, $r24;
        java.util.regex.Pattern $r6, $r9;
        int $i1, $i2, $i3;
        java.lang.Object[] $r7, $r10, $r12, $r14, $r16, $r23;
        java.lang.Object[][] $r8, $r22;

        $r6 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("&(#(x|X)?([0-9a-fA-F]+)|[a-zA-Z]+\\d*);?");

        <org.jsoup.nodes.Entities: java.util.regex.Pattern unescapePattern> = $r6;

        $r9 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("&(#(x|X)?([0-9a-fA-F]+)|[a-zA-Z]+\\d*);");

        <org.jsoup.nodes.Entities: java.util.regex.Pattern strictUnescapePattern> = $r9;

        $r8 = newarray (java.lang.Object[])[5];

        $r7 = newarray (java.lang.Object)[2];

        $r7[0] = "quot";

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(34);

        $r7[1] = $r5;

        $r8[0] = $r7;

        $r10 = newarray (java.lang.Object)[2];

        $r10[0] = "amp";

        $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(38);

        $r10[1] = $r11;

        $r8[1] = $r10;

        $r12 = newarray (java.lang.Object)[2];

        $r12[0] = "apos";

        $r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(39);

        $r12[1] = $r13;

        $r8[2] = $r12;

        $r14 = newarray (java.lang.Object)[2];

        $r14[0] = "lt";

        $r15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(60);

        $r14[1] = $r15;

        $r8[3] = $r14;

        $r16 = newarray (java.lang.Object)[2];

        $r16[0] = "gt";

        $r17 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(62);

        $r16[1] = $r17;

        $r8[4] = $r16;

        <org.jsoup.nodes.Entities: java.lang.Object[][] xhtmlArray> = $r8;

        $r4 = new java.util.HashMap;

        specialinvoke $r4.<java.util.HashMap: void <init>()>();

        <org.jsoup.nodes.Entities: java.util.Map xhtmlByVal> = $r4;

        $r3 = staticinvoke <org.jsoup.nodes.Entities: java.util.Map loadEntities(java.lang.String)>("entities-base.properties");

        $r18 = staticinvoke <org.jsoup.nodes.Entities: java.util.Map toCharacterKey(java.util.Map)>($r3);

        <org.jsoup.nodes.Entities: java.util.Map baseByVal> = $r18;

        $r19 = staticinvoke <org.jsoup.nodes.Entities: java.util.Map loadEntities(java.lang.String)>("entities-full.properties");

        <org.jsoup.nodes.Entities: java.util.Map full> = $r19;

        $r20 = <org.jsoup.nodes.Entities: java.util.Map full>;

        $r21 = staticinvoke <org.jsoup.nodes.Entities: java.util.Map toCharacterKey(java.util.Map)>($r20);

        <org.jsoup.nodes.Entities: java.util.Map fullByVal> = $r21;

        $r22 = <org.jsoup.nodes.Entities: java.lang.Object[][] xhtmlArray>;

        $i2 = lengthof $r22;

        $i1 = 0;

     label1:
        if $i1 >= $i2 goto label2;

        $r23 = $r22[$i1];

        $r2 = $r23[1];

        $r24 = (java.lang.Integer) $r2;

        $i3 = virtualinvoke $r24.<java.lang.Integer: int intValue()>();

        $c0 = (char) $i3;

        $r1 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>($c0);

        $r25 = <org.jsoup.nodes.Entities: java.util.Map xhtmlByVal>;

        $r26 = $r23[0];

        $r0 = (java.lang.String) $r26;

        interfaceinvoke $r25.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, $r0);

        $i1 = $i1 + 1;

        goto label1;

     label2:
        return;
    }

    private void <init>()
    {
        org.jsoup.nodes.Entities $r0;

        $r0 := @this: org.jsoup.nodes.Entities;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        return;
    }

    static java.util.Map access$000()
    {
        java.util.Map r0;

        r0 = <org.jsoup.nodes.Entities: java.util.Map xhtmlByVal>;

        return r0;
    }

    static java.util.Map access$100()
    {
        java.util.Map r0;

        r0 = <org.jsoup.nodes.Entities: java.util.Map baseByVal>;

        return r0;
    }

    static java.util.Map access$200()
    {
        java.util.Map r0;

        r0 = <org.jsoup.nodes.Entities: java.util.Map fullByVal>;

        return r0;
    }

    static java.lang.String escape(java.lang.String, java.nio.charset.CharsetEncoder, org.jsoup.nodes.Entities$EscapeMode)
    {
        java.lang.Object $r0;
        boolean $z0, $z1;
        java.lang.Character $r1;
        char $c0, $c5, $c6, $c7;
        java.util.Map $r2;
        int $i1, $i2, $i3, $i4;
        java.lang.StringBuilder $r3, $r4, $r9, $r10, $r11;
        org.jsoup.nodes.Entities$EscapeMode $r5;
        java.nio.charset.CharsetEncoder $r6;
        java.lang.String $r7, $r8, $r12;

        $r7 := @parameter0: java.lang.String;

        $r6 := @parameter1: java.nio.charset.CharsetEncoder;

        $r5 := @parameter2: org.jsoup.nodes.Entities$EscapeMode;

        $r3 = new java.lang.StringBuilder;

        $i1 = virtualinvoke $r7.<java.lang.String: int length()>();

        $i3 = $i1 * 2;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>(int)>($i3);

        $r2 = virtualinvoke $r5.<org.jsoup.nodes.Entities$EscapeMode: java.util.Map getMap()>();

        $i4 = 0;

     label1:
        $i2 = virtualinvoke $r7.<java.lang.String: int length()>();

        if $i4 >= $i2 goto label5;

        $c0 = virtualinvoke $r7.<java.lang.String: char charAt(int)>($i4);

        $r1 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>($c0);

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>($r1);

        if $z0 == 0 goto label3;

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(38);

        $r0 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r1);

        $r8 = (java.lang.String) $r0;

        $r9 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(59);

     label2:
        $i4 = $i4 + 1;

        goto label1;

     label3:
        $c5 = virtualinvoke $r1.<java.lang.Character: char charValue()>();

        $z1 = virtualinvoke $r6.<java.nio.charset.CharsetEncoder: boolean canEncode(char)>($c5);

        if $z1 == 0 goto label4;

        $c6 = virtualinvoke $r1.<java.lang.Character: char charValue()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c6);

        goto label2;

     label4:
        $r10 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("&#");

        $c7 = virtualinvoke $r1.<java.lang.Character: char charValue()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($c7);

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(59);

        goto label2;

     label5:
        $r12 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r12;
    }

    static java.lang.String escape(java.lang.String, org.jsoup.nodes.Document$OutputSettings)
    {
        org.jsoup.nodes.Entities$EscapeMode $r0;
        java.nio.charset.CharsetEncoder $r1;
        org.jsoup.nodes.Document$OutputSettings $r2;
        java.lang.String $r3, $r4;

        $r3 := @parameter0: java.lang.String;

        $r2 := @parameter1: org.jsoup.nodes.Document$OutputSettings;

        $r1 = virtualinvoke $r2.<org.jsoup.nodes.Document$OutputSettings: java.nio.charset.CharsetEncoder encoder()>();

        $r0 = virtualinvoke $r2.<org.jsoup.nodes.Document$OutputSettings: org.jsoup.nodes.Entities$EscapeMode escapeMode()>();

        $r4 = staticinvoke <org.jsoup.nodes.Entities: java.lang.String escape(java.lang.String,java.nio.charset.CharsetEncoder,org.jsoup.nodes.Entities$EscapeMode)>($r3, $r1, $r0);

        return $r4;
    }

    public static java.lang.Character getCharacterByName(java.lang.String)
    {
        java.lang.Character $r0;
        java.lang.Object $r1;
        java.util.Map $r2;
        java.lang.String $r3;

        $r3 := @parameter0: java.lang.String;

        $r2 = <org.jsoup.nodes.Entities: java.util.Map full>;

        $r1 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r3);

        $r0 = (java.lang.Character) $r1;

        return $r0;
    }

    public static boolean isNamedEntity(java.lang.String)
    {
        boolean $z0;
        java.util.Map $r0;
        java.lang.String $r1;

        $r1 := @parameter0: java.lang.String;

        $r0 = <org.jsoup.nodes.Entities: java.util.Map full>;

        $z0 = interfaceinvoke $r0.<java.util.Map: boolean containsKey(java.lang.Object)>($r1);

        return $z0;
    }

    private static java.util.Map loadEntities(java.lang.String)
    {
        java.lang.StringBuilder $r0, $r18, $r19;
        java.util.MissingResourceException $r1;
        java.lang.Character $r2;
        char $c0;
        int $i1;
        java.util.Map$Entry $r3;
        java.lang.Object $r4, $r14, $r16;
        boolean $z0;
        java.util.Iterator $r5;
        java.util.Set $r6;
        java.io.InputStream $r7;
        java.lang.Class $r8;
        java.util.Properties $r9;
        java.util.HashMap $r10;
        java.io.IOException $r11;
        java.lang.String $r12, $r13, $r15, $r17, $r20;

        $r12 := @parameter0: java.lang.String;

        $r9 = new java.util.Properties;

        specialinvoke $r9.<java.util.Properties: void <init>()>();

        $r10 = new java.util.HashMap;

        specialinvoke $r10.<java.util.HashMap: void <init>()>();

        $r8 = class "org/jsoup/nodes/Entities";

     label1:
        $r7 = virtualinvoke $r8.<java.lang.Class: java.io.InputStream getResourceAsStream(java.lang.String)>($r12);

        virtualinvoke $r9.<java.util.Properties: void load(java.io.InputStream)>($r7);

        virtualinvoke $r7.<java.io.InputStream: void close()>();

     label2:
        $r6 = virtualinvoke $r9.<java.util.Properties: java.util.Set entrySet()>();

        $r5 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>();

     label3:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r4 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        $r3 = (java.util.Map$Entry) $r4;

        $r14 = interfaceinvoke $r3.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r15 = (java.lang.String) $r14;

        $i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>($r15, 16);

        $c0 = (char) $i1;

        $r2 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>($c0);

        $r16 = interfaceinvoke $r3.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r17 = (java.lang.String) $r16;

        interfaceinvoke $r10.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r17, $r2);

        goto label3;

     label4:
        $r11 := @caughtexception;

        $r1 = new java.util.MissingResourceException;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error loading entities resource: ");

        $r13 = virtualinvoke $r11.<java.io.IOException: java.lang.String getMessage()>();

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.util.MissingResourceException: void <init>(java.lang.String,java.lang.String,java.lang.String)>($r20, "Entities", $r12);

        throw $r1;

     label5:
        return $r10;

        catch java.io.IOException from label1 to label2 with label4;
    }

    private static java.util.Map toCharacterKey(java.util.Map)
    {
        java.lang.String $r0, $r1;
        java.lang.Character $r2;
        java.util.Map$Entry $r3;
        java.lang.Object $r4, $r9, $r10;
        boolean $z0, $z1, $z2;
        java.util.Iterator $r5;
        java.util.Set $r6;
        java.util.HashMap $r7;
        java.util.Map $r8;

        $r8 := @parameter0: java.util.Map;

        $r7 = new java.util.HashMap;

        specialinvoke $r7.<java.util.HashMap: void <init>()>();

        $r6 = interfaceinvoke $r8.<java.util.Map: java.util.Set entrySet()>();

        $r5 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r5.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r4 = interfaceinvoke $r5.<java.util.Iterator: java.lang.Object next()>();

        $r3 = (java.util.Map$Entry) $r4;

        $r9 = interfaceinvoke $r3.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r2 = (java.lang.Character) $r9;

        $r10 = interfaceinvoke $r3.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r0 = (java.lang.String) $r10;

        $z1 = interfaceinvoke $r7.<java.util.Map: boolean containsKey(java.lang.Object)>($r2);

        if $z1 == 0 goto label2;

        $r1 = virtualinvoke $r0.<java.lang.String: java.lang.String toLowerCase()>();

        $z2 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r0);

        if $z2 == 0 goto label1;

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, $r0);

        goto label1;

     label2:
        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, $r0);

        goto label1;

     label3:
        return $r7;
    }

    static java.lang.String unescape(java.lang.String)
    {
        java.lang.String $r0, $r1;

        $r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <org.jsoup.nodes.Entities: java.lang.String unescape(java.lang.String,boolean)>($r0, 0);

        return $r1;
    }

    static java.lang.String unescape(java.lang.String, boolean)
    {
        java.lang.NumberFormatException $r0;
        java.lang.Character $r1;
        java.lang.Object $r2;
        java.util.Map $r3, $r15;
        char $c0;
        java.lang.Integer $r4;
        java.util.regex.Pattern $r5, $r13;
        java.util.regex.Matcher $r6;
        int $i1, $i2, $i4;
        byte $b3;
        java.lang.StringBuffer $r7;
        boolean $z0, $z1, $z2, $z3;
        java.lang.String $r8, $r9, $r10, $r11, $r12, $r14, $r16, $r17, $r18;

        $r8 := @parameter0: java.lang.String;

        $z0 := @parameter1: boolean;

        $z1 = virtualinvoke $r8.<java.lang.String: boolean contains(java.lang.CharSequence)>("&");

        if $z1 != 0 goto label01;

        return $r8;

     label01:
        if $z0 == 0 goto label11;

        $r5 = <org.jsoup.nodes.Entities: java.util.regex.Pattern strictUnescapePattern>;

        $r6 = virtualinvoke $r5.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($r8);

     label02:
        $r7 = new java.lang.StringBuffer;

        $i1 = virtualinvoke $r8.<java.lang.String: int length()>();

        specialinvoke $r7.<java.lang.StringBuffer: void <init>(int)>($i1);

     label03:
        $z2 = virtualinvoke $r6.<java.util.regex.Matcher: boolean find()>();

        if $z2 == 0 goto label15;

        $i4 = -1;

        $r10 = virtualinvoke $r6.<java.util.regex.Matcher: java.lang.String group(int)>(3);

        if $r10 == null goto label13;

     label04:
        $r9 = virtualinvoke $r6.<java.util.regex.Matcher: java.lang.String group(int)>(2);

     label05:
        if $r9 == null goto label12;

     label06:
        $b3 = 16;

     label07:
        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(java.lang.String,int)>($r10, $b3);

        $i2 = virtualinvoke $r4.<java.lang.Integer: int intValue()>();

     label08:
        $i4 = $i2;

     label09:
        if $i4 != -1 goto label10;

        if $i4 <= 65535 goto label14;

     label10:
        $c0 = (char) $i4;

        $r11 = staticinvoke <java.lang.Character: java.lang.String toString(char)>($c0);

        $r12 = staticinvoke <java.util.regex.Matcher: java.lang.String quoteReplacement(java.lang.String)>($r11);

        virtualinvoke $r6.<java.util.regex.Matcher: java.util.regex.Matcher appendReplacement(java.lang.StringBuffer,java.lang.String)>($r7, $r12);

        goto label03;

     label11:
        $r13 = <org.jsoup.nodes.Entities: java.util.regex.Pattern unescapePattern>;

        $r6 = virtualinvoke $r13.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($r8);

        goto label02;

     label12:
        $b3 = 10;

        goto label07;

     label13:
        $r14 = virtualinvoke $r6.<java.util.regex.Matcher: java.lang.String group(int)>(1);

        $r3 = <org.jsoup.nodes.Entities: java.util.Map full>;

        $z3 = interfaceinvoke $r3.<java.util.Map: boolean containsKey(java.lang.Object)>($r14);

        if $z3 == 0 goto label09;

        $r15 = <org.jsoup.nodes.Entities: java.util.Map full>;

        $r2 = interfaceinvoke $r15.<java.util.Map: java.lang.Object get(java.lang.Object)>($r14);

        $r1 = (java.lang.Character) $r2;

        $i4 = virtualinvoke $r1.<java.lang.Character: char charValue()>();

        goto label09;

     label14:
        $r16 = virtualinvoke $r6.<java.util.regex.Matcher: java.lang.String group(int)>(0);

        $r17 = staticinvoke <java.util.regex.Matcher: java.lang.String quoteReplacement(java.lang.String)>($r16);

        virtualinvoke $r6.<java.util.regex.Matcher: java.util.regex.Matcher appendReplacement(java.lang.StringBuffer,java.lang.String)>($r7, $r17);

        goto label03;

     label15:
        virtualinvoke $r6.<java.util.regex.Matcher: java.lang.StringBuffer appendTail(java.lang.StringBuffer)>($r7);

        $r18 = virtualinvoke $r7.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r18;

     label16:
        $r0 := @caughtexception;

        goto label09;

        catch java.lang.NumberFormatException from label04 to label05 with label16;
        catch java.lang.NumberFormatException from label06 to label08 with label16;
    }
}
