class org.simpleframework.xml.core.Traverser extends java.lang.Object
{
    private final org.simpleframework.xml.core.Context context;
    private final org.simpleframework.xml.stream.Style style;

    public void <init>(org.simpleframework.xml.core.Context)
    {
        org.simpleframework.xml.stream.Style $r0;
        org.simpleframework.xml.core.Context $r1;
        org.simpleframework.xml.core.Traverser $r2;

        $r2 := @this: org.simpleframework.xml.core.Traverser;

        $r1 := @parameter0: org.simpleframework.xml.core.Context;

        specialinvoke $r2.<java.lang.Object: void <init>()>();

        $r0 = interfaceinvoke $r1.<org.simpleframework.xml.core.Context: org.simpleframework.xml.stream.Style getStyle()>();

        $r2.<org.simpleframework.xml.core.Traverser: org.simpleframework.xml.stream.Style style> = $r0;

        $r2.<org.simpleframework.xml.core.Traverser: org.simpleframework.xml.core.Context context> = $r1;

        return;
    }

    private org.simpleframework.xml.core.Composite getComposite(java.lang.Class) throws java.lang.Exception
    {
        org.simpleframework.xml.core.Context $r0;
        org.simpleframework.xml.core.Composite $r1;
        java.lang.Object[] $r2;
        org.simpleframework.xml.strategy.Type $r3;
        org.simpleframework.xml.core.RootException $r4;
        java.lang.Class $r5;
        org.simpleframework.xml.core.Traverser $r6;

        $r6 := @this: org.simpleframework.xml.core.Traverser;

        $r5 := @parameter0: java.lang.Class;

        $r3 = specialinvoke $r6.<org.simpleframework.xml.core.Traverser: org.simpleframework.xml.strategy.Type getType(java.lang.Class)>($r5);

        if $r5 != null goto label1;

        $r4 = new org.simpleframework.xml.core.RootException;

        $r2 = newarray (java.lang.Object)[0];

        specialinvoke $r4.<org.simpleframework.xml.core.RootException: void <init>(java.lang.String,java.lang.Object[])>("Can not instantiate null class", $r2);

        throw $r4;

     label1:
        $r1 = new org.simpleframework.xml.core.Composite;

        $r0 = $r6.<org.simpleframework.xml.core.Traverser: org.simpleframework.xml.core.Context context>;

        specialinvoke $r1.<org.simpleframework.xml.core.Composite: void <init>(org.simpleframework.xml.core.Context,org.simpleframework.xml.strategy.Type)>($r0, $r3);

        return $r1;
    }

    private org.simpleframework.xml.core.Decorator getDecorator(java.lang.Class) throws java.lang.Exception
    {
        org.simpleframework.xml.core.Decorator $r0;
        org.simpleframework.xml.core.Context $r1;
        java.lang.Class $r2;
        org.simpleframework.xml.core.Traverser $r3;

        $r3 := @this: org.simpleframework.xml.core.Traverser;

        $r2 := @parameter0: java.lang.Class;

        $r1 = $r3.<org.simpleframework.xml.core.Traverser: org.simpleframework.xml.core.Context context>;

        $r0 = interfaceinvoke $r1.<org.simpleframework.xml.core.Context: org.simpleframework.xml.core.Decorator getDecorator(java.lang.Class)>($r2);

        return $r0;
    }

    private org.simpleframework.xml.strategy.Type getType(java.lang.Class)
    {
        org.simpleframework.xml.core.ClassType $r0;
        java.lang.Class $r1;
        org.simpleframework.xml.core.Traverser $r2;

        $r2 := @this: org.simpleframework.xml.core.Traverser;

        $r1 := @parameter0: java.lang.Class;

        $r0 = new org.simpleframework.xml.core.ClassType;

        specialinvoke $r0.<org.simpleframework.xml.core.ClassType: void <init>(java.lang.Class)>($r1);

        return $r0;
    }

    private java.lang.Object read(org.simpleframework.xml.stream.InputNode, java.lang.Class, java.lang.Object) throws java.lang.Exception
    {
        java.lang.Object[] $r0;
        java.lang.String $r1;
        org.simpleframework.xml.core.RootException $r2;
        java.lang.Object $r3;
        java.lang.Class $r4;
        org.simpleframework.xml.stream.InputNode $r5;
        org.simpleframework.xml.core.Traverser $r6;

        $r6 := @this: org.simpleframework.xml.core.Traverser;

        $r5 := @parameter0: org.simpleframework.xml.stream.InputNode;

        $r4 := @parameter1: java.lang.Class;

        $r3 := @parameter2: java.lang.Object;

        $r1 = virtualinvoke $r6.<org.simpleframework.xml.core.Traverser: java.lang.String getName(java.lang.Class)>($r4);

        if $r1 != null goto label1;

        $r2 = new org.simpleframework.xml.core.RootException;

        $r0 = newarray (java.lang.Object)[1];

        $r0[0] = $r4;

        specialinvoke $r2.<org.simpleframework.xml.core.RootException: void <init>(java.lang.String,java.lang.Object[])>("Root annotation required for %s", $r0);

        throw $r2;

     label1:
        return $r3;
    }

    protected java.lang.String getName(java.lang.Class) throws java.lang.Exception
    {
        org.simpleframework.xml.stream.Style $r0;
        java.lang.String $r1, $r5;
        org.simpleframework.xml.core.Context $r2;
        java.lang.Class $r3;
        org.simpleframework.xml.core.Traverser $r4;

        $r4 := @this: org.simpleframework.xml.core.Traverser;

        $r3 := @parameter0: java.lang.Class;

        $r2 = $r4.<org.simpleframework.xml.core.Traverser: org.simpleframework.xml.core.Context context>;

        $r1 = interfaceinvoke $r2.<org.simpleframework.xml.core.Context: java.lang.String getName(java.lang.Class)>($r3);

        $r0 = $r4.<org.simpleframework.xml.core.Traverser: org.simpleframework.xml.stream.Style style>;

        $r5 = interfaceinvoke $r0.<org.simpleframework.xml.stream.Style: java.lang.String getElement(java.lang.String)>($r1);

        return $r5;
    }

    public java.lang.Object read(org.simpleframework.xml.stream.InputNode, java.lang.Class) throws java.lang.Exception
    {
        java.lang.Object $r0, $r6;
        org.simpleframework.xml.core.Composite $r1;
        java.lang.Class $r2, $r5;
        org.simpleframework.xml.stream.InputNode $r3;
        org.simpleframework.xml.core.Traverser $r4;

        $r4 := @this: org.simpleframework.xml.core.Traverser;

        $r3 := @parameter0: org.simpleframework.xml.stream.InputNode;

        $r2 := @parameter1: java.lang.Class;

        $r1 = specialinvoke $r4.<org.simpleframework.xml.core.Traverser: org.simpleframework.xml.core.Composite getComposite(java.lang.Class)>($r2);

        $r0 = virtualinvoke $r1.<org.simpleframework.xml.core.Composite: java.lang.Object read(org.simpleframework.xml.stream.InputNode)>($r3);

        if $r0 == null goto label1;

        $r5 = virtualinvoke $r0.<java.lang.Object: java.lang.Class getClass()>();

        $r6 = specialinvoke $r4.<org.simpleframework.xml.core.Traverser: java.lang.Object read(org.simpleframework.xml.stream.InputNode,java.lang.Class,java.lang.Object)>($r3, $r5, $r0);

        return $r6;

     label1:
        return null;
    }

    public java.lang.Object read(org.simpleframework.xml.stream.InputNode, java.lang.Object) throws java.lang.Exception
    {
        org.simpleframework.xml.core.Composite $r0;
        java.lang.Class $r1;
        java.lang.Object $r2, $r5, $r6;
        org.simpleframework.xml.stream.InputNode $r3;
        org.simpleframework.xml.core.Traverser $r4;

        $r4 := @this: org.simpleframework.xml.core.Traverser;

        $r3 := @parameter0: org.simpleframework.xml.stream.InputNode;

        $r2 := @parameter1: java.lang.Object;

        $r1 = virtualinvoke $r2.<java.lang.Object: java.lang.Class getClass()>();

        $r0 = specialinvoke $r4.<org.simpleframework.xml.core.Traverser: org.simpleframework.xml.core.Composite getComposite(java.lang.Class)>($r1);

        $r5 = virtualinvoke $r0.<org.simpleframework.xml.core.Composite: java.lang.Object read(org.simpleframework.xml.stream.InputNode,java.lang.Object)>($r3, $r2);

        $r6 = specialinvoke $r4.<org.simpleframework.xml.core.Traverser: java.lang.Object read(org.simpleframework.xml.stream.InputNode,java.lang.Class,java.lang.Object)>($r3, $r1, $r5);

        return $r6;
    }

    public boolean validate(org.simpleframework.xml.stream.InputNode, java.lang.Class) throws java.lang.Exception
    {
        boolean $z0;
        java.lang.Object[] $r0;
        java.lang.String $r1;
        org.simpleframework.xml.core.Composite $r2;
        org.simpleframework.xml.core.RootException $r3;
        java.lang.Class $r4;
        org.simpleframework.xml.stream.InputNode $r5;
        org.simpleframework.xml.core.Traverser $r6;

        $r6 := @this: org.simpleframework.xml.core.Traverser;

        $r5 := @parameter0: org.simpleframework.xml.stream.InputNode;

        $r4 := @parameter1: java.lang.Class;

        $r2 = specialinvoke $r6.<org.simpleframework.xml.core.Traverser: org.simpleframework.xml.core.Composite getComposite(java.lang.Class)>($r4);

        $r1 = virtualinvoke $r6.<org.simpleframework.xml.core.Traverser: java.lang.String getName(java.lang.Class)>($r4);

        if $r1 != null goto label1;

        $r3 = new org.simpleframework.xml.core.RootException;

        $r0 = newarray (java.lang.Object)[1];

        $r0[0] = $r4;

        specialinvoke $r3.<org.simpleframework.xml.core.RootException: void <init>(java.lang.String,java.lang.Object[])>("Root annotation required for %s", $r0);

        throw $r3;

     label1:
        $z0 = virtualinvoke $r2.<org.simpleframework.xml.core.Composite: boolean validate(org.simpleframework.xml.stream.InputNode)>($r5);

        return $z0;
    }

    public void write(org.simpleframework.xml.stream.OutputNode, java.lang.Object) throws java.lang.Exception
    {
        java.lang.Class $r0;
        java.lang.Object $r1;
        org.simpleframework.xml.stream.OutputNode $r2;
        org.simpleframework.xml.core.Traverser $r3;

        $r3 := @this: org.simpleframework.xml.core.Traverser;

        $r2 := @parameter0: org.simpleframework.xml.stream.OutputNode;

        $r1 := @parameter1: java.lang.Object;

        $r0 = virtualinvoke $r1.<java.lang.Object: java.lang.Class getClass()>();

        virtualinvoke $r3.<org.simpleframework.xml.core.Traverser: void write(org.simpleframework.xml.stream.OutputNode,java.lang.Object,java.lang.Class)>($r2, $r1, $r0);

        return;
    }

    public void write(org.simpleframework.xml.stream.OutputNode, java.lang.Object, java.lang.Class) throws java.lang.Exception
    {
        java.lang.Object[] $r0;
        java.lang.String $r1;
        org.simpleframework.xml.core.RootException $r2;
        java.lang.Class $r3, $r4;
        java.lang.Object $r5;
        org.simpleframework.xml.stream.OutputNode $r6;
        org.simpleframework.xml.core.Traverser $r7;

        $r7 := @this: org.simpleframework.xml.core.Traverser;

        $r6 := @parameter0: org.simpleframework.xml.stream.OutputNode;

        $r5 := @parameter1: java.lang.Object;

        $r3 := @parameter2: java.lang.Class;

        $r4 = virtualinvoke $r5.<java.lang.Object: java.lang.Class getClass()>();

        $r1 = virtualinvoke $r7.<org.simpleframework.xml.core.Traverser: java.lang.String getName(java.lang.Class)>($r4);

        if $r1 != null goto label1;

        $r2 = new org.simpleframework.xml.core.RootException;

        $r0 = newarray (java.lang.Object)[1];

        $r0[0] = $r4;

        specialinvoke $r2.<org.simpleframework.xml.core.RootException: void <init>(java.lang.String,java.lang.Object[])>("Root annotation required for %s", $r0);

        throw $r2;

     label1:
        virtualinvoke $r7.<org.simpleframework.xml.core.Traverser: void write(org.simpleframework.xml.stream.OutputNode,java.lang.Object,java.lang.Class,java.lang.String)>($r6, $r5, $r3, $r1);

        return;
    }

    public void write(org.simpleframework.xml.stream.OutputNode, java.lang.Object, java.lang.Class, java.lang.String) throws java.lang.Exception
    {
        org.simpleframework.xml.core.Composite $r0;
        boolean $z0;
        org.simpleframework.xml.core.Decorator $r1;
        org.simpleframework.xml.strategy.Type $r2;
        org.simpleframework.xml.core.Context $r3;
        java.lang.String $r4;
        java.lang.Class $r5, $r10;
        java.lang.Object $r6;
        org.simpleframework.xml.stream.OutputNode $r7, $r9;
        org.simpleframework.xml.core.Traverser $r8;

        $r8 := @this: org.simpleframework.xml.core.Traverser;

        $r7 := @parameter0: org.simpleframework.xml.stream.OutputNode;

        $r6 := @parameter1: java.lang.Object;

        $r5 := @parameter2: java.lang.Class;

        $r4 := @parameter3: java.lang.String;

        $r9 = interfaceinvoke $r7.<org.simpleframework.xml.stream.OutputNode: org.simpleframework.xml.stream.OutputNode getChild(java.lang.String)>($r4);

        $r2 = specialinvoke $r8.<org.simpleframework.xml.core.Traverser: org.simpleframework.xml.strategy.Type getType(java.lang.Class)>($r5);

        if $r6 == null goto label2;

        $r10 = virtualinvoke $r6.<java.lang.Object: java.lang.Class getClass()>();

        $r1 = specialinvoke $r8.<org.simpleframework.xml.core.Traverser: org.simpleframework.xml.core.Decorator getDecorator(java.lang.Class)>($r10);

        if $r1 == null goto label1;

        interfaceinvoke $r1.<org.simpleframework.xml.core.Decorator: void decorate(org.simpleframework.xml.stream.OutputNode)>($r9);

     label1:
        $r3 = $r8.<org.simpleframework.xml.core.Traverser: org.simpleframework.xml.core.Context context>;

        $z0 = interfaceinvoke $r3.<org.simpleframework.xml.core.Context: boolean setOverride(org.simpleframework.xml.strategy.Type,java.lang.Object,org.simpleframework.xml.stream.OutputNode)>($r2, $r6, $r9);

        if $z0 != 0 goto label2;

        $r0 = specialinvoke $r8.<org.simpleframework.xml.core.Traverser: org.simpleframework.xml.core.Composite getComposite(java.lang.Class)>($r10);

        virtualinvoke $r0.<org.simpleframework.xml.core.Composite: void write(org.simpleframework.xml.stream.OutputNode,java.lang.Object)>($r9, $r6);

     label2:
        interfaceinvoke $r9.<org.simpleframework.xml.stream.OutputNode: void commit()>();

        return;
    }
}
