class org.simpleframework.xml.stream.NodeWriter extends java.lang.Object
{
    private final java.util.Set active;
    private final org.simpleframework.xml.stream.OutputStack stack;
    private final boolean verbose;
    private final org.simpleframework.xml.stream.Formatter writer;

    public void <init>(java.io.Writer)
    {
        org.simpleframework.xml.stream.Format $r0;
        java.io.Writer $r1;
        org.simpleframework.xml.stream.NodeWriter $r2;

        $r2 := @this: org.simpleframework.xml.stream.NodeWriter;

        $r1 := @parameter0: java.io.Writer;

        $r0 = new org.simpleframework.xml.stream.Format;

        specialinvoke $r0.<org.simpleframework.xml.stream.Format: void <init>()>();

        specialinvoke $r2.<org.simpleframework.xml.stream.NodeWriter: void <init>(java.io.Writer,org.simpleframework.xml.stream.Format)>($r1, $r0);

        return;
    }

    public void <init>(java.io.Writer, org.simpleframework.xml.stream.Format)
    {
        org.simpleframework.xml.stream.Format $r0;
        java.io.Writer $r1;
        org.simpleframework.xml.stream.NodeWriter $r2;

        $r2 := @this: org.simpleframework.xml.stream.NodeWriter;

        $r1 := @parameter0: java.io.Writer;

        $r0 := @parameter1: org.simpleframework.xml.stream.Format;

        specialinvoke $r2.<org.simpleframework.xml.stream.NodeWriter: void <init>(java.io.Writer,org.simpleframework.xml.stream.Format,boolean)>($r1, $r0, 0);

        return;
    }

    private void <init>(java.io.Writer, org.simpleframework.xml.stream.Format, boolean)
    {
        org.simpleframework.xml.stream.OutputStack $r0;
        java.util.HashSet $r1;
        java.util.Set $r2;
        org.simpleframework.xml.stream.Formatter $r3;
        boolean $z0;
        org.simpleframework.xml.stream.Format $r4;
        java.io.Writer $r5;
        org.simpleframework.xml.stream.NodeWriter $r6;

        $r6 := @this: org.simpleframework.xml.stream.NodeWriter;

        $r5 := @parameter0: java.io.Writer;

        $r4 := @parameter1: org.simpleframework.xml.stream.Format;

        $z0 := @parameter2: boolean;

        specialinvoke $r6.<java.lang.Object: void <init>()>();

        $r3 = new org.simpleframework.xml.stream.Formatter;

        specialinvoke $r3.<org.simpleframework.xml.stream.Formatter: void <init>(java.io.Writer,org.simpleframework.xml.stream.Format)>($r5, $r4);

        $r6.<org.simpleframework.xml.stream.NodeWriter: org.simpleframework.xml.stream.Formatter writer> = $r3;

        $r1 = new java.util.HashSet;

        specialinvoke $r1.<java.util.HashSet: void <init>()>();

        $r6.<org.simpleframework.xml.stream.NodeWriter: java.util.Set active> = $r1;

        $r0 = new org.simpleframework.xml.stream.OutputStack;

        $r2 = $r6.<org.simpleframework.xml.stream.NodeWriter: java.util.Set active>;

        specialinvoke $r0.<org.simpleframework.xml.stream.OutputStack: void <init>(java.util.Set)>($r2);

        $r6.<org.simpleframework.xml.stream.NodeWriter: org.simpleframework.xml.stream.OutputStack stack> = $r0;

        $r6.<org.simpleframework.xml.stream.NodeWriter: boolean verbose> = $z0;

        return;
    }

    private void writeAttributes(org.simpleframework.xml.stream.OutputNode) throws java.lang.Exception
    {
        java.util.Set $r0;
        org.simpleframework.xml.stream.Formatter $r1;
        org.simpleframework.xml.stream.Node $r2;
        java.lang.String $r3, $r4, $r5;
        java.lang.Object $r6;
        boolean $z0, $z1;
        java.util.Iterator $r7;
        org.simpleframework.xml.stream.NodeMap $r8;
        org.simpleframework.xml.stream.OutputNode $r9, $r10;
        org.simpleframework.xml.stream.NodeWriter $r11;

        $r11 := @this: org.simpleframework.xml.stream.NodeWriter;

        $r9 := @parameter0: org.simpleframework.xml.stream.OutputNode;

        $r8 = interfaceinvoke $r9.<org.simpleframework.xml.stream.OutputNode: org.simpleframework.xml.stream.NodeMap getAttributes()>();

        $r7 = interfaceinvoke $r8.<org.simpleframework.xml.stream.NodeMap: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r7.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r6 = interfaceinvoke $r7.<java.util.Iterator: java.lang.Object next()>();

        $r3 = (java.lang.String) $r6;

        $r2 = interfaceinvoke $r8.<org.simpleframework.xml.stream.NodeMap: org.simpleframework.xml.stream.Node get(java.lang.String)>($r3);

        $r10 = (org.simpleframework.xml.stream.OutputNode) $r2;

        $r4 = interfaceinvoke $r10.<org.simpleframework.xml.stream.OutputNode: java.lang.String getValue()>();

        $z1 = $r11.<org.simpleframework.xml.stream.NodeWriter: boolean verbose>;

        $r5 = interfaceinvoke $r10.<org.simpleframework.xml.stream.OutputNode: java.lang.String getPrefix(boolean)>($z1);

        $r1 = $r11.<org.simpleframework.xml.stream.NodeWriter: org.simpleframework.xml.stream.Formatter writer>;

        virtualinvoke $r1.<org.simpleframework.xml.stream.Formatter: void writeAttribute(java.lang.String,java.lang.String,java.lang.String)>($r3, $r4, $r5);

        goto label1;

     label2:
        $r0 = $r11.<org.simpleframework.xml.stream.NodeWriter: java.util.Set active>;

        interfaceinvoke $r0.<java.util.Set: boolean remove(java.lang.Object)>($r9);

        return;
    }

    private void writeComment(org.simpleframework.xml.stream.OutputNode) throws java.lang.Exception
    {
        java.lang.String $r0;
        org.simpleframework.xml.stream.Formatter $r1;
        org.simpleframework.xml.stream.OutputNode $r2;
        org.simpleframework.xml.stream.NodeWriter $r3;

        $r3 := @this: org.simpleframework.xml.stream.NodeWriter;

        $r2 := @parameter0: org.simpleframework.xml.stream.OutputNode;

        $r0 = interfaceinvoke $r2.<org.simpleframework.xml.stream.OutputNode: java.lang.String getComment()>();

        if $r0 == null goto label1;

        $r1 = $r3.<org.simpleframework.xml.stream.NodeWriter: org.simpleframework.xml.stream.Formatter writer>;

        virtualinvoke $r1.<org.simpleframework.xml.stream.Formatter: void writeComment(java.lang.String)>($r0);

        return;

     label1:
        return;
    }

    private void writeEnd(org.simpleframework.xml.stream.OutputNode) throws java.lang.Exception
    {
        java.lang.Object $r0;
        boolean $z0;
        java.util.Iterator $r1;
        org.simpleframework.xml.stream.OutputStack $r2;
        org.simpleframework.xml.stream.Mode $r3, $r4;
        org.simpleframework.xml.stream.OutputNode $r5, $r6;
        org.simpleframework.xml.stream.NodeWriter $r7;

        $r7 := @this: org.simpleframework.xml.stream.NodeWriter;

        $r5 := @parameter0: org.simpleframework.xml.stream.OutputNode;

        $r3 = interfaceinvoke $r5.<org.simpleframework.xml.stream.OutputNode: org.simpleframework.xml.stream.Mode getMode()>();

        $r2 = $r7.<org.simpleframework.xml.stream.NodeWriter: org.simpleframework.xml.stream.OutputStack stack>;

        $r1 = virtualinvoke $r2.<org.simpleframework.xml.stream.OutputStack: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r0 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>();

        $r6 = (org.simpleframework.xml.stream.OutputNode) $r0;

        $r4 = <org.simpleframework.xml.stream.Mode: org.simpleframework.xml.stream.Mode INHERIT>;

        if $r3 == $r4 goto label3;

     label2:
        specialinvoke $r7.<org.simpleframework.xml.stream.NodeWriter: void writeEnd(org.simpleframework.xml.stream.OutputNode,org.simpleframework.xml.stream.Mode)>($r5, $r3);

        return;

     label3:
        $r3 = interfaceinvoke $r6.<org.simpleframework.xml.stream.OutputNode: org.simpleframework.xml.stream.Mode getMode()>();

        goto label1;
    }

    private void writeEnd(org.simpleframework.xml.stream.OutputNode, org.simpleframework.xml.stream.Mode) throws java.lang.Exception
    {
        boolean $z0;
        java.lang.String $r0, $r1, $r6;
        org.simpleframework.xml.stream.Formatter $r2, $r7, $r8;
        org.simpleframework.xml.stream.Mode $r3;
        org.simpleframework.xml.stream.OutputNode $r4;
        org.simpleframework.xml.stream.NodeWriter $r5;

        $r5 := @this: org.simpleframework.xml.stream.NodeWriter;

        $r4 := @parameter0: org.simpleframework.xml.stream.OutputNode;

        $r3 := @parameter1: org.simpleframework.xml.stream.Mode;

        $r0 = interfaceinvoke $r4.<org.simpleframework.xml.stream.OutputNode: java.lang.String getValue()>();

        if $r0 == null goto label1;

        $r2 = $r5.<org.simpleframework.xml.stream.NodeWriter: org.simpleframework.xml.stream.Formatter writer>;

        virtualinvoke $r2.<org.simpleframework.xml.stream.Formatter: void writeText(java.lang.String,org.simpleframework.xml.stream.Mode)>($r0, $r3);

     label1:
        $r6 = interfaceinvoke $r4.<org.simpleframework.xml.stream.OutputNode: java.lang.String getName()>();

        $z0 = $r5.<org.simpleframework.xml.stream.NodeWriter: boolean verbose>;

        $r1 = interfaceinvoke $r4.<org.simpleframework.xml.stream.OutputNode: java.lang.String getPrefix(boolean)>($z0);

        if $r6 == null goto label2;

        $r7 = $r5.<org.simpleframework.xml.stream.NodeWriter: org.simpleframework.xml.stream.Formatter writer>;

        virtualinvoke $r7.<org.simpleframework.xml.stream.Formatter: void writeEnd(java.lang.String,java.lang.String)>($r6, $r1);

        $r8 = $r5.<org.simpleframework.xml.stream.NodeWriter: org.simpleframework.xml.stream.Formatter writer>;

        virtualinvoke $r8.<org.simpleframework.xml.stream.Formatter: void flush()>();

        return;

     label2:
        return;
    }

    private void writeName(org.simpleframework.xml.stream.OutputNode) throws java.lang.Exception
    {
        org.simpleframework.xml.stream.Formatter $r0;
        java.lang.String $r1, $r2;
        boolean $z0;
        org.simpleframework.xml.stream.OutputNode $r3;
        org.simpleframework.xml.stream.NodeWriter $r4;

        $r4 := @this: org.simpleframework.xml.stream.NodeWriter;

        $r3 := @parameter0: org.simpleframework.xml.stream.OutputNode;

        $z0 = $r4.<org.simpleframework.xml.stream.NodeWriter: boolean verbose>;

        $r1 = interfaceinvoke $r3.<org.simpleframework.xml.stream.OutputNode: java.lang.String getPrefix(boolean)>($z0);

        $r2 = interfaceinvoke $r3.<org.simpleframework.xml.stream.OutputNode: java.lang.String getName()>();

        if $r2 == null goto label1;

        $r0 = $r4.<org.simpleframework.xml.stream.NodeWriter: org.simpleframework.xml.stream.Formatter writer>;

        virtualinvoke $r0.<org.simpleframework.xml.stream.Formatter: void writeStart(java.lang.String,java.lang.String)>($r2, $r1);

        return;

     label1:
        return;
    }

    private void writeNamespaces(org.simpleframework.xml.stream.OutputNode) throws java.lang.Exception
    {
        org.simpleframework.xml.stream.Formatter $r0;
        java.lang.String $r1, $r2;
        java.lang.Object $r3;
        boolean $z0;
        java.util.Iterator $r4;
        org.simpleframework.xml.stream.NamespaceMap $r5;
        org.simpleframework.xml.stream.OutputNode $r6;
        org.simpleframework.xml.stream.NodeWriter $r7;

        $r7 := @this: org.simpleframework.xml.stream.NodeWriter;

        $r6 := @parameter0: org.simpleframework.xml.stream.OutputNode;

        $r5 = interfaceinvoke $r6.<org.simpleframework.xml.stream.OutputNode: org.simpleframework.xml.stream.NamespaceMap getNamespaces()>();

        $r4 = interfaceinvoke $r5.<org.simpleframework.xml.stream.NamespaceMap: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        $r1 = (java.lang.String) $r3;

        $r2 = interfaceinvoke $r5.<org.simpleframework.xml.stream.NamespaceMap: java.lang.String getPrefix(java.lang.String)>($r1);

        $r0 = $r7.<org.simpleframework.xml.stream.NodeWriter: org.simpleframework.xml.stream.Formatter writer>;

        virtualinvoke $r0.<org.simpleframework.xml.stream.Formatter: void writeNamespace(java.lang.String,java.lang.String)>($r1, $r2);

        goto label1;

     label2:
        return;
    }

    private org.simpleframework.xml.stream.OutputNode writeStart(org.simpleframework.xml.stream.OutputNode, java.lang.String) throws java.lang.Exception
    {
        org.simpleframework.xml.stream.OutputStack $r0;
        org.simpleframework.xml.stream.NodeException $r1;
        org.simpleframework.xml.stream.OutputElement $r2;
        java.lang.String $r3;
        org.simpleframework.xml.stream.OutputNode $r4, $r6;
        org.simpleframework.xml.stream.NodeWriter $r5;

        $r5 := @this: org.simpleframework.xml.stream.NodeWriter;

        $r4 := @parameter0: org.simpleframework.xml.stream.OutputNode;

        $r3 := @parameter1: java.lang.String;

        $r2 = new org.simpleframework.xml.stream.OutputElement;

        specialinvoke $r2.<org.simpleframework.xml.stream.OutputElement: void <init>(org.simpleframework.xml.stream.OutputNode,org.simpleframework.xml.stream.NodeWriter,java.lang.String)>($r4, $r5, $r3);

        if $r3 != null goto label1;

        $r1 = new org.simpleframework.xml.stream.NodeException;

        specialinvoke $r1.<org.simpleframework.xml.stream.NodeException: void <init>(java.lang.String)>("Can not have a null name");

        throw $r1;

     label1:
        $r0 = $r5.<org.simpleframework.xml.stream.NodeWriter: org.simpleframework.xml.stream.OutputStack stack>;

        $r6 = virtualinvoke $r0.<org.simpleframework.xml.stream.OutputStack: org.simpleframework.xml.stream.OutputNode push(org.simpleframework.xml.stream.OutputNode)>($r2);

        return $r6;
    }

    private void writeStart(org.simpleframework.xml.stream.OutputNode) throws java.lang.Exception
    {
        org.simpleframework.xml.stream.OutputNode $r0;
        org.simpleframework.xml.stream.NodeWriter $r1;

        $r1 := @this: org.simpleframework.xml.stream.NodeWriter;

        $r0 := @parameter0: org.simpleframework.xml.stream.OutputNode;

        specialinvoke $r1.<org.simpleframework.xml.stream.NodeWriter: void writeComment(org.simpleframework.xml.stream.OutputNode)>($r0);

        specialinvoke $r1.<org.simpleframework.xml.stream.NodeWriter: void writeName(org.simpleframework.xml.stream.OutputNode)>($r0);

        specialinvoke $r1.<org.simpleframework.xml.stream.NodeWriter: void writeAttributes(org.simpleframework.xml.stream.OutputNode)>($r0);

        specialinvoke $r1.<org.simpleframework.xml.stream.NodeWriter: void writeNamespaces(org.simpleframework.xml.stream.OutputNode)>($r0);

        return;
    }

    public void commit(org.simpleframework.xml.stream.OutputNode) throws java.lang.Exception
    {
        boolean $z0, $z1;
        org.simpleframework.xml.stream.OutputStack $r0, $r4, $r5, $r7, $r9;
        org.simpleframework.xml.stream.OutputNode $r1, $r2, $r6, $r8;
        org.simpleframework.xml.stream.NodeWriter $r3;

        $r3 := @this: org.simpleframework.xml.stream.NodeWriter;

        $r1 := @parameter0: org.simpleframework.xml.stream.OutputNode;

        $r0 = $r3.<org.simpleframework.xml.stream.NodeWriter: org.simpleframework.xml.stream.OutputStack stack>;

        $z0 = virtualinvoke $r0.<org.simpleframework.xml.stream.OutputStack: boolean contains(java.lang.Object)>($r1);

        if $z0 == 0 goto label3;

        $r4 = $r3.<org.simpleframework.xml.stream.NodeWriter: org.simpleframework.xml.stream.OutputStack stack>;

        $r2 = virtualinvoke $r4.<org.simpleframework.xml.stream.OutputStack: org.simpleframework.xml.stream.OutputNode top()>();

        $z1 = virtualinvoke $r3.<org.simpleframework.xml.stream.NodeWriter: boolean isCommitted(org.simpleframework.xml.stream.OutputNode)>($r2);

        if $z1 != 0 goto label1;

        specialinvoke $r3.<org.simpleframework.xml.stream.NodeWriter: void writeStart(org.simpleframework.xml.stream.OutputNode)>($r2);

     label1:
        $r5 = $r3.<org.simpleframework.xml.stream.NodeWriter: org.simpleframework.xml.stream.OutputStack stack>;

        $r6 = virtualinvoke $r5.<org.simpleframework.xml.stream.OutputStack: org.simpleframework.xml.stream.OutputNode top()>();

        if $r6 == $r1 goto label2;

        $r7 = $r3.<org.simpleframework.xml.stream.NodeWriter: org.simpleframework.xml.stream.OutputStack stack>;

        $r8 = virtualinvoke $r7.<org.simpleframework.xml.stream.OutputStack: org.simpleframework.xml.stream.OutputNode pop()>();

        specialinvoke $r3.<org.simpleframework.xml.stream.NodeWriter: void writeEnd(org.simpleframework.xml.stream.OutputNode)>($r8);

        goto label1;

     label2:
        specialinvoke $r3.<org.simpleframework.xml.stream.NodeWriter: void writeEnd(org.simpleframework.xml.stream.OutputNode)>($r1);

        $r9 = $r3.<org.simpleframework.xml.stream.NodeWriter: org.simpleframework.xml.stream.OutputStack stack>;

        virtualinvoke $r9.<org.simpleframework.xml.stream.OutputStack: org.simpleframework.xml.stream.OutputNode pop()>();

        return;

     label3:
        return;
    }

    public boolean isCommitted(org.simpleframework.xml.stream.OutputNode)
    {
        boolean $z0;
        java.util.Set $r0;
        org.simpleframework.xml.stream.OutputNode $r1;
        org.simpleframework.xml.stream.NodeWriter $r2;

        $r2 := @this: org.simpleframework.xml.stream.NodeWriter;

        $r1 := @parameter0: org.simpleframework.xml.stream.OutputNode;

        $r0 = $r2.<org.simpleframework.xml.stream.NodeWriter: java.util.Set active>;

        $z0 = interfaceinvoke $r0.<java.util.Set: boolean contains(java.lang.Object)>($r1);

        if $z0 != 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public boolean isRoot(org.simpleframework.xml.stream.OutputNode)
    {
        org.simpleframework.xml.stream.OutputStack $r0;
        org.simpleframework.xml.stream.OutputNode $r1, $r2;
        org.simpleframework.xml.stream.NodeWriter $r3;

        $r3 := @this: org.simpleframework.xml.stream.NodeWriter;

        $r1 := @parameter0: org.simpleframework.xml.stream.OutputNode;

        $r0 = $r3.<org.simpleframework.xml.stream.NodeWriter: org.simpleframework.xml.stream.OutputStack stack>;

        $r2 = virtualinvoke $r0.<org.simpleframework.xml.stream.OutputStack: org.simpleframework.xml.stream.OutputNode bottom()>();

        if $r2 != $r1 goto label1;

        return 1;

     label1:
        return 0;
    }

    public void remove(org.simpleframework.xml.stream.OutputNode) throws java.lang.Exception
    {
        org.simpleframework.xml.stream.NodeException $r0;
        org.simpleframework.xml.stream.OutputStack $r1, $r5;
        org.simpleframework.xml.stream.OutputNode $r2, $r3;
        org.simpleframework.xml.stream.NodeWriter $r4;

        $r4 := @this: org.simpleframework.xml.stream.NodeWriter;

        $r2 := @parameter0: org.simpleframework.xml.stream.OutputNode;

        $r1 = $r4.<org.simpleframework.xml.stream.NodeWriter: org.simpleframework.xml.stream.OutputStack stack>;

        $r3 = virtualinvoke $r1.<org.simpleframework.xml.stream.OutputStack: org.simpleframework.xml.stream.OutputNode top()>();

        if $r3 == $r2 goto label1;

        $r0 = new org.simpleframework.xml.stream.NodeException;

        specialinvoke $r0.<org.simpleframework.xml.stream.NodeException: void <init>(java.lang.String)>("Cannot remove node");

        throw $r0;

     label1:
        $r5 = $r4.<org.simpleframework.xml.stream.NodeWriter: org.simpleframework.xml.stream.OutputStack stack>;

        virtualinvoke $r5.<org.simpleframework.xml.stream.OutputStack: org.simpleframework.xml.stream.OutputNode pop()>();

        return;
    }

    public org.simpleframework.xml.stream.OutputNode writeElement(org.simpleframework.xml.stream.OutputNode, java.lang.String) throws java.lang.Exception
    {
        boolean $z0, $z1, $z2;
        org.simpleframework.xml.stream.OutputStack $r0, $r6, $r7, $r8, $r10;
        java.lang.String $r1;
        org.simpleframework.xml.stream.OutputNode $r2, $r3, $r5, $r9, $r11, $r12;
        org.simpleframework.xml.stream.NodeWriter $r4;

        $r4 := @this: org.simpleframework.xml.stream.NodeWriter;

        $r2 := @parameter0: org.simpleframework.xml.stream.OutputNode;

        $r1 := @parameter1: java.lang.String;

        $r0 = $r4.<org.simpleframework.xml.stream.NodeWriter: org.simpleframework.xml.stream.OutputStack stack>;

        $z0 = virtualinvoke $r0.<org.simpleframework.xml.stream.OutputStack: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        $r5 = specialinvoke $r4.<org.simpleframework.xml.stream.NodeWriter: org.simpleframework.xml.stream.OutputNode writeStart(org.simpleframework.xml.stream.OutputNode,java.lang.String)>($r2, $r1);

        return $r5;

     label1:
        $r6 = $r4.<org.simpleframework.xml.stream.NodeWriter: org.simpleframework.xml.stream.OutputStack stack>;

        $z1 = virtualinvoke $r6.<org.simpleframework.xml.stream.OutputStack: boolean contains(java.lang.Object)>($r2);

        if $z1 == 0 goto label4;

        $r7 = $r4.<org.simpleframework.xml.stream.NodeWriter: org.simpleframework.xml.stream.OutputStack stack>;

        $r3 = virtualinvoke $r7.<org.simpleframework.xml.stream.OutputStack: org.simpleframework.xml.stream.OutputNode top()>();

        $z2 = virtualinvoke $r4.<org.simpleframework.xml.stream.NodeWriter: boolean isCommitted(org.simpleframework.xml.stream.OutputNode)>($r3);

        if $z2 != 0 goto label2;

        specialinvoke $r4.<org.simpleframework.xml.stream.NodeWriter: void writeStart(org.simpleframework.xml.stream.OutputNode)>($r3);

     label2:
        $r8 = $r4.<org.simpleframework.xml.stream.NodeWriter: org.simpleframework.xml.stream.OutputStack stack>;

        $r9 = virtualinvoke $r8.<org.simpleframework.xml.stream.OutputStack: org.simpleframework.xml.stream.OutputNode top()>();

        if $r9 == $r2 goto label3;

        $r10 = $r4.<org.simpleframework.xml.stream.NodeWriter: org.simpleframework.xml.stream.OutputStack stack>;

        $r11 = virtualinvoke $r10.<org.simpleframework.xml.stream.OutputStack: org.simpleframework.xml.stream.OutputNode pop()>();

        specialinvoke $r4.<org.simpleframework.xml.stream.NodeWriter: void writeEnd(org.simpleframework.xml.stream.OutputNode)>($r11);

        goto label2;

     label3:
        $r12 = specialinvoke $r4.<org.simpleframework.xml.stream.NodeWriter: org.simpleframework.xml.stream.OutputNode writeStart(org.simpleframework.xml.stream.OutputNode,java.lang.String)>($r2, $r1);

        return $r12;

     label4:
        return null;
    }

    public org.simpleframework.xml.stream.OutputNode writeRoot() throws java.lang.Exception
    {
        org.simpleframework.xml.stream.Formatter $r0;
        boolean $z0;
        org.simpleframework.xml.stream.OutputStack $r1, $r4;
        org.simpleframework.xml.stream.OutputDocument $r2;
        org.simpleframework.xml.stream.NodeWriter $r3;

        $r3 := @this: org.simpleframework.xml.stream.NodeWriter;

        $r2 = new org.simpleframework.xml.stream.OutputDocument;

        $r1 = $r3.<org.simpleframework.xml.stream.NodeWriter: org.simpleframework.xml.stream.OutputStack stack>;

        specialinvoke $r2.<org.simpleframework.xml.stream.OutputDocument: void <init>(org.simpleframework.xml.stream.NodeWriter,org.simpleframework.xml.stream.OutputStack)>($r3, $r1);

        $r4 = $r3.<org.simpleframework.xml.stream.NodeWriter: org.simpleframework.xml.stream.OutputStack stack>;

        $z0 = virtualinvoke $r4.<org.simpleframework.xml.stream.OutputStack: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        $r0 = $r3.<org.simpleframework.xml.stream.NodeWriter: org.simpleframework.xml.stream.Formatter writer>;

        virtualinvoke $r0.<org.simpleframework.xml.stream.Formatter: void writeProlog()>();

        return $r2;

     label1:
        return $r2;
    }
}
