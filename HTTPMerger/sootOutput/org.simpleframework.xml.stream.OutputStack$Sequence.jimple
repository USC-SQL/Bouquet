class org.simpleframework.xml.stream.OutputStack$Sequence extends java.lang.Object implements java.util.Iterator
{
    private int cursor;
    final org.simpleframework.xml.stream.OutputStack this$0;

    public void <init>(org.simpleframework.xml.stream.OutputStack)
    {
        int $i0;
        org.simpleframework.xml.stream.OutputStack $r0;
        org.simpleframework.xml.stream.OutputStack$Sequence $r1;

        $r1 := @this: org.simpleframework.xml.stream.OutputStack$Sequence;

        $r0 := @parameter0: org.simpleframework.xml.stream.OutputStack;

        $r1.<org.simpleframework.xml.stream.OutputStack$Sequence: org.simpleframework.xml.stream.OutputStack this$0> = $r0;

        specialinvoke $r1.<java.lang.Object: void <init>()>();

        $i0 = virtualinvoke $r0.<org.simpleframework.xml.stream.OutputStack: int size()>();

        $r1.<org.simpleframework.xml.stream.OutputStack$Sequence: int cursor> = $i0;

        return;
    }

    public boolean hasNext()
    {
        int $i0;
        org.simpleframework.xml.stream.OutputStack$Sequence $r0;

        $r0 := @this: org.simpleframework.xml.stream.OutputStack$Sequence;

        $i0 = $r0.<org.simpleframework.xml.stream.OutputStack$Sequence: int cursor>;

        if $i0 <= 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public volatile java.lang.Object next()
    {
        org.simpleframework.xml.stream.OutputNode $r0;
        org.simpleframework.xml.stream.OutputStack$Sequence $r1;

        $r1 := @this: org.simpleframework.xml.stream.OutputStack$Sequence;

        $r0 = virtualinvoke $r1.<org.simpleframework.xml.stream.OutputStack$Sequence: org.simpleframework.xml.stream.OutputNode next()>();

        return $r0;
    }

    public org.simpleframework.xml.stream.OutputNode next()
    {
        org.simpleframework.xml.stream.OutputNode $r0;
        java.lang.Object $r1;
        org.simpleframework.xml.stream.OutputStack $r2;
        boolean $z0;
        int $i0, $i1;
        org.simpleframework.xml.stream.OutputStack$Sequence $r3;

        $r3 := @this: org.simpleframework.xml.stream.OutputStack$Sequence;

        $z0 = virtualinvoke $r3.<org.simpleframework.xml.stream.OutputStack$Sequence: boolean hasNext()>();

        if $z0 == 0 goto label1;

        $r2 = $r3.<org.simpleframework.xml.stream.OutputStack$Sequence: org.simpleframework.xml.stream.OutputStack this$0>;

        $i0 = $r3.<org.simpleframework.xml.stream.OutputStack$Sequence: int cursor>;

        $i1 = $i0 + -1;

        $r3.<org.simpleframework.xml.stream.OutputStack$Sequence: int cursor> = $i1;

        $r1 = virtualinvoke $r2.<org.simpleframework.xml.stream.OutputStack: java.lang.Object get(int)>($i1);

        $r0 = (org.simpleframework.xml.stream.OutputNode) $r1;

        return $r0;

     label1:
        return null;
    }

    public void remove()
    {
        int $i0;
        org.simpleframework.xml.stream.OutputStack $r0;
        org.simpleframework.xml.stream.OutputStack$Sequence $r1;

        $r1 := @this: org.simpleframework.xml.stream.OutputStack$Sequence;

        $r0 = $r1.<org.simpleframework.xml.stream.OutputStack$Sequence: org.simpleframework.xml.stream.OutputStack this$0>;

        $i0 = $r1.<org.simpleframework.xml.stream.OutputStack$Sequence: int cursor>;

        virtualinvoke $r0.<org.simpleframework.xml.stream.OutputStack: org.simpleframework.xml.stream.OutputNode purge(int)>($i0);

        return;
    }
}
