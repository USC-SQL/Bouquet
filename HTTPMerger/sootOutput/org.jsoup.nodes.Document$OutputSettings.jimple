public class org.jsoup.nodes.Document$OutputSettings extends java.lang.Object implements java.lang.Cloneable
{
    private java.nio.charset.Charset charset;
    private java.nio.charset.CharsetEncoder charsetEncoder;
    private org.jsoup.nodes.Entities$EscapeMode escapeMode;
    private int indentAmount;
    private boolean prettyPrint;

    public void <init>()
    {
        java.nio.charset.CharsetEncoder $r0;
        java.nio.charset.Charset $r1, $r4;
        org.jsoup.nodes.Entities$EscapeMode $r2;
        org.jsoup.nodes.Document$OutputSettings $r3;

        $r3 := @this: org.jsoup.nodes.Document$OutputSettings;

        specialinvoke $r3.<java.lang.Object: void <init>()>();

        $r2 = <org.jsoup.nodes.Entities$EscapeMode: org.jsoup.nodes.Entities$EscapeMode base>;

        $r3.<org.jsoup.nodes.Document$OutputSettings: org.jsoup.nodes.Entities$EscapeMode escapeMode> = $r2;

        $r1 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>("UTF-8");

        $r3.<org.jsoup.nodes.Document$OutputSettings: java.nio.charset.Charset charset> = $r1;

        $r4 = $r3.<org.jsoup.nodes.Document$OutputSettings: java.nio.charset.Charset charset>;

        $r0 = virtualinvoke $r4.<java.nio.charset.Charset: java.nio.charset.CharsetEncoder newEncoder()>();

        $r3.<org.jsoup.nodes.Document$OutputSettings: java.nio.charset.CharsetEncoder charsetEncoder> = $r0;

        $r3.<org.jsoup.nodes.Document$OutputSettings: boolean prettyPrint> = 1;

        $r3.<org.jsoup.nodes.Document$OutputSettings: int indentAmount> = 1;

        return;
    }

    public java.nio.charset.Charset charset()
    {
        java.nio.charset.Charset r0;
        org.jsoup.nodes.Document$OutputSettings $r1;

        $r1 := @this: org.jsoup.nodes.Document$OutputSettings;

        r0 = $r1.<org.jsoup.nodes.Document$OutputSettings: java.nio.charset.Charset charset>;

        return r0;
    }

    public org.jsoup.nodes.Document$OutputSettings charset(java.lang.String)
    {
        java.nio.charset.Charset $r0;
        java.lang.String $r1;
        org.jsoup.nodes.Document$OutputSettings $r2;

        $r2 := @this: org.jsoup.nodes.Document$OutputSettings;

        $r1 := @parameter0: java.lang.String;

        $r0 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>($r1);

        virtualinvoke $r2.<org.jsoup.nodes.Document$OutputSettings: org.jsoup.nodes.Document$OutputSettings charset(java.nio.charset.Charset)>($r0);

        return $r2;
    }

    public org.jsoup.nodes.Document$OutputSettings charset(java.nio.charset.Charset)
    {
        java.nio.charset.CharsetEncoder $r0;
        java.nio.charset.Charset $r1;
        org.jsoup.nodes.Document$OutputSettings $r2;

        $r2 := @this: org.jsoup.nodes.Document$OutputSettings;

        $r1 := @parameter0: java.nio.charset.Charset;

        $r2.<org.jsoup.nodes.Document$OutputSettings: java.nio.charset.Charset charset> = $r1;

        $r0 = virtualinvoke $r1.<java.nio.charset.Charset: java.nio.charset.CharsetEncoder newEncoder()>();

        $r2.<org.jsoup.nodes.Document$OutputSettings: java.nio.charset.CharsetEncoder charsetEncoder> = $r0;

        return $r2;
    }

    public volatile java.lang.Object clone() throws java.lang.CloneNotSupportedException
    {
        org.jsoup.nodes.Document$OutputSettings $r0, $r1;

        $r0 := @this: org.jsoup.nodes.Document$OutputSettings;

        $r1 = virtualinvoke $r0.<org.jsoup.nodes.Document$OutputSettings: org.jsoup.nodes.Document$OutputSettings clone()>();

        return $r1;
    }

    public org.jsoup.nodes.Document$OutputSettings clone()
    {
        java.lang.RuntimeException $r0;
        org.jsoup.nodes.Entities$EscapeMode $r1, $r9;
        java.lang.String $r2, $r8;
        java.lang.Object $r3;
        java.nio.charset.Charset $r4;
        java.lang.CloneNotSupportedException $r5;
        org.jsoup.nodes.Document$OutputSettings $r6, $r7;

        $r6 := @this: org.jsoup.nodes.Document$OutputSettings;

     label1:
        $r3 = specialinvoke $r6.<java.lang.Object: java.lang.Object clone()>();

     label2:
        $r7 = (org.jsoup.nodes.Document$OutputSettings) $r3;

        $r4 = $r6.<org.jsoup.nodes.Document$OutputSettings: java.nio.charset.Charset charset>;

        $r2 = virtualinvoke $r4.<java.nio.charset.Charset: java.lang.String name()>();

        virtualinvoke $r7.<org.jsoup.nodes.Document$OutputSettings: org.jsoup.nodes.Document$OutputSettings charset(java.lang.String)>($r2);

        $r1 = $r6.<org.jsoup.nodes.Document$OutputSettings: org.jsoup.nodes.Entities$EscapeMode escapeMode>;

        $r8 = virtualinvoke $r1.<org.jsoup.nodes.Entities$EscapeMode: java.lang.String name()>();

        $r9 = staticinvoke <org.jsoup.nodes.Entities$EscapeMode: org.jsoup.nodes.Entities$EscapeMode valueOf(java.lang.String)>($r8);

        $r7.<org.jsoup.nodes.Document$OutputSettings: org.jsoup.nodes.Entities$EscapeMode escapeMode> = $r9;

        return $r7;

     label3:
        $r5 := @caughtexception;

        $r0 = new java.lang.RuntimeException;

        specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r5);

        throw $r0;

        catch java.lang.CloneNotSupportedException from label1 to label2 with label3;
    }

    java.nio.charset.CharsetEncoder encoder()
    {
        java.nio.charset.CharsetEncoder r0;
        org.jsoup.nodes.Document$OutputSettings $r1;

        $r1 := @this: org.jsoup.nodes.Document$OutputSettings;

        r0 = $r1.<org.jsoup.nodes.Document$OutputSettings: java.nio.charset.CharsetEncoder charsetEncoder>;

        return r0;
    }

    public org.jsoup.nodes.Document$OutputSettings escapeMode(org.jsoup.nodes.Entities$EscapeMode)
    {
        org.jsoup.nodes.Entities$EscapeMode $r0;
        org.jsoup.nodes.Document$OutputSettings $r1;

        $r1 := @this: org.jsoup.nodes.Document$OutputSettings;

        $r0 := @parameter0: org.jsoup.nodes.Entities$EscapeMode;

        $r1.<org.jsoup.nodes.Document$OutputSettings: org.jsoup.nodes.Entities$EscapeMode escapeMode> = $r0;

        return $r1;
    }

    public org.jsoup.nodes.Entities$EscapeMode escapeMode()
    {
        org.jsoup.nodes.Entities$EscapeMode r0;
        org.jsoup.nodes.Document$OutputSettings $r1;

        $r1 := @this: org.jsoup.nodes.Document$OutputSettings;

        r0 = $r1.<org.jsoup.nodes.Document$OutputSettings: org.jsoup.nodes.Entities$EscapeMode escapeMode>;

        return r0;
    }

    public int indentAmount()
    {
        int i0;
        org.jsoup.nodes.Document$OutputSettings $r0;

        $r0 := @this: org.jsoup.nodes.Document$OutputSettings;

        i0 = $r0.<org.jsoup.nodes.Document$OutputSettings: int indentAmount>;

        return i0;
    }

    public org.jsoup.nodes.Document$OutputSettings indentAmount(int)
    {
        boolean $z0;
        int $i0;
        org.jsoup.nodes.Document$OutputSettings $r0;

        $r0 := @this: org.jsoup.nodes.Document$OutputSettings;

        $i0 := @parameter0: int;

        if $i0 < 0 goto label2;

        $z0 = 1;

     label1:
        staticinvoke <org.jsoup.helper.Validate: void isTrue(boolean)>($z0);

        $r0.<org.jsoup.nodes.Document$OutputSettings: int indentAmount> = $i0;

        return $r0;

     label2:
        $z0 = 0;

        goto label1;
    }

    public org.jsoup.nodes.Document$OutputSettings prettyPrint(boolean)
    {
        boolean $z0;
        org.jsoup.nodes.Document$OutputSettings $r0;

        $r0 := @this: org.jsoup.nodes.Document$OutputSettings;

        $z0 := @parameter0: boolean;

        $r0.<org.jsoup.nodes.Document$OutputSettings: boolean prettyPrint> = $z0;

        return $r0;
    }

    public boolean prettyPrint()
    {
        boolean z0;
        org.jsoup.nodes.Document$OutputSettings $r0;

        $r0 := @this: org.jsoup.nodes.Document$OutputSettings;

        z0 = $r0.<org.jsoup.nodes.Document$OutputSettings: boolean prettyPrint>;

        return z0;
    }
}
