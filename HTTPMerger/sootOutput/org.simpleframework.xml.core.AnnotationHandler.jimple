class org.simpleframework.xml.core.AnnotationHandler extends java.lang.Object implements java.lang.reflect.InvocationHandler
{
    private static final java.lang.String CLASS;
    private static final java.lang.String EQUAL;
    private static final java.lang.String REQUIRED;
    private static final java.lang.String STRING;
    private final org.simpleframework.xml.core.Comparer comparer;
    private final boolean required;
    private final java.lang.Class type;

    public void <init>(java.lang.Class)
    {
        java.lang.Class $r0;
        org.simpleframework.xml.core.AnnotationHandler $r1;

        $r1 := @this: org.simpleframework.xml.core.AnnotationHandler;

        $r0 := @parameter0: java.lang.Class;

        specialinvoke $r1.<org.simpleframework.xml.core.AnnotationHandler: void <init>(java.lang.Class,boolean)>($r0, 1);

        return;
    }

    public void <init>(java.lang.Class, boolean)
    {
        org.simpleframework.xml.core.Comparer $r0;
        boolean $z0;
        java.lang.Class $r1;
        org.simpleframework.xml.core.AnnotationHandler $r2;

        $r2 := @this: org.simpleframework.xml.core.AnnotationHandler;

        $r1 := @parameter0: java.lang.Class;

        $z0 := @parameter1: boolean;

        specialinvoke $r2.<java.lang.Object: void <init>()>();

        $r0 = new org.simpleframework.xml.core.Comparer;

        specialinvoke $r0.<org.simpleframework.xml.core.Comparer: void <init>()>();

        $r2.<org.simpleframework.xml.core.AnnotationHandler: org.simpleframework.xml.core.Comparer comparer> = $r0;

        $r2.<org.simpleframework.xml.core.AnnotationHandler: boolean required> = $z0;

        $r2.<org.simpleframework.xml.core.AnnotationHandler: java.lang.Class type> = $r1;

        return;
    }

    private void attributes(java.lang.StringBuilder)
    {
        java.lang.Object $r0;
        java.lang.String $r1;
        java.lang.reflect.Method $r2, $r7;
        java.lang.reflect.Method[] $r3;
        java.lang.Class $r4;
        int $i0, $i1;
        java.lang.StringBuilder $r5;
        org.simpleframework.xml.core.AnnotationHandler $r6;

        $r6 := @this: org.simpleframework.xml.core.AnnotationHandler;

        $r5 := @parameter0: java.lang.StringBuilder;

        $r4 = $r6.<org.simpleframework.xml.core.AnnotationHandler: java.lang.Class type>;

        $r3 = virtualinvoke $r4.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>();

        $i0 = 0;

     label1:
        $i1 = lengthof $r3;

        if $i0 >= $i1 goto label3;

        $r2 = $r3[$i0];

        $r1 = virtualinvoke $r2.<java.lang.reflect.Method: java.lang.String getName()>();

        $r7 = $r3[$i0];

        $r0 = specialinvoke $r6.<org.simpleframework.xml.core.AnnotationHandler: java.lang.Object value(java.lang.reflect.Method)>($r7);

        if $i0 <= 0 goto label2;

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(44);

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32);

     label2:
        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(61);

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r0);

        $i0 = $i0 + 1;

        goto label1;

     label3:
        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(41);

        return;
    }

    private boolean equals(java.lang.Object, java.lang.Object[]) throws java.lang.Throwable
    {
        boolean $z0;
        org.simpleframework.xml.core.Comparer $r0;
        org.simpleframework.xml.core.PersistenceException $r1;
        java.lang.annotation.Annotation $r2, $r3;
        java.lang.Class $r4, $r5;
        java.lang.Object[] $r6, $r10;
        java.lang.Object $r7, $r9;
        org.simpleframework.xml.core.AnnotationHandler $r8;

        $r8 := @this: org.simpleframework.xml.core.AnnotationHandler;

        $r7 := @parameter0: java.lang.Object;

        $r6 := @parameter1: java.lang.Object[];

        $r2 = (java.lang.annotation.Annotation) $r7;

        $r9 = $r6[0];

        $r3 = (java.lang.annotation.Annotation) $r9;

        $r4 = interfaceinvoke $r2.<java.lang.annotation.Annotation: java.lang.Class annotationType()>();

        $r5 = interfaceinvoke $r3.<java.lang.annotation.Annotation: java.lang.Class annotationType()>();

        if $r4 == $r5 goto label1;

        $r1 = new org.simpleframework.xml.core.PersistenceException;

        $r10 = newarray (java.lang.Object)[2];

        $r10[0] = $r2;

        $r10[1] = $r3;

        specialinvoke $r1.<org.simpleframework.xml.core.PersistenceException: void <init>(java.lang.String,java.lang.Object[])>("Annotation %s is not the same as %s", $r10);

        throw $r1;

     label1:
        $r0 = $r8.<org.simpleframework.xml.core.AnnotationHandler: org.simpleframework.xml.core.Comparer comparer>;

        $z0 = virtualinvoke $r0.<org.simpleframework.xml.core.Comparer: boolean equals(java.lang.annotation.Annotation,java.lang.annotation.Annotation)>($r2, $r3);

        return $z0;
    }

    private void name(java.lang.StringBuilder)
    {
        java.lang.String $r0;
        java.lang.Class $r1;
        java.lang.StringBuilder $r2;
        org.simpleframework.xml.core.AnnotationHandler $r3;

        $r3 := @this: org.simpleframework.xml.core.AnnotationHandler;

        $r2 := @parameter0: java.lang.StringBuilder;

        $r1 = $r3.<org.simpleframework.xml.core.AnnotationHandler: java.lang.Class type>;

        $r0 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>();

        if $r0 == null goto label1;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(64);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r0);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(40);

        return;

     label1:
        return;
    }

    private java.lang.Object value(java.lang.reflect.Method)
    {
        java.lang.Object $r0;
        java.lang.Boolean $r1;
        boolean $z0, $z1;
        java.lang.String $r2;
        java.lang.reflect.Method $r3;
        org.simpleframework.xml.core.AnnotationHandler $r4;

        $r4 := @this: org.simpleframework.xml.core.AnnotationHandler;

        $r3 := @parameter0: java.lang.reflect.Method;

        $r2 = virtualinvoke $r3.<java.lang.reflect.Method: java.lang.String getName()>();

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("required");

        if $z0 == 0 goto label1;

        $z1 = $r4.<org.simpleframework.xml.core.AnnotationHandler: boolean required>;

        $r1 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z1);

        return $r1;

     label1:
        $r0 = virtualinvoke $r3.<java.lang.reflect.Method: java.lang.Object getDefaultValue()>();

        return $r0;
    }

    public java.lang.Object invoke(java.lang.Object, java.lang.reflect.Method, java.lang.Object[]) throws java.lang.Throwable
    {
        java.lang.Class r0;
        java.lang.Boolean $r1, $r8;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.lang.String $r2, $r7;
        java.lang.Object[] $r3;
        java.lang.reflect.Method $r4;
        java.lang.Object $r5, $r9;
        org.simpleframework.xml.core.AnnotationHandler $r6;

        $r6 := @this: org.simpleframework.xml.core.AnnotationHandler;

        $r5 := @parameter0: java.lang.Object;

        $r4 := @parameter1: java.lang.reflect.Method;

        $r3 := @parameter2: java.lang.Object[];

        $r2 = virtualinvoke $r4.<java.lang.reflect.Method: java.lang.String getName()>();

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("toString");

        if $z0 == 0 goto label1;

        $r7 = virtualinvoke $r6.<org.simpleframework.xml.core.AnnotationHandler: java.lang.String toString()>();

        return $r7;

     label1:
        $z1 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("equals");

        if $z1 == 0 goto label2;

        $z2 = specialinvoke $r6.<org.simpleframework.xml.core.AnnotationHandler: boolean equals(java.lang.Object,java.lang.Object[])>($r5, $r3);

        $r1 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z2);

        return $r1;

     label2:
        $z3 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("annotationType");

        if $z3 == 0 goto label3;

        r0 = $r6.<org.simpleframework.xml.core.AnnotationHandler: java.lang.Class type>;

        return r0;

     label3:
        $z4 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("required");

        if $z4 == 0 goto label4;

        $z5 = $r6.<org.simpleframework.xml.core.AnnotationHandler: boolean required>;

        $r8 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z5);

        return $r8;

     label4:
        $r9 = virtualinvoke $r4.<java.lang.reflect.Method: java.lang.Object getDefaultValue()>();

        return $r9;
    }

    public java.lang.String toString()
    {
        java.lang.String $r0;
        java.lang.Class $r1;
        java.lang.StringBuilder $r2;
        org.simpleframework.xml.core.AnnotationHandler $r3;

        $r3 := @this: org.simpleframework.xml.core.AnnotationHandler;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r1 = $r3.<org.simpleframework.xml.core.AnnotationHandler: java.lang.Class type>;

        if $r1 == null goto label1;

        specialinvoke $r3.<org.simpleframework.xml.core.AnnotationHandler: void name(java.lang.StringBuilder)>($r2);

        specialinvoke $r3.<org.simpleframework.xml.core.AnnotationHandler: void attributes(java.lang.StringBuilder)>($r2);

     label1:
        $r0 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r0;
    }

    public static void <clinit>()
    {
        <org.simpleframework.xml.core.AnnotationHandler: java.lang.String CLASS> = "annotationType";

        <org.simpleframework.xml.core.AnnotationHandler: java.lang.String STRING> = "toString";

        <org.simpleframework.xml.core.AnnotationHandler: java.lang.String REQUIRED> = "required";

        <org.simpleframework.xml.core.AnnotationHandler: java.lang.String EQUAL> = "equals";

        <org.simpleframework.xml.core.AnnotationHandler: java.lang.String CLASS> = "annotationType";

        return;
    }
}
