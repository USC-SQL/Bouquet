public class org.jsoup.parser.TokenQueue extends java.lang.Object
{
    private static final char ESC;
    private int pos;
    private java.lang.String queue;

    public void <init>(java.lang.String)
    {
        java.lang.String $r0;
        org.jsoup.parser.TokenQueue $r1;

        $r1 := @this: org.jsoup.parser.TokenQueue;

        $r0 := @parameter0: java.lang.String;

        specialinvoke $r1.<java.lang.Object: void <init>()>();

        $r1.<org.jsoup.parser.TokenQueue: int pos> = 0;

        staticinvoke <org.jsoup.helper.Validate: void notNull(java.lang.Object)>($r0);

        $r1.<org.jsoup.parser.TokenQueue: java.lang.String queue> = $r0;

        return;
    }

    private int remainingLength()
    {
        int $i0, $i1, $i2;
        java.lang.String $r0;
        org.jsoup.parser.TokenQueue $r1;

        $r1 := @this: org.jsoup.parser.TokenQueue;

        $r0 = $r1.<org.jsoup.parser.TokenQueue: java.lang.String queue>;

        $i1 = virtualinvoke $r0.<java.lang.String: int length()>();

        $i0 = $r1.<org.jsoup.parser.TokenQueue: int pos>;

        $i2 = $i1 - $i0;

        return $i2;
    }

    public static java.lang.String unescape(java.lang.String)
    {
        char[] $r0;
        java.lang.StringBuilder $r1;
        int $i0, $i1;
        char $c2, $c3;
        java.lang.String $r2, $r3;

        $r2 := @parameter0: java.lang.String;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $c3 = 0;

        $r0 = virtualinvoke $r2.<java.lang.String: char[] toCharArray()>();

        $i1 = lengthof $r0;

        $i0 = 0;

     label1:
        if $i0 >= $i1 goto label4;

        $c2 = $r0[$i0];

        if $c2 != 92 goto label3;

        if $c3 == 0 goto label2;

        if $c3 != 92 goto label2;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c2);

     label2:
        $c3 = $c2;

        $i0 = $i0 + 1;

        goto label1;

     label3:
        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c2);

        goto label2;

     label4:
        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;
    }

    public void addFirst(java.lang.Character)
    {
        java.lang.String $r0;
        java.lang.Character $r1;
        org.jsoup.parser.TokenQueue $r2;

        $r2 := @this: org.jsoup.parser.TokenQueue;

        $r1 := @parameter0: java.lang.Character;

        $r0 = virtualinvoke $r1.<java.lang.Character: java.lang.String toString()>();

        virtualinvoke $r2.<org.jsoup.parser.TokenQueue: void addFirst(java.lang.String)>($r0);

        return;
    }

    public void addFirst(java.lang.String)
    {
        int $i0;
        java.lang.StringBuilder $r0, $r3, $r6;
        java.lang.String $r1, $r4, $r5, $r7;
        org.jsoup.parser.TokenQueue $r2;

        $r2 := @this: org.jsoup.parser.TokenQueue;

        $r1 := @parameter0: java.lang.String;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r4 = $r2.<org.jsoup.parser.TokenQueue: java.lang.String queue>;

        $i0 = $r2.<org.jsoup.parser.TokenQueue: int pos>;

        $r5 = virtualinvoke $r4.<java.lang.String: java.lang.String substring(int)>($i0);

        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        $r2.<org.jsoup.parser.TokenQueue: java.lang.String queue> = $r7;

        $r2.<org.jsoup.parser.TokenQueue: int pos> = 0;

        return;
    }

    public void advance()
    {
        int $i0, $i1;
        boolean $z0;
        org.jsoup.parser.TokenQueue $r0;

        $r0 := @this: org.jsoup.parser.TokenQueue;

        $z0 = virtualinvoke $r0.<org.jsoup.parser.TokenQueue: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $i0 = $r0.<org.jsoup.parser.TokenQueue: int pos>;

        $i1 = $i0 + 1;

        $r0.<org.jsoup.parser.TokenQueue: int pos> = $i1;

        return;

     label1:
        return;
    }

    public java.lang.String chompBalanced(char, char)
    {
        java.lang.Character $r0, $r1, $r5;
        java.lang.String $r2;
        boolean $z0, $z1, $z2;
        int $i0;
        java.lang.StringBuilder $r3;
        char $c1, $c2, $c3, $c4;
        org.jsoup.parser.TokenQueue $r4;

        $r4 := @this: org.jsoup.parser.TokenQueue;

        $c1 := @parameter0: char;

        $c2 := @parameter1: char;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $i0 = 0;

        $c3 = 0;

     label1:
        $z0 = virtualinvoke $r4.<org.jsoup.parser.TokenQueue: boolean isEmpty()>();

        if $z0 == 0 goto label3;

     label2:
        $r2 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r2;

     label3:
        $c4 = virtualinvoke $r4.<org.jsoup.parser.TokenQueue: char consume()>();

        $r0 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>($c4);

        if $c3 == 0 goto label4;

        if $c3 == 92 goto label5;

     label4:
        $r1 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>($c1);

        $z1 = virtualinvoke $r0.<java.lang.Character: boolean equals(java.lang.Object)>($r1);

        if $z1 == 0 goto label7;

        $i0 = $i0 + 1;

     label5:
        if $i0 <= 0 goto label6;

        if $c3 == 0 goto label6;

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r0);

     label6:
        $c3 = virtualinvoke $r0.<java.lang.Character: char charValue()>();

        if $i0 > 0 goto label1;

        goto label2;

     label7:
        $r5 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>($c2);

        $z2 = virtualinvoke $r0.<java.lang.Character: boolean equals(java.lang.Object)>($r5);

        if $z2 == 0 goto label5;

        $i0 = $i0 + -1;

        goto label5;
    }

    public java.lang.String chompTo(java.lang.String)
    {
        java.lang.String $r0, $r1;
        org.jsoup.parser.TokenQueue $r2;

        $r2 := @this: org.jsoup.parser.TokenQueue;

        $r0 := @parameter0: java.lang.String;

        $r1 = virtualinvoke $r2.<org.jsoup.parser.TokenQueue: java.lang.String consumeTo(java.lang.String)>($r0);

        virtualinvoke $r2.<org.jsoup.parser.TokenQueue: boolean matchChomp(java.lang.String)>($r0);

        return $r1;
    }

    public java.lang.String chompToIgnoreCase(java.lang.String)
    {
        java.lang.String $r0, $r1;
        org.jsoup.parser.TokenQueue $r2;

        $r2 := @this: org.jsoup.parser.TokenQueue;

        $r0 := @parameter0: java.lang.String;

        $r1 = virtualinvoke $r2.<org.jsoup.parser.TokenQueue: java.lang.String consumeToIgnoreCase(java.lang.String)>($r0);

        virtualinvoke $r2.<org.jsoup.parser.TokenQueue: boolean matchChomp(java.lang.String)>($r0);

        return $r1;
    }

    public char consume()
    {
        char $c0;
        int $i1, $i2;
        java.lang.String $r0;
        org.jsoup.parser.TokenQueue $r1;

        $r1 := @this: org.jsoup.parser.TokenQueue;

        $r0 = $r1.<org.jsoup.parser.TokenQueue: java.lang.String queue>;

        $i1 = $r1.<org.jsoup.parser.TokenQueue: int pos>;

        $i2 = $i1 + 1;

        $r1.<org.jsoup.parser.TokenQueue: int pos> = $i2;

        $c0 = virtualinvoke $r0.<java.lang.String: char charAt(int)>($i1);

        return $c0;
    }

    public void consume(java.lang.String)
    {
        int $i0, $i1, $i2, $i3;
        java.lang.IllegalStateException $r0, $r3;
        boolean $z0;
        java.lang.String $r1;
        org.jsoup.parser.TokenQueue $r2;

        $r2 := @this: org.jsoup.parser.TokenQueue;

        $r1 := @parameter0: java.lang.String;

        $z0 = virtualinvoke $r2.<org.jsoup.parser.TokenQueue: boolean matches(java.lang.String)>($r1);

        if $z0 != 0 goto label1;

        $r0 = new java.lang.IllegalStateException;

        specialinvoke $r0.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Queue did not match expected sequence");

        throw $r0;

     label1:
        $i0 = virtualinvoke $r1.<java.lang.String: int length()>();

        $i1 = specialinvoke $r2.<org.jsoup.parser.TokenQueue: int remainingLength()>();

        if $i0 <= $i1 goto label2;

        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Queue not long enough to consume sequence");

        throw $r3;

     label2:
        $i2 = $r2.<org.jsoup.parser.TokenQueue: int pos>;

        $i3 = $i2 + $i0;

        $r2.<org.jsoup.parser.TokenQueue: int pos> = $i3;

        return;
    }

    public java.lang.String consumeAttributeKey()
    {
        java.lang.String $r0, $r3;
        char[] $r1;
        boolean $z0, $z1, $z2;
        int $i0, $i1, $i2, $i3;
        org.jsoup.parser.TokenQueue $r2;

        $r2 := @this: org.jsoup.parser.TokenQueue;

        $i0 = $r2.<org.jsoup.parser.TokenQueue: int pos>;

     label1:
        $z0 = virtualinvoke $r2.<org.jsoup.parser.TokenQueue: boolean isEmpty()>();

        if $z0 != 0 goto label3;

        $z1 = virtualinvoke $r2.<org.jsoup.parser.TokenQueue: boolean matchesWord()>();

        if $z1 != 0 goto label2;

        $r1 = newarray (char)[3];

        $r1[0] = 45;

        $r1[1] = 95;

        $r1[2] = 58;

        $z2 = virtualinvoke $r2.<org.jsoup.parser.TokenQueue: boolean matchesAny(char[])>($r1);

        if $z2 == 0 goto label3;

     label2:
        $i1 = $r2.<org.jsoup.parser.TokenQueue: int pos>;

        $i2 = $i1 + 1;

        $r2.<org.jsoup.parser.TokenQueue: int pos> = $i2;

        goto label1;

     label3:
        $r0 = $r2.<org.jsoup.parser.TokenQueue: java.lang.String queue>;

        $i3 = $r2.<org.jsoup.parser.TokenQueue: int pos>;

        $r3 = virtualinvoke $r0.<java.lang.String: java.lang.String substring(int,int)>($i0, $i3);

        return $r3;
    }

    public java.lang.String consumeCssIdentifier()
    {
        java.lang.String $r0, $r3;
        char[] $r1;
        boolean $z0, $z1, $z2;
        int $i0, $i1, $i2, $i3;
        org.jsoup.parser.TokenQueue $r2;

        $r2 := @this: org.jsoup.parser.TokenQueue;

        $i0 = $r2.<org.jsoup.parser.TokenQueue: int pos>;

     label1:
        $z0 = virtualinvoke $r2.<org.jsoup.parser.TokenQueue: boolean isEmpty()>();

        if $z0 != 0 goto label3;

        $z1 = virtualinvoke $r2.<org.jsoup.parser.TokenQueue: boolean matchesWord()>();

        if $z1 != 0 goto label2;

        $r1 = newarray (char)[2];

        $r1[0] = 45;

        $r1[1] = 95;

        $z2 = virtualinvoke $r2.<org.jsoup.parser.TokenQueue: boolean matchesAny(char[])>($r1);

        if $z2 == 0 goto label3;

     label2:
        $i1 = $r2.<org.jsoup.parser.TokenQueue: int pos>;

        $i2 = $i1 + 1;

        $r2.<org.jsoup.parser.TokenQueue: int pos> = $i2;

        goto label1;

     label3:
        $r0 = $r2.<org.jsoup.parser.TokenQueue: java.lang.String queue>;

        $i3 = $r2.<org.jsoup.parser.TokenQueue: int pos>;

        $r3 = virtualinvoke $r0.<java.lang.String: java.lang.String substring(int,int)>($i0, $i3);

        return $r3;
    }

    public java.lang.String consumeElementSelector()
    {
        java.lang.String $r0, $r3;
        char[] $r1;
        boolean $z0, $z1, $z2;
        int $i0, $i1, $i2, $i3;
        org.jsoup.parser.TokenQueue $r2;

        $r2 := @this: org.jsoup.parser.TokenQueue;

        $i0 = $r2.<org.jsoup.parser.TokenQueue: int pos>;

     label1:
        $z0 = virtualinvoke $r2.<org.jsoup.parser.TokenQueue: boolean isEmpty()>();

        if $z0 != 0 goto label3;

        $z1 = virtualinvoke $r2.<org.jsoup.parser.TokenQueue: boolean matchesWord()>();

        if $z1 != 0 goto label2;

        $r1 = newarray (char)[3];

        $r1[0] = 124;

        $r1[1] = 95;

        $r1[2] = 45;

        $z2 = virtualinvoke $r2.<org.jsoup.parser.TokenQueue: boolean matchesAny(char[])>($r1);

        if $z2 == 0 goto label3;

     label2:
        $i1 = $r2.<org.jsoup.parser.TokenQueue: int pos>;

        $i2 = $i1 + 1;

        $r2.<org.jsoup.parser.TokenQueue: int pos> = $i2;

        goto label1;

     label3:
        $r0 = $r2.<org.jsoup.parser.TokenQueue: java.lang.String queue>;

        $i3 = $r2.<org.jsoup.parser.TokenQueue: int pos>;

        $r3 = virtualinvoke $r0.<java.lang.String: java.lang.String substring(int,int)>($i0, $i3);

        return $r3;
    }

    public java.lang.String consumeTagName()
    {
        java.lang.String $r0, $r3;
        char[] $r1;
        boolean $z0, $z1, $z2;
        int $i0, $i1, $i2, $i3;
        org.jsoup.parser.TokenQueue $r2;

        $r2 := @this: org.jsoup.parser.TokenQueue;

        $i0 = $r2.<org.jsoup.parser.TokenQueue: int pos>;

     label1:
        $z0 = virtualinvoke $r2.<org.jsoup.parser.TokenQueue: boolean isEmpty()>();

        if $z0 != 0 goto label3;

        $z1 = virtualinvoke $r2.<org.jsoup.parser.TokenQueue: boolean matchesWord()>();

        if $z1 != 0 goto label2;

        $r1 = newarray (char)[3];

        $r1[0] = 58;

        $r1[1] = 95;

        $r1[2] = 45;

        $z2 = virtualinvoke $r2.<org.jsoup.parser.TokenQueue: boolean matchesAny(char[])>($r1);

        if $z2 == 0 goto label3;

     label2:
        $i1 = $r2.<org.jsoup.parser.TokenQueue: int pos>;

        $i2 = $i1 + 1;

        $r2.<org.jsoup.parser.TokenQueue: int pos> = $i2;

        goto label1;

     label3:
        $r0 = $r2.<org.jsoup.parser.TokenQueue: java.lang.String queue>;

        $i3 = $r2.<org.jsoup.parser.TokenQueue: int pos>;

        $r3 = virtualinvoke $r0.<java.lang.String: java.lang.String substring(int,int)>($i0, $i3);

        return $r3;
    }

    public java.lang.String consumeTo(java.lang.String)
    {
        int $i0, $i1, $i2, $i3, $i4, $i5;
        java.lang.String $r0, $r1, $r3, $r4, $r5;
        org.jsoup.parser.TokenQueue $r2;

        $r2 := @this: org.jsoup.parser.TokenQueue;

        $r0 := @parameter0: java.lang.String;

        $r1 = $r2.<org.jsoup.parser.TokenQueue: java.lang.String queue>;

        $i0 = $r2.<org.jsoup.parser.TokenQueue: int pos>;

        $i2 = virtualinvoke $r1.<java.lang.String: int indexOf(java.lang.String,int)>($r0, $i0);

        if $i2 == -1 goto label1;

        $r3 = $r2.<org.jsoup.parser.TokenQueue: java.lang.String queue>;

        $i1 = $r2.<org.jsoup.parser.TokenQueue: int pos>;

        $r4 = virtualinvoke $r3.<java.lang.String: java.lang.String substring(int,int)>($i1, $i2);

        $i3 = $r2.<org.jsoup.parser.TokenQueue: int pos>;

        $i4 = virtualinvoke $r4.<java.lang.String: int length()>();

        $i5 = $i3 + $i4;

        $r2.<org.jsoup.parser.TokenQueue: int pos> = $i5;

        return $r4;

     label1:
        $r5 = virtualinvoke $r2.<org.jsoup.parser.TokenQueue: java.lang.String remainder()>();

        return $r5;
    }

    public transient java.lang.String consumeToAny(java.lang.String[])
    {
        java.lang.String $r0, $r3;
        boolean $z0, $z1;
        int $i0, $i1, $i2, $i3;
        java.lang.String[] $r1;
        org.jsoup.parser.TokenQueue $r2;

        $r2 := @this: org.jsoup.parser.TokenQueue;

        $r1 := @parameter0: java.lang.String[];

        $i0 = $r2.<org.jsoup.parser.TokenQueue: int pos>;

     label1:
        $z0 = virtualinvoke $r2.<org.jsoup.parser.TokenQueue: boolean isEmpty()>();

        if $z0 != 0 goto label2;

        $z1 = virtualinvoke $r2.<org.jsoup.parser.TokenQueue: boolean matchesAny(java.lang.String[])>($r1);

        if $z1 != 0 goto label2;

        $i1 = $r2.<org.jsoup.parser.TokenQueue: int pos>;

        $i2 = $i1 + 1;

        $r2.<org.jsoup.parser.TokenQueue: int pos> = $i2;

        goto label1;

     label2:
        $r0 = $r2.<org.jsoup.parser.TokenQueue: java.lang.String queue>;

        $i3 = $r2.<org.jsoup.parser.TokenQueue: int pos>;

        $r3 = virtualinvoke $r0.<java.lang.String: java.lang.String substring(int,int)>($i0, $i3);

        return $r3;
    }

    public java.lang.String consumeToIgnoreCase(java.lang.String)
    {
        boolean $z0, $z1, $z2;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12;
        java.lang.String $r0, $r1, $r2, $r3, $r5, $r6, $r7, $r8;
        org.jsoup.parser.TokenQueue $r4;

        $r4 := @this: org.jsoup.parser.TokenQueue;

        $r0 := @parameter0: java.lang.String;

        $i1 = $r4.<org.jsoup.parser.TokenQueue: int pos>;

        $r1 = virtualinvoke $r0.<java.lang.String: java.lang.String substring(int,int)>(0, 1);

        $r2 = virtualinvoke $r1.<java.lang.String: java.lang.String toLowerCase()>();

        $r3 = virtualinvoke $r1.<java.lang.String: java.lang.String toUpperCase()>();

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r3);

     label1:
        $z1 = virtualinvoke $r4.<org.jsoup.parser.TokenQueue: boolean isEmpty()>();

        if $z1 != 0 goto label2;

        $z2 = virtualinvoke $r4.<org.jsoup.parser.TokenQueue: boolean matches(java.lang.String)>($r0);

        if $z2 == 0 goto label3;

     label2:
        $r5 = $r4.<org.jsoup.parser.TokenQueue: java.lang.String queue>;

        $i0 = $r4.<org.jsoup.parser.TokenQueue: int pos>;

        $r6 = virtualinvoke $r5.<java.lang.String: java.lang.String substring(int,int)>($i1, $i0);

        return $r6;

     label3:
        if $z0 == 0 goto label6;

        $r7 = $r4.<org.jsoup.parser.TokenQueue: java.lang.String queue>;

        $i3 = $r4.<org.jsoup.parser.TokenQueue: int pos>;

        $i4 = virtualinvoke $r7.<java.lang.String: int indexOf(java.lang.String,int)>($r1, $i3);

        $i2 = $r4.<org.jsoup.parser.TokenQueue: int pos>;

        $i5 = $i4 - $i2;

        if $i5 != 0 goto label4;

        $i6 = $r4.<org.jsoup.parser.TokenQueue: int pos>;

        $i7 = $i6 + 1;

        $r4.<org.jsoup.parser.TokenQueue: int pos> = $i7;

        goto label1;

     label4:
        if $i5 >= 0 goto label5;

        $r8 = $r4.<org.jsoup.parser.TokenQueue: java.lang.String queue>;

        $i8 = virtualinvoke $r8.<java.lang.String: int length()>();

        $r4.<org.jsoup.parser.TokenQueue: int pos> = $i8;

        goto label1;

     label5:
        $i9 = $r4.<org.jsoup.parser.TokenQueue: int pos>;

        $i10 = $i9 + $i5;

        $r4.<org.jsoup.parser.TokenQueue: int pos> = $i10;

        goto label1;

     label6:
        $i11 = $r4.<org.jsoup.parser.TokenQueue: int pos>;

        $i12 = $i11 + 1;

        $r4.<org.jsoup.parser.TokenQueue: int pos> = $i12;

        goto label1;
    }

    public boolean consumeWhitespace()
    {
        int $i0, $i1;
        boolean $z0, $z1;
        org.jsoup.parser.TokenQueue $r0;

        $r0 := @this: org.jsoup.parser.TokenQueue;

        $z0 = 0;

     label1:
        $z1 = virtualinvoke $r0.<org.jsoup.parser.TokenQueue: boolean matchesWhitespace()>();

        if $z1 == 0 goto label2;

        $i0 = $r0.<org.jsoup.parser.TokenQueue: int pos>;

        $i1 = $i0 + 1;

        $r0.<org.jsoup.parser.TokenQueue: int pos> = $i1;

        $z0 = 1;

        goto label1;

     label2:
        return $z0;
    }

    public java.lang.String consumeWord()
    {
        java.lang.String $r0, $r2;
        boolean $z0;
        int $i0, $i1, $i2, $i3;
        org.jsoup.parser.TokenQueue $r1;

        $r1 := @this: org.jsoup.parser.TokenQueue;

        $i0 = $r1.<org.jsoup.parser.TokenQueue: int pos>;

     label1:
        $z0 = virtualinvoke $r1.<org.jsoup.parser.TokenQueue: boolean matchesWord()>();

        if $z0 == 0 goto label2;

        $i1 = $r1.<org.jsoup.parser.TokenQueue: int pos>;

        $i2 = $i1 + 1;

        $r1.<org.jsoup.parser.TokenQueue: int pos> = $i2;

        goto label1;

     label2:
        $r0 = $r1.<org.jsoup.parser.TokenQueue: java.lang.String queue>;

        $i3 = $r1.<org.jsoup.parser.TokenQueue: int pos>;

        $r2 = virtualinvoke $r0.<java.lang.String: java.lang.String substring(int,int)>($i0, $i3);

        return $r2;
    }

    public boolean isEmpty()
    {
        int $i0;
        org.jsoup.parser.TokenQueue $r0;

        $r0 := @this: org.jsoup.parser.TokenQueue;

        $i0 = specialinvoke $r0.<org.jsoup.parser.TokenQueue: int remainingLength()>();

        if $i0 != 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public boolean matchChomp(java.lang.String)
    {
        int $i0, $i1, $i2;
        boolean $z0;
        java.lang.String $r0;
        org.jsoup.parser.TokenQueue $r1;

        $r1 := @this: org.jsoup.parser.TokenQueue;

        $r0 := @parameter0: java.lang.String;

        $z0 = virtualinvoke $r1.<org.jsoup.parser.TokenQueue: boolean matches(java.lang.String)>($r0);

        if $z0 == 0 goto label1;

        $i0 = $r1.<org.jsoup.parser.TokenQueue: int pos>;

        $i1 = virtualinvoke $r0.<java.lang.String: int length()>();

        $i2 = $i0 + $i1;

        $r1.<org.jsoup.parser.TokenQueue: int pos> = $i2;

        return 1;

     label1:
        return 0;
    }

    public boolean matches(java.lang.String)
    {
        boolean $z0;
        int $i0, $i1;
        java.lang.String $r0, $r1;
        org.jsoup.parser.TokenQueue $r2;

        $r2 := @this: org.jsoup.parser.TokenQueue;

        $r0 := @parameter0: java.lang.String;

        $r1 = $r2.<org.jsoup.parser.TokenQueue: java.lang.String queue>;

        $i0 = $r2.<org.jsoup.parser.TokenQueue: int pos>;

        $i1 = virtualinvoke $r0.<java.lang.String: int length()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>(1, $i0, $r0, 0, $i1);

        return $z0;
    }

    public transient boolean matchesAny(char[])
    {
        java.lang.String $r0;
        boolean $z0;
        int $i0, $i1, $i2;
        char $c3, $c4;
        char[] $r1;
        org.jsoup.parser.TokenQueue $r2;

        $r2 := @this: org.jsoup.parser.TokenQueue;

        $r1 := @parameter0: char[];

        $z0 = virtualinvoke $r2.<org.jsoup.parser.TokenQueue: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        return 0;

     label1:
        $i1 = lengthof $r1;

        $i0 = 0;

     label2:
        if $i0 >= $i1 goto label4;

        $c3 = $r1[$i0];

        $r0 = $r2.<org.jsoup.parser.TokenQueue: java.lang.String queue>;

        $i2 = $r2.<org.jsoup.parser.TokenQueue: int pos>;

        $c4 = virtualinvoke $r0.<java.lang.String: char charAt(int)>($i2);

        if $c4 != $c3 goto label3;

        return 1;

     label3:
        $i0 = $i0 + 1;

        goto label2;

     label4:
        return 0;
    }

    public transient boolean matchesAny(java.lang.String[])
    {
        boolean $z0;
        java.lang.String $r0;
        int $i0, $i1;
        java.lang.String[] $r1;
        org.jsoup.parser.TokenQueue $r2;

        $r2 := @this: org.jsoup.parser.TokenQueue;

        $r1 := @parameter0: java.lang.String[];

        $i1 = lengthof $r1;

        $i0 = 0;

     label1:
        if $i0 >= $i1 goto label3;

        $r0 = $r1[$i0];

        $z0 = virtualinvoke $r2.<org.jsoup.parser.TokenQueue: boolean matches(java.lang.String)>($r0);

        if $z0 == 0 goto label2;

        return 1;

     label2:
        $i0 = $i0 + 1;

        goto label1;

     label3:
        return 0;
    }

    public boolean matchesCS(java.lang.String)
    {
        boolean $z0;
        int $i0;
        java.lang.String $r0, $r1;
        org.jsoup.parser.TokenQueue $r2;

        $r2 := @this: org.jsoup.parser.TokenQueue;

        $r0 := @parameter0: java.lang.String;

        $r1 = $r2.<org.jsoup.parser.TokenQueue: java.lang.String queue>;

        $i0 = $r2.<org.jsoup.parser.TokenQueue: int pos>;

        $z0 = virtualinvoke $r1.<java.lang.String: boolean startsWith(java.lang.String,int)>($r0, $i0);

        return $z0;
    }

    public boolean matchesStartTag()
    {
        boolean $z0;
        char $c0, $c5;
        java.lang.String $r0, $r2;
        int $i1, $i2, $i3, $i4;
        org.jsoup.parser.TokenQueue $r1;

        $r1 := @this: org.jsoup.parser.TokenQueue;

        $i1 = specialinvoke $r1.<org.jsoup.parser.TokenQueue: int remainingLength()>();

        if $i1 < 2 goto label1;

        $r0 = $r1.<org.jsoup.parser.TokenQueue: java.lang.String queue>;

        $i2 = $r1.<org.jsoup.parser.TokenQueue: int pos>;

        $c0 = virtualinvoke $r0.<java.lang.String: char charAt(int)>($i2);

        if $c0 != 60 goto label1;

        $r2 = $r1.<org.jsoup.parser.TokenQueue: java.lang.String queue>;

        $i3 = $r1.<org.jsoup.parser.TokenQueue: int pos>;

        $i4 = $i3 + 1;

        $c5 = virtualinvoke $r2.<java.lang.String: char charAt(int)>($i4);

        $z0 = staticinvoke <java.lang.Character: boolean isLetter(char)>($c5);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public boolean matchesWhitespace()
    {
        char $c0;
        java.lang.String $r0;
        boolean $z0, $z1;
        int $i1;
        org.jsoup.parser.TokenQueue $r1;

        $r1 := @this: org.jsoup.parser.TokenQueue;

        $z0 = virtualinvoke $r1.<org.jsoup.parser.TokenQueue: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $r0 = $r1.<org.jsoup.parser.TokenQueue: java.lang.String queue>;

        $i1 = $r1.<org.jsoup.parser.TokenQueue: int pos>;

        $c0 = virtualinvoke $r0.<java.lang.String: char charAt(int)>($i1);

        $z1 = staticinvoke <org.jsoup.helper.StringUtil: boolean isWhitespace(int)>($c0);

        if $z1 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public boolean matchesWord()
    {
        char $c0;
        java.lang.String $r0;
        boolean $z0, $z1;
        int $i1;
        org.jsoup.parser.TokenQueue $r1;

        $r1 := @this: org.jsoup.parser.TokenQueue;

        $z0 = virtualinvoke $r1.<org.jsoup.parser.TokenQueue: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $r0 = $r1.<org.jsoup.parser.TokenQueue: java.lang.String queue>;

        $i1 = $r1.<org.jsoup.parser.TokenQueue: int pos>;

        $c0 = virtualinvoke $r0.<java.lang.String: char charAt(int)>($i1);

        $z1 = staticinvoke <java.lang.Character: boolean isLetterOrDigit(char)>($c0);

        if $z1 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public char peek()
    {
        char $c0;
        java.lang.String $r0;
        boolean $z0;
        int $i1;
        org.jsoup.parser.TokenQueue $r1;

        $r1 := @this: org.jsoup.parser.TokenQueue;

        $z0 = virtualinvoke $r1.<org.jsoup.parser.TokenQueue: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        return 0;

     label1:
        $r0 = $r1.<org.jsoup.parser.TokenQueue: java.lang.String queue>;

        $i1 = $r1.<org.jsoup.parser.TokenQueue: int pos>;

        $c0 = virtualinvoke $r0.<java.lang.String: char charAt(int)>($i1);

        return $c0;
    }

    public java.lang.String remainder()
    {
        java.lang.String $r0;
        char $c0;
        boolean $z0;
        java.lang.StringBuilder $r1;
        org.jsoup.parser.TokenQueue $r2;

        $r2 := @this: org.jsoup.parser.TokenQueue;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

     label1:
        $z0 = virtualinvoke $r2.<org.jsoup.parser.TokenQueue: boolean isEmpty()>();

        if $z0 != 0 goto label2;

        $c0 = virtualinvoke $r2.<org.jsoup.parser.TokenQueue: char consume()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c0);

        goto label1;

     label2:
        $r0 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r0;
    }

    public java.lang.String toString()
    {
        int $i0;
        java.lang.String $r0, $r2;
        org.jsoup.parser.TokenQueue $r1;

        $r1 := @this: org.jsoup.parser.TokenQueue;

        $r0 = $r1.<org.jsoup.parser.TokenQueue: java.lang.String queue>;

        $i0 = $r1.<org.jsoup.parser.TokenQueue: int pos>;

        $r2 = virtualinvoke $r0.<java.lang.String: java.lang.String substring(int)>($i0);

        return $r2;
    }

    public static void <clinit>()
    {
        <org.jsoup.parser.TokenQueue: char ESC> = 92;

        <org.jsoup.parser.TokenQueue: char ESC> = 92;

        return;
    }
}
