class org.simpleframework.xml.core.NamespaceDecorator extends java.lang.Object implements org.simpleframework.xml.core.Decorator
{
    private org.simpleframework.xml.Namespace primary;
    private java.util.List scope;

    public void <init>()
    {
        java.util.ArrayList $r0;
        org.simpleframework.xml.core.NamespaceDecorator $r1;

        $r1 := @this: org.simpleframework.xml.core.NamespaceDecorator;

        specialinvoke $r1.<java.lang.Object: void <init>()>();

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        $r1.<org.simpleframework.xml.core.NamespaceDecorator: java.util.List scope> = $r0;

        return;
    }

    private void namespace(org.simpleframework.xml.stream.OutputNode)
    {
        java.lang.String $r0;
        org.simpleframework.xml.Namespace $r1, $r4;
        org.simpleframework.xml.stream.OutputNode $r2;
        org.simpleframework.xml.core.NamespaceDecorator $r3;

        $r3 := @this: org.simpleframework.xml.core.NamespaceDecorator;

        $r2 := @parameter0: org.simpleframework.xml.stream.OutputNode;

        $r1 = $r3.<org.simpleframework.xml.core.NamespaceDecorator: org.simpleframework.xml.Namespace primary>;

        if $r1 == null goto label1;

        $r4 = $r3.<org.simpleframework.xml.core.NamespaceDecorator: org.simpleframework.xml.Namespace primary>;

        $r0 = interfaceinvoke $r4.<org.simpleframework.xml.Namespace: java.lang.String reference()>();

        interfaceinvoke $r2.<org.simpleframework.xml.stream.OutputNode: void setReference(java.lang.String)>($r0);

        return;

     label1:
        return;
    }

    private void scope(org.simpleframework.xml.stream.OutputNode)
    {
        java.lang.String $r0, $r1;
        org.simpleframework.xml.Namespace $r2;
        java.lang.Object $r3;
        boolean $z0;
        java.util.Iterator $r4;
        org.simpleframework.xml.stream.NamespaceMap $r5;
        java.util.List $r6;
        org.simpleframework.xml.stream.OutputNode $r7;
        org.simpleframework.xml.core.NamespaceDecorator $r8;

        $r8 := @this: org.simpleframework.xml.core.NamespaceDecorator;

        $r7 := @parameter0: org.simpleframework.xml.stream.OutputNode;

        $r5 = interfaceinvoke $r7.<org.simpleframework.xml.stream.OutputNode: org.simpleframework.xml.stream.NamespaceMap getNamespaces()>();

        $r6 = $r8.<org.simpleframework.xml.core.NamespaceDecorator: java.util.List scope>;

        $r4 = interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        $r2 = (org.simpleframework.xml.Namespace) $r3;

        $r0 = interfaceinvoke $r2.<org.simpleframework.xml.Namespace: java.lang.String reference()>();

        $r1 = interfaceinvoke $r2.<org.simpleframework.xml.Namespace: java.lang.String prefix()>();

        interfaceinvoke $r5.<org.simpleframework.xml.stream.NamespaceMap: java.lang.String setReference(java.lang.String,java.lang.String)>($r0, $r1);

        goto label1;

     label2:
        return;
    }

    public void add(org.simpleframework.xml.Namespace)
    {
        java.util.List $r0;
        org.simpleframework.xml.Namespace $r1;
        org.simpleframework.xml.core.NamespaceDecorator $r2;

        $r2 := @this: org.simpleframework.xml.core.NamespaceDecorator;

        $r1 := @parameter0: org.simpleframework.xml.Namespace;

        $r0 = $r2.<org.simpleframework.xml.core.NamespaceDecorator: java.util.List scope>;

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r1);

        return;
    }

    public void decorate(org.simpleframework.xml.stream.OutputNode)
    {
        org.simpleframework.xml.stream.OutputNode $r0;
        org.simpleframework.xml.core.NamespaceDecorator $r1;

        $r1 := @this: org.simpleframework.xml.core.NamespaceDecorator;

        $r0 := @parameter0: org.simpleframework.xml.stream.OutputNode;

        virtualinvoke $r1.<org.simpleframework.xml.core.NamespaceDecorator: void decorate(org.simpleframework.xml.stream.OutputNode,org.simpleframework.xml.core.Decorator)>($r0, null);

        return;
    }

    public void decorate(org.simpleframework.xml.stream.OutputNode, org.simpleframework.xml.core.Decorator)
    {
        org.simpleframework.xml.core.Decorator $r0;
        org.simpleframework.xml.stream.OutputNode $r1;
        org.simpleframework.xml.core.NamespaceDecorator $r2;

        $r2 := @this: org.simpleframework.xml.core.NamespaceDecorator;

        $r1 := @parameter0: org.simpleframework.xml.stream.OutputNode;

        $r0 := @parameter1: org.simpleframework.xml.core.Decorator;

        if $r0 == null goto label1;

        interfaceinvoke $r0.<org.simpleframework.xml.core.Decorator: void decorate(org.simpleframework.xml.stream.OutputNode)>($r1);

     label1:
        specialinvoke $r2.<org.simpleframework.xml.core.NamespaceDecorator: void scope(org.simpleframework.xml.stream.OutputNode)>($r1);

        specialinvoke $r2.<org.simpleframework.xml.core.NamespaceDecorator: void namespace(org.simpleframework.xml.stream.OutputNode)>($r1);

        return;
    }

    public void set(org.simpleframework.xml.Namespace)
    {
        org.simpleframework.xml.Namespace $r0;
        org.simpleframework.xml.core.NamespaceDecorator $r1;

        $r1 := @this: org.simpleframework.xml.core.NamespaceDecorator;

        $r0 := @parameter0: org.simpleframework.xml.Namespace;

        if $r0 == null goto label1;

        virtualinvoke $r1.<org.simpleframework.xml.core.NamespaceDecorator: void add(org.simpleframework.xml.Namespace)>($r0);

     label1:
        $r1.<org.simpleframework.xml.core.NamespaceDecorator: org.simpleframework.xml.Namespace primary> = $r0;

        return;
    }
}
