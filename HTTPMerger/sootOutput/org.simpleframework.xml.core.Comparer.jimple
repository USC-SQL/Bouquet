class org.simpleframework.xml.core.Comparer extends java.lang.Object
{
    private static final java.lang.String NAME;
    private final java.lang.String[] ignore;

    public void <init>()
    {
        java.lang.String[] $r0;
        org.simpleframework.xml.core.Comparer $r1;

        $r1 := @this: org.simpleframework.xml.core.Comparer;

        $r0 = newarray (java.lang.String)[1];

        $r0[0] = "name";

        specialinvoke $r1.<org.simpleframework.xml.core.Comparer: void <init>(java.lang.String[])>($r0);

        return;
    }

    public transient void <init>(java.lang.String[])
    {
        java.lang.String[] $r0;
        org.simpleframework.xml.core.Comparer $r1;

        $r1 := @this: org.simpleframework.xml.core.Comparer;

        $r0 := @parameter0: java.lang.String[];

        specialinvoke $r1.<java.lang.Object: void <init>()>();

        $r1.<org.simpleframework.xml.core.Comparer: java.lang.String[] ignore> = $r0;

        return;
    }

    private boolean isIgnore(java.lang.reflect.Method)
    {
        boolean $z0;
        java.lang.String $r0, $r1;
        int $i0, $i1;
        java.lang.String[] $r2, $r5;
        java.lang.reflect.Method $r3;
        org.simpleframework.xml.core.Comparer $r4;

        $r4 := @this: org.simpleframework.xml.core.Comparer;

        $r3 := @parameter0: java.lang.reflect.Method;

        $r1 = virtualinvoke $r3.<java.lang.reflect.Method: java.lang.String getName()>();

        $r2 = $r4.<org.simpleframework.xml.core.Comparer: java.lang.String[] ignore>;

        if $r2 == null goto label3;

        $r5 = $r4.<org.simpleframework.xml.core.Comparer: java.lang.String[] ignore>;

        $i1 = lengthof $r5;

        $i0 = 0;

     label1:
        if $i0 >= $i1 goto label3;

        $r0 = $r5[$i0];

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r0);

        if $z0 == 0 goto label2;

        return 1;

     label2:
        $i0 = $i0 + 1;

        goto label1;

     label3:
        return 0;
    }

    public boolean equals(java.lang.annotation.Annotation, java.lang.annotation.Annotation) throws java.lang.Exception
    {
        java.lang.Object $r0, $r1;
        java.lang.Object[] $r2, $r10;
        boolean $z0, $z1, $z2;
        java.lang.reflect.Method[] $r3;
        java.lang.Class $r4, $r5;
        java.lang.reflect.Method $r6;
        int $i0, $i1;
        java.lang.annotation.Annotation $r7, $r8;
        org.simpleframework.xml.core.Comparer $r9;

        $r9 := @this: org.simpleframework.xml.core.Comparer;

        $r7 := @parameter0: java.lang.annotation.Annotation;

        $r8 := @parameter1: java.lang.annotation.Annotation;

        $r4 = interfaceinvoke $r7.<java.lang.annotation.Annotation: java.lang.Class annotationType()>();

        $r5 = interfaceinvoke $r8.<java.lang.annotation.Annotation: java.lang.Class annotationType()>();

        $r3 = virtualinvoke $r4.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>();

        $z0 = virtualinvoke $r4.<java.lang.Object: boolean equals(java.lang.Object)>($r5);

        if $z0 == 0 goto label4;

        $i1 = lengthof $r3;

        $i0 = 0;

     label1:
        if $i0 >= $i1 goto label3;

        $r6 = $r3[$i0];

        $z1 = specialinvoke $r9.<org.simpleframework.xml.core.Comparer: boolean isIgnore(java.lang.reflect.Method)>($r6);

        if $z1 != 0 goto label2;

        $r2 = newarray (java.lang.Object)[0];

        $r0 = virtualinvoke $r6.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>($r7, $r2);

        $r10 = newarray (java.lang.Object)[0];

        $r1 = virtualinvoke $r6.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>($r8, $r10);

        $z2 = virtualinvoke $r0.<java.lang.Object: boolean equals(java.lang.Object)>($r1);

        if $z2 != 0 goto label2;

        return 0;

     label2:
        $i0 = $i0 + 1;

        goto label1;

     label3:
        return 1;

     label4:
        return 0;
    }

    public static void <clinit>()
    {
        <org.simpleframework.xml.core.Comparer: java.lang.String NAME> = "name";

        <org.simpleframework.xml.core.Comparer: java.lang.String NAME> = "name";

        return;
    }
}
