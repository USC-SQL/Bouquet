class org.simpleframework.xml.core.ElementArrayLabel extends org.simpleframework.xml.core.TemplateLabel
{
    private org.simpleframework.xml.core.Decorator decorator;
    private org.simpleframework.xml.core.Introspector detail;
    private java.lang.String entry;
    private org.simpleframework.xml.stream.Format format;
    private org.simpleframework.xml.ElementArray label;
    private java.lang.String name;
    private java.lang.Class type;

    public void <init>(org.simpleframework.xml.core.Contact, org.simpleframework.xml.ElementArray, org.simpleframework.xml.stream.Format)
    {
        java.lang.String $r0, $r8;
        org.simpleframework.xml.core.Qualifier $r1;
        java.lang.Class $r2;
        org.simpleframework.xml.core.Introspector $r3;
        org.simpleframework.xml.stream.Format $r4;
        org.simpleframework.xml.ElementArray $r5;
        org.simpleframework.xml.core.Contact $r6;
        org.simpleframework.xml.core.ElementArrayLabel $r7;

        $r7 := @this: org.simpleframework.xml.core.ElementArrayLabel;

        $r6 := @parameter0: org.simpleframework.xml.core.Contact;

        $r5 := @parameter1: org.simpleframework.xml.ElementArray;

        $r4 := @parameter2: org.simpleframework.xml.stream.Format;

        specialinvoke $r7.<org.simpleframework.xml.core.TemplateLabel: void <init>()>();

        $r3 = new org.simpleframework.xml.core.Introspector;

        specialinvoke $r3.<org.simpleframework.xml.core.Introspector: void <init>(org.simpleframework.xml.core.Contact,org.simpleframework.xml.core.Label,org.simpleframework.xml.stream.Format)>($r6, $r7, $r4);

        $r7.<org.simpleframework.xml.core.ElementArrayLabel: org.simpleframework.xml.core.Introspector detail> = $r3;

        $r1 = new org.simpleframework.xml.core.Qualifier;

        specialinvoke $r1.<org.simpleframework.xml.core.Qualifier: void <init>(org.simpleframework.xml.core.Contact)>($r6);

        $r7.<org.simpleframework.xml.core.ElementArrayLabel: org.simpleframework.xml.core.Decorator decorator> = $r1;

        $r2 = interfaceinvoke $r6.<org.simpleframework.xml.core.Contact: java.lang.Class getType()>();

        $r7.<org.simpleframework.xml.core.ElementArrayLabel: java.lang.Class type> = $r2;

        $r0 = interfaceinvoke $r5.<org.simpleframework.xml.ElementArray: java.lang.String entry()>();

        $r7.<org.simpleframework.xml.core.ElementArrayLabel: java.lang.String entry> = $r0;

        $r8 = interfaceinvoke $r5.<org.simpleframework.xml.ElementArray: java.lang.String name()>();

        $r7.<org.simpleframework.xml.core.ElementArrayLabel: java.lang.String name> = $r8;

        $r7.<org.simpleframework.xml.core.ElementArrayLabel: org.simpleframework.xml.stream.Format format> = $r4;

        $r7.<org.simpleframework.xml.core.ElementArrayLabel: org.simpleframework.xml.ElementArray label> = $r5;

        return;
    }

    private org.simpleframework.xml.core.Converter getConverter(org.simpleframework.xml.core.Context, java.lang.String) throws java.lang.Exception
    {
        org.simpleframework.xml.core.PrimitiveArray r0;
        org.simpleframework.xml.core.CompositeArray r1;
        boolean $z0;
        org.simpleframework.xml.core.Contact $r2;
        org.simpleframework.xml.strategy.Type $r3;
        java.lang.String $r4;
        org.simpleframework.xml.core.Context $r5;
        org.simpleframework.xml.core.ElementArrayLabel $r6;

        $r6 := @this: org.simpleframework.xml.core.ElementArrayLabel;

        $r5 := @parameter0: org.simpleframework.xml.core.Context;

        $r4 := @parameter1: java.lang.String;

        $r3 = virtualinvoke $r6.<org.simpleframework.xml.core.ElementArrayLabel: org.simpleframework.xml.strategy.Type getDependent()>();

        $r2 = virtualinvoke $r6.<org.simpleframework.xml.core.ElementArrayLabel: org.simpleframework.xml.core.Contact getContact()>();

        $z0 = interfaceinvoke $r5.<org.simpleframework.xml.core.Context: boolean isPrimitive(org.simpleframework.xml.strategy.Type)>($r3);

        if $z0 != 0 goto label1;

        r1 = new org.simpleframework.xml.core.CompositeArray;

        specialinvoke r1.<org.simpleframework.xml.core.CompositeArray: void <init>(org.simpleframework.xml.core.Context,org.simpleframework.xml.strategy.Type,org.simpleframework.xml.strategy.Type,java.lang.String)>($r5, $r2, $r3, $r4);

        return r1;

     label1:
        r0 = new org.simpleframework.xml.core.PrimitiveArray;

        specialinvoke r0.<org.simpleframework.xml.core.PrimitiveArray: void <init>(org.simpleframework.xml.core.Context,org.simpleframework.xml.strategy.Type,org.simpleframework.xml.strategy.Type,java.lang.String)>($r5, $r2, $r3, $r4);

        return r0;
    }

    public java.lang.annotation.Annotation getAnnotation()
    {
        org.simpleframework.xml.ElementArray r0;
        org.simpleframework.xml.core.ElementArrayLabel $r1;

        $r1 := @this: org.simpleframework.xml.core.ElementArrayLabel;

        r0 = $r1.<org.simpleframework.xml.core.ElementArrayLabel: org.simpleframework.xml.ElementArray label>;

        return r0;
    }

    public org.simpleframework.xml.core.Contact getContact()
    {
        org.simpleframework.xml.core.Contact $r0;
        org.simpleframework.xml.core.Introspector $r1;
        org.simpleframework.xml.core.ElementArrayLabel $r2;

        $r2 := @this: org.simpleframework.xml.core.ElementArrayLabel;

        $r1 = $r2.<org.simpleframework.xml.core.ElementArrayLabel: org.simpleframework.xml.core.Introspector detail>;

        $r0 = virtualinvoke $r1.<org.simpleframework.xml.core.Introspector: org.simpleframework.xml.core.Contact getContact()>();

        return $r0;
    }

    public org.simpleframework.xml.core.Converter getConverter(org.simpleframework.xml.core.Context) throws java.lang.Exception
    {
        org.simpleframework.xml.core.Converter $r0;
        java.lang.Object[] $r1;
        org.simpleframework.xml.core.InstantiationException $r2;
        boolean $z0;
        java.lang.String $r3;
        org.simpleframework.xml.core.Contact $r4;
        java.lang.Class $r5, $r8;
        org.simpleframework.xml.core.Context $r6;
        org.simpleframework.xml.core.ElementArrayLabel $r7;

        $r7 := @this: org.simpleframework.xml.core.ElementArrayLabel;

        $r6 := @parameter0: org.simpleframework.xml.core.Context;

        $r4 = virtualinvoke $r7.<org.simpleframework.xml.core.ElementArrayLabel: org.simpleframework.xml.core.Contact getContact()>();

        $r3 = virtualinvoke $r7.<org.simpleframework.xml.core.ElementArrayLabel: java.lang.String getEntry()>();

        $r5 = $r7.<org.simpleframework.xml.core.ElementArrayLabel: java.lang.Class type>;

        $z0 = virtualinvoke $r5.<java.lang.Class: boolean isArray()>();

        if $z0 != 0 goto label1;

        $r2 = new org.simpleframework.xml.core.InstantiationException;

        $r1 = newarray (java.lang.Object)[2];

        $r8 = $r7.<org.simpleframework.xml.core.ElementArrayLabel: java.lang.Class type>;

        $r1[0] = $r8;

        $r1[1] = $r4;

        specialinvoke $r2.<org.simpleframework.xml.core.InstantiationException: void <init>(java.lang.String,java.lang.Object[])>("Type is not an array %s for %s", $r1);

        throw $r2;

     label1:
        $r0 = specialinvoke $r7.<org.simpleframework.xml.core.ElementArrayLabel: org.simpleframework.xml.core.Converter getConverter(org.simpleframework.xml.core.Context,java.lang.String)>($r6, $r3);

        return $r0;
    }

    public org.simpleframework.xml.core.Decorator getDecorator() throws java.lang.Exception
    {
        org.simpleframework.xml.core.Decorator r0;
        org.simpleframework.xml.core.ElementArrayLabel $r1;

        $r1 := @this: org.simpleframework.xml.core.ElementArrayLabel;

        r0 = $r1.<org.simpleframework.xml.core.ElementArrayLabel: org.simpleframework.xml.core.Decorator decorator>;

        return r0;
    }

    public org.simpleframework.xml.strategy.Type getDependent()
    {
        org.simpleframework.xml.core.ClassType $r0, $r5;
        java.lang.Class $r1, $r3, $r4;
        org.simpleframework.xml.core.ElementArrayLabel $r2;

        $r2 := @this: org.simpleframework.xml.core.ElementArrayLabel;

        $r1 = $r2.<org.simpleframework.xml.core.ElementArrayLabel: java.lang.Class type>;

        $r3 = virtualinvoke $r1.<java.lang.Class: java.lang.Class getComponentType()>();

        if $r3 != null goto label1;

        $r0 = new org.simpleframework.xml.core.ClassType;

        $r4 = $r2.<org.simpleframework.xml.core.ElementArrayLabel: java.lang.Class type>;

        specialinvoke $r0.<org.simpleframework.xml.core.ClassType: void <init>(java.lang.Class)>($r4);

        return $r0;

     label1:
        $r5 = new org.simpleframework.xml.core.ClassType;

        specialinvoke $r5.<org.simpleframework.xml.core.ClassType: void <init>(java.lang.Class)>($r3);

        return $r5;
    }

    public java.lang.Object getEmpty(org.simpleframework.xml.core.Context) throws java.lang.Exception
    {
        java.lang.Object $r0;
        org.simpleframework.xml.ElementArray $r1;
        boolean $z0;
        java.lang.Class $r2;
        org.simpleframework.xml.core.ArrayFactory $r3;
        org.simpleframework.xml.core.ClassType $r4;
        org.simpleframework.xml.core.Context $r5;
        org.simpleframework.xml.core.ElementArrayLabel $r6;

        $r6 := @this: org.simpleframework.xml.core.ElementArrayLabel;

        $r5 := @parameter0: org.simpleframework.xml.core.Context;

        $r4 = new org.simpleframework.xml.core.ClassType;

        $r2 = $r6.<org.simpleframework.xml.core.ElementArrayLabel: java.lang.Class type>;

        specialinvoke $r4.<org.simpleframework.xml.core.ClassType: void <init>(java.lang.Class)>($r2);

        $r3 = new org.simpleframework.xml.core.ArrayFactory;

        specialinvoke $r3.<org.simpleframework.xml.core.ArrayFactory: void <init>(org.simpleframework.xml.core.Context,org.simpleframework.xml.strategy.Type)>($r5, $r4);

        $r1 = $r6.<org.simpleframework.xml.core.ElementArrayLabel: org.simpleframework.xml.ElementArray label>;

        $z0 = interfaceinvoke $r1.<org.simpleframework.xml.ElementArray: boolean empty()>();

        if $z0 != 0 goto label1;

        $r0 = virtualinvoke $r3.<org.simpleframework.xml.core.Factory: java.lang.Object getInstance()>();

        return $r0;

     label1:
        return null;
    }

    public java.lang.String getEntry() throws java.lang.Exception
    {
        boolean $z0;
        org.simpleframework.xml.core.Introspector $r0, $r5;
        org.simpleframework.xml.stream.Style $r1;
        java.lang.String $r2, $r6, $r7, $r8;
        org.simpleframework.xml.stream.Format $r3;
        org.simpleframework.xml.core.ElementArrayLabel $r4;

        $r4 := @this: org.simpleframework.xml.core.ElementArrayLabel;

        $r3 = $r4.<org.simpleframework.xml.core.ElementArrayLabel: org.simpleframework.xml.stream.Format format>;

        $r1 = virtualinvoke $r3.<org.simpleframework.xml.stream.Format: org.simpleframework.xml.stream.Style getStyle()>();

        $r0 = $r4.<org.simpleframework.xml.core.ElementArrayLabel: org.simpleframework.xml.core.Introspector detail>;

        $r2 = $r4.<org.simpleframework.xml.core.ElementArrayLabel: java.lang.String entry>;

        $z0 = virtualinvoke $r0.<org.simpleframework.xml.core.Introspector: boolean isEmpty(java.lang.String)>($r2);

        if $z0 == 0 goto label1;

        $r5 = $r4.<org.simpleframework.xml.core.ElementArrayLabel: org.simpleframework.xml.core.Introspector detail>;

        $r6 = virtualinvoke $r5.<org.simpleframework.xml.core.Introspector: java.lang.String getEntry()>();

        $r4.<org.simpleframework.xml.core.ElementArrayLabel: java.lang.String entry> = $r6;

     label1:
        $r7 = $r4.<org.simpleframework.xml.core.ElementArrayLabel: java.lang.String entry>;

        $r8 = interfaceinvoke $r1.<org.simpleframework.xml.stream.Style: java.lang.String getElement(java.lang.String)>($r7);

        return $r8;
    }

    public org.simpleframework.xml.core.Expression getExpression() throws java.lang.Exception
    {
        org.simpleframework.xml.core.Expression $r0;
        org.simpleframework.xml.core.Introspector $r1;
        org.simpleframework.xml.core.ElementArrayLabel $r2;

        $r2 := @this: org.simpleframework.xml.core.ElementArrayLabel;

        $r1 = $r2.<org.simpleframework.xml.core.ElementArrayLabel: org.simpleframework.xml.core.Introspector detail>;

        $r0 = virtualinvoke $r1.<org.simpleframework.xml.core.Introspector: org.simpleframework.xml.core.Expression getExpression()>();

        return $r0;
    }

    public java.lang.String getName() throws java.lang.Exception
    {
        java.lang.String $r0, $r5;
        org.simpleframework.xml.core.Introspector $r1;
        org.simpleframework.xml.stream.Style $r2;
        org.simpleframework.xml.stream.Format $r3;
        org.simpleframework.xml.core.ElementArrayLabel $r4;

        $r4 := @this: org.simpleframework.xml.core.ElementArrayLabel;

        $r3 = $r4.<org.simpleframework.xml.core.ElementArrayLabel: org.simpleframework.xml.stream.Format format>;

        $r2 = virtualinvoke $r3.<org.simpleframework.xml.stream.Format: org.simpleframework.xml.stream.Style getStyle()>();

        $r1 = $r4.<org.simpleframework.xml.core.ElementArrayLabel: org.simpleframework.xml.core.Introspector detail>;

        $r0 = virtualinvoke $r1.<org.simpleframework.xml.core.Introspector: java.lang.String getName()>();

        $r5 = interfaceinvoke $r2.<org.simpleframework.xml.stream.Style: java.lang.String getElement(java.lang.String)>($r0);

        return $r5;
    }

    public java.lang.String getOverride()
    {
        java.lang.String r0;
        org.simpleframework.xml.core.ElementArrayLabel $r1;

        $r1 := @this: org.simpleframework.xml.core.ElementArrayLabel;

        r0 = $r1.<org.simpleframework.xml.core.ElementArrayLabel: java.lang.String name>;

        return r0;
    }

    public java.lang.String getPath() throws java.lang.Exception
    {
        java.lang.String $r0, $r3;
        org.simpleframework.xml.core.Expression $r1;
        org.simpleframework.xml.core.ElementArrayLabel $r2;

        $r2 := @this: org.simpleframework.xml.core.ElementArrayLabel;

        $r1 = virtualinvoke $r2.<org.simpleframework.xml.core.ElementArrayLabel: org.simpleframework.xml.core.Expression getExpression()>();

        $r0 = virtualinvoke $r2.<org.simpleframework.xml.core.ElementArrayLabel: java.lang.String getName()>();

        $r3 = interfaceinvoke $r1.<org.simpleframework.xml.core.Expression: java.lang.String getElement(java.lang.String)>($r0);

        return $r3;
    }

    public java.lang.Class getType()
    {
        java.lang.Class r0;
        org.simpleframework.xml.core.ElementArrayLabel $r1;

        $r1 := @this: org.simpleframework.xml.core.ElementArrayLabel;

        r0 = $r1.<org.simpleframework.xml.core.ElementArrayLabel: java.lang.Class type>;

        return r0;
    }

    public boolean isData()
    {
        boolean $z0;
        org.simpleframework.xml.ElementArray $r0;
        org.simpleframework.xml.core.ElementArrayLabel $r1;

        $r1 := @this: org.simpleframework.xml.core.ElementArrayLabel;

        $r0 = $r1.<org.simpleframework.xml.core.ElementArrayLabel: org.simpleframework.xml.ElementArray label>;

        $z0 = interfaceinvoke $r0.<org.simpleframework.xml.ElementArray: boolean data()>();

        return $z0;
    }

    public boolean isRequired()
    {
        boolean $z0;
        org.simpleframework.xml.ElementArray $r0;
        org.simpleframework.xml.core.ElementArrayLabel $r1;

        $r1 := @this: org.simpleframework.xml.core.ElementArrayLabel;

        $r0 = $r1.<org.simpleframework.xml.core.ElementArrayLabel: org.simpleframework.xml.ElementArray label>;

        $z0 = interfaceinvoke $r0.<org.simpleframework.xml.ElementArray: boolean required()>();

        return $z0;
    }

    public java.lang.String toString()
    {
        java.lang.String $r0;
        org.simpleframework.xml.core.Introspector $r1;
        org.simpleframework.xml.core.ElementArrayLabel $r2;

        $r2 := @this: org.simpleframework.xml.core.ElementArrayLabel;

        $r1 = $r2.<org.simpleframework.xml.core.ElementArrayLabel: org.simpleframework.xml.core.Introspector detail>;

        $r0 = virtualinvoke $r1.<org.simpleframework.xml.core.Introspector: java.lang.String toString()>();

        return $r0;
    }
}
