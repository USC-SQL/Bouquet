class org.simpleframework.xml.transform.DateFactory extends java.lang.Object
{
    private final java.lang.reflect.Constructor factory;

    public void <init>(java.lang.Class) throws java.lang.Exception
    {
        java.lang.Class[] $r0;
        java.lang.Class $r1, $r2;
        org.simpleframework.xml.transform.DateFactory $r3;

        $r3 := @this: org.simpleframework.xml.transform.DateFactory;

        $r1 := @parameter0: java.lang.Class;

        $r0 = newarray (java.lang.Class)[1];

        $r2 = <java.lang.Long: java.lang.Class TYPE>;

        $r0[0] = $r2;

        specialinvoke $r3.<org.simpleframework.xml.transform.DateFactory: void <init>(java.lang.Class,java.lang.Class[])>($r1, $r0);

        return;
    }

    public transient void <init>(java.lang.Class, java.lang.Class[]) throws java.lang.Exception
    {
        java.lang.reflect.Constructor $r0;
        java.lang.Class[] $r1;
        java.lang.Class $r2;
        org.simpleframework.xml.transform.DateFactory $r3;

        $r3 := @this: org.simpleframework.xml.transform.DateFactory;

        $r2 := @parameter0: java.lang.Class;

        $r1 := @parameter1: java.lang.Class[];

        specialinvoke $r3.<java.lang.Object: void <init>()>();

        $r0 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.Constructor getDeclaredConstructor(java.lang.Class[])>($r1);

        $r3.<org.simpleframework.xml.transform.DateFactory: java.lang.reflect.Constructor factory> = $r0;

        return;
    }

    public transient java.util.Date getInstance(java.lang.Object[]) throws java.lang.Exception
    {
        java.util.Date $r0;
        java.lang.Object $r1;
        java.lang.reflect.Constructor $r2;
        java.lang.Object[] $r3;
        org.simpleframework.xml.transform.DateFactory $r4;

        $r4 := @this: org.simpleframework.xml.transform.DateFactory;

        $r3 := @parameter0: java.lang.Object[];

        $r2 = $r4.<org.simpleframework.xml.transform.DateFactory: java.lang.reflect.Constructor factory>;

        $r1 = virtualinvoke $r2.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($r3);

        $r0 = (java.util.Date) $r1;

        return $r0;
    }
}
