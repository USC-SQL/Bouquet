abstract class org.jsoup.helper.HttpConnection$Base extends java.lang.Object implements org.jsoup.Connection$Base
{
    java.util.Map cookies;
    java.util.Map headers;
    org.jsoup.Connection$Method method;
    java.net.URL url;

    private void <init>()
    {
        java.util.LinkedHashMap $r0, $r2;
        org.jsoup.helper.HttpConnection$Base $r1;

        $r1 := @this: org.jsoup.helper.HttpConnection$Base;

        specialinvoke $r1.<java.lang.Object: void <init>()>();

        $r0 = new java.util.LinkedHashMap;

        specialinvoke $r0.<java.util.LinkedHashMap: void <init>()>();

        $r1.<org.jsoup.helper.HttpConnection$Base: java.util.Map headers> = $r0;

        $r2 = new java.util.LinkedHashMap;

        specialinvoke $r2.<java.util.LinkedHashMap: void <init>()>();

        $r1.<org.jsoup.helper.HttpConnection$Base: java.util.Map cookies> = $r2;

        return;
    }

    void <init>(org.jsoup.helper.HttpConnection$1)
    {
        org.jsoup.helper.HttpConnection$1 $r0;
        org.jsoup.helper.HttpConnection$Base $r1;

        $r1 := @this: org.jsoup.helper.HttpConnection$Base;

        $r0 := @parameter0: org.jsoup.helper.HttpConnection$1;

        specialinvoke $r1.<org.jsoup.helper.HttpConnection$Base: void <init>()>();

        return;
    }

    private java.lang.String getHeaderCaseInsensitive(java.lang.String)
    {
        java.util.Map$Entry $r0;
        java.util.Map $r1, $r6;
        java.lang.Object $r2, $r8, $r9;
        java.lang.String $r3, $r4, $r7, $r10;
        org.jsoup.helper.HttpConnection$Base $r5;

        $r5 := @this: org.jsoup.helper.HttpConnection$Base;

        $r3 := @parameter0: java.lang.String;

        staticinvoke <org.jsoup.helper.Validate: void notNull(java.lang.Object,java.lang.String)>($r3, "Header name must not be null");

        $r1 = $r5.<org.jsoup.helper.HttpConnection$Base: java.util.Map headers>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r3);

        $r4 = (java.lang.String) $r2;

        if $r4 != null goto label1;

        $r6 = $r5.<org.jsoup.helper.HttpConnection$Base: java.util.Map headers>;

        $r7 = virtualinvoke $r3.<java.lang.String: java.lang.String toLowerCase()>();

        $r8 = interfaceinvoke $r6.<java.util.Map: java.lang.Object get(java.lang.Object)>($r7);

        $r4 = (java.lang.String) $r8;

     label1:
        if $r4 != null goto label2;

        $r0 = specialinvoke $r5.<org.jsoup.helper.HttpConnection$Base: java.util.Map$Entry scanHeaders(java.lang.String)>($r3);

        if $r0 == null goto label3;

        $r9 = interfaceinvoke $r0.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r10 = (java.lang.String) $r9;

        return $r10;

     label2:
        return $r4;

     label3:
        return $r4;
    }

    private java.util.Map$Entry scanHeaders(java.lang.String)
    {
        java.util.Map$Entry $r0;
        java.lang.Object $r1, $r9;
        boolean $z0, $z1;
        java.util.Iterator $r2;
        java.util.Set $r3;
        java.util.Map $r4;
        java.lang.String $r5, $r6, $r8, $r10;
        org.jsoup.helper.HttpConnection$Base $r7;

        $r7 := @this: org.jsoup.helper.HttpConnection$Base;

        $r5 := @parameter0: java.lang.String;

        $r8 = virtualinvoke $r5.<java.lang.String: java.lang.String toLowerCase()>();

        $r4 = $r7.<org.jsoup.helper.HttpConnection$Base: java.util.Map headers>;

        $r3 = interfaceinvoke $r4.<java.util.Map: java.util.Set entrySet()>();

        $r2 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r1 = interfaceinvoke $r2.<java.util.Iterator: java.lang.Object next()>();

        $r0 = (java.util.Map$Entry) $r1;

        $r9 = interfaceinvoke $r0.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r6 = (java.lang.String) $r9;

        $r10 = virtualinvoke $r6.<java.lang.String: java.lang.String toLowerCase()>();

        $z1 = virtualinvoke $r10.<java.lang.String: boolean equals(java.lang.Object)>($r8);

        if $z1 == 0 goto label1;

        return $r0;

     label2:
        return null;
    }

    public java.lang.String cookie(java.lang.String)
    {
        java.util.Map $r0;
        java.lang.Object $r1;
        java.lang.String $r2, $r4;
        org.jsoup.helper.HttpConnection$Base $r3;

        $r3 := @this: org.jsoup.helper.HttpConnection$Base;

        $r2 := @parameter0: java.lang.String;

        staticinvoke <org.jsoup.helper.Validate: void notNull(java.lang.Object,java.lang.String)>($r2, "Cookie name must not be null");

        $r0 = $r3.<org.jsoup.helper.HttpConnection$Base: java.util.Map cookies>;

        $r1 = interfaceinvoke $r0.<java.util.Map: java.lang.Object get(java.lang.Object)>($r2);

        $r4 = (java.lang.String) $r1;

        return $r4;
    }

    public org.jsoup.Connection$Base cookie(java.lang.String, java.lang.String)
    {
        java.util.Map $r0;
        java.lang.String $r1, $r2;
        org.jsoup.helper.HttpConnection$Base $r3;

        $r3 := @this: org.jsoup.helper.HttpConnection$Base;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        staticinvoke <org.jsoup.helper.Validate: void notEmpty(java.lang.String,java.lang.String)>($r1, "Cookie name must not be empty");

        staticinvoke <org.jsoup.helper.Validate: void notNull(java.lang.Object,java.lang.String)>($r2, "Cookie value must not be null");

        $r0 = $r3.<org.jsoup.helper.HttpConnection$Base: java.util.Map cookies>;

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, $r2);

        return $r3;
    }

    public java.util.Map cookies()
    {
        java.util.Map r0;
        org.jsoup.helper.HttpConnection$Base $r1;

        $r1 := @this: org.jsoup.helper.HttpConnection$Base;

        r0 = $r1.<org.jsoup.helper.HttpConnection$Base: java.util.Map cookies>;

        return r0;
    }

    public boolean hasCookie(java.lang.String)
    {
        java.util.Map $r0;
        boolean $z0;
        java.lang.String $r1;
        org.jsoup.helper.HttpConnection$Base $r2;

        $r2 := @this: org.jsoup.helper.HttpConnection$Base;

        $r1 := @parameter0: java.lang.String;

        staticinvoke <org.jsoup.helper.Validate: void notEmpty(java.lang.String)>("Cookie name must not be empty");

        $r0 = $r2.<org.jsoup.helper.HttpConnection$Base: java.util.Map cookies>;

        $z0 = interfaceinvoke $r0.<java.util.Map: boolean containsKey(java.lang.Object)>($r1);

        return $z0;
    }

    public boolean hasHeader(java.lang.String)
    {
        java.lang.String $r0, $r2;
        org.jsoup.helper.HttpConnection$Base $r1;

        $r1 := @this: org.jsoup.helper.HttpConnection$Base;

        $r0 := @parameter0: java.lang.String;

        staticinvoke <org.jsoup.helper.Validate: void notEmpty(java.lang.String,java.lang.String)>($r0, "Header name must not be empty");

        $r2 = specialinvoke $r1.<org.jsoup.helper.HttpConnection$Base: java.lang.String getHeaderCaseInsensitive(java.lang.String)>($r0);

        if $r2 == null goto label1;

        return 1;

     label1:
        return 0;
    }

    public java.lang.String header(java.lang.String)
    {
        java.lang.String $r0, $r2;
        org.jsoup.helper.HttpConnection$Base $r1;

        $r1 := @this: org.jsoup.helper.HttpConnection$Base;

        $r0 := @parameter0: java.lang.String;

        staticinvoke <org.jsoup.helper.Validate: void notNull(java.lang.Object,java.lang.String)>($r0, "Header name must not be null");

        $r2 = specialinvoke $r1.<org.jsoup.helper.HttpConnection$Base: java.lang.String getHeaderCaseInsensitive(java.lang.String)>($r0);

        return $r2;
    }

    public org.jsoup.Connection$Base header(java.lang.String, java.lang.String)
    {
        java.util.Map $r0;
        java.lang.String $r1, $r2;
        org.jsoup.helper.HttpConnection$Base $r3;

        $r3 := @this: org.jsoup.helper.HttpConnection$Base;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        staticinvoke <org.jsoup.helper.Validate: void notEmpty(java.lang.String,java.lang.String)>($r1, "Header name must not be empty");

        staticinvoke <org.jsoup.helper.Validate: void notNull(java.lang.Object,java.lang.String)>($r2, "Header value must not be null");

        virtualinvoke $r3.<org.jsoup.helper.HttpConnection$Base: org.jsoup.Connection$Base removeHeader(java.lang.String)>($r1);

        $r0 = $r3.<org.jsoup.helper.HttpConnection$Base: java.util.Map headers>;

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r1, $r2);

        return $r3;
    }

    public java.util.Map headers()
    {
        java.util.Map r0;
        org.jsoup.helper.HttpConnection$Base $r1;

        $r1 := @this: org.jsoup.helper.HttpConnection$Base;

        r0 = $r1.<org.jsoup.helper.HttpConnection$Base: java.util.Map headers>;

        return r0;
    }

    public org.jsoup.Connection$Base method(org.jsoup.Connection$Method)
    {
        org.jsoup.Connection$Method $r0;
        org.jsoup.helper.HttpConnection$Base $r1;

        $r1 := @this: org.jsoup.helper.HttpConnection$Base;

        $r0 := @parameter0: org.jsoup.Connection$Method;

        staticinvoke <org.jsoup.helper.Validate: void notNull(java.lang.Object,java.lang.String)>($r0, "Method must not be null");

        $r1.<org.jsoup.helper.HttpConnection$Base: org.jsoup.Connection$Method method> = $r0;

        return $r1;
    }

    public org.jsoup.Connection$Method method()
    {
        org.jsoup.Connection$Method r0;
        org.jsoup.helper.HttpConnection$Base $r1;

        $r1 := @this: org.jsoup.helper.HttpConnection$Base;

        r0 = $r1.<org.jsoup.helper.HttpConnection$Base: org.jsoup.Connection$Method method>;

        return r0;
    }

    public org.jsoup.Connection$Base removeCookie(java.lang.String)
    {
        java.util.Map $r0;
        java.lang.String $r1;
        org.jsoup.helper.HttpConnection$Base $r2;

        $r2 := @this: org.jsoup.helper.HttpConnection$Base;

        $r1 := @parameter0: java.lang.String;

        staticinvoke <org.jsoup.helper.Validate: void notEmpty(java.lang.String)>("Cookie name must not be empty");

        $r0 = $r2.<org.jsoup.helper.HttpConnection$Base: java.util.Map cookies>;

        interfaceinvoke $r0.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r1);

        return $r2;
    }

    public org.jsoup.Connection$Base removeHeader(java.lang.String)
    {
        java.lang.Object $r0;
        java.util.Map $r1;
        java.util.Map$Entry $r2;
        java.lang.String $r3;
        org.jsoup.helper.HttpConnection$Base $r4;

        $r4 := @this: org.jsoup.helper.HttpConnection$Base;

        $r3 := @parameter0: java.lang.String;

        staticinvoke <org.jsoup.helper.Validate: void notEmpty(java.lang.String,java.lang.String)>($r3, "Header name must not be empty");

        $r2 = specialinvoke $r4.<org.jsoup.helper.HttpConnection$Base: java.util.Map$Entry scanHeaders(java.lang.String)>($r3);

        if $r2 == null goto label1;

        $r1 = $r4.<org.jsoup.helper.HttpConnection$Base: java.util.Map headers>;

        $r0 = interfaceinvoke $r2.<java.util.Map$Entry: java.lang.Object getKey()>();

        interfaceinvoke $r1.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r0);

        return $r4;

     label1:
        return $r4;
    }

    public java.net.URL url()
    {
        java.net.URL r0;
        org.jsoup.helper.HttpConnection$Base $r1;

        $r1 := @this: org.jsoup.helper.HttpConnection$Base;

        r0 = $r1.<org.jsoup.helper.HttpConnection$Base: java.net.URL url>;

        return r0;
    }

    public org.jsoup.Connection$Base url(java.net.URL)
    {
        java.net.URL $r0;
        org.jsoup.helper.HttpConnection$Base $r1;

        $r1 := @this: org.jsoup.helper.HttpConnection$Base;

        $r0 := @parameter0: java.net.URL;

        staticinvoke <org.jsoup.helper.Validate: void notNull(java.lang.Object,java.lang.String)>($r0, "URL must not be null");

        $r1.<org.jsoup.helper.HttpConnection$Base: java.net.URL url> = $r0;

        return $r1;
    }
}
