class org.simpleframework.xml.core.PathParser extends java.lang.Object implements org.simpleframework.xml.core.Expression
{
    private boolean attribute;
    private org.simpleframework.xml.core.PathParser$Cache attributes;
    private java.lang.StringBuilder builder;
    private java.lang.String cache;
    private int count;
    private char[] data;
    private org.simpleframework.xml.core.PathParser$Cache elements;
    private org.simpleframework.xml.stream.Format format;
    private java.util.LinkedList indexes;
    private java.lang.String location;
    private java.util.LinkedList names;
    private int off;
    private java.lang.String path;
    private java.util.LinkedList prefixes;
    private int start;
    private org.simpleframework.xml.strategy.Type type;

    public void <init>(java.lang.String, org.simpleframework.xml.strategy.Type, org.simpleframework.xml.stream.Format) throws java.lang.Exception
    {
        org.simpleframework.xml.core.PathParser$Cache $r0, $r9;
        java.lang.StringBuilder $r1;
        java.util.LinkedList $r2, $r7, $r8;
        org.simpleframework.xml.stream.Format $r3;
        org.simpleframework.xml.strategy.Type $r4;
        java.lang.String $r5;
        org.simpleframework.xml.core.PathParser $r6;

        $r6 := @this: org.simpleframework.xml.core.PathParser;

        $r5 := @parameter0: java.lang.String;

        $r4 := @parameter1: org.simpleframework.xml.strategy.Type;

        $r3 := @parameter2: org.simpleframework.xml.stream.Format;

        specialinvoke $r6.<java.lang.Object: void <init>()>();

        $r2 = new java.util.LinkedList;

        specialinvoke $r2.<java.util.LinkedList: void <init>()>();

        $r6.<org.simpleframework.xml.core.PathParser: java.util.LinkedList indexes> = $r2;

        $r7 = new java.util.LinkedList;

        specialinvoke $r7.<java.util.LinkedList: void <init>()>();

        $r6.<org.simpleframework.xml.core.PathParser: java.util.LinkedList prefixes> = $r7;

        $r8 = new java.util.LinkedList;

        specialinvoke $r8.<java.util.LinkedList: void <init>()>();

        $r6.<org.simpleframework.xml.core.PathParser: java.util.LinkedList names> = $r8;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r6.<org.simpleframework.xml.core.PathParser: java.lang.StringBuilder builder> = $r1;

        $r0 = new org.simpleframework.xml.core.PathParser$Cache;

        specialinvoke $r0.<org.simpleframework.xml.core.PathParser$Cache: void <init>(org.simpleframework.xml.core.PathParser)>($r6);

        $r6.<org.simpleframework.xml.core.PathParser: org.simpleframework.xml.core.PathParser$Cache attributes> = $r0;

        $r9 = new org.simpleframework.xml.core.PathParser$Cache;

        specialinvoke $r9.<org.simpleframework.xml.core.PathParser$Cache: void <init>(org.simpleframework.xml.core.PathParser)>($r6);

        $r6.<org.simpleframework.xml.core.PathParser: org.simpleframework.xml.core.PathParser$Cache elements> = $r9;

        $r6.<org.simpleframework.xml.core.PathParser: org.simpleframework.xml.stream.Format format> = $r3;

        $r6.<org.simpleframework.xml.core.PathParser: org.simpleframework.xml.strategy.Type type> = $r4;

        $r6.<org.simpleframework.xml.core.PathParser: java.lang.String path> = $r5;

        specialinvoke $r6.<org.simpleframework.xml.core.PathParser: void parse(java.lang.String)>($r5);

        return;
    }

    static boolean access$000(org.simpleframework.xml.core.PathParser)
    {
        boolean z0;
        org.simpleframework.xml.core.PathParser $r0;

        $r0 := @parameter0: org.simpleframework.xml.core.PathParser;

        z0 = $r0.<org.simpleframework.xml.core.PathParser: boolean attribute>;

        return z0;
    }

    static java.util.LinkedList access$100(org.simpleframework.xml.core.PathParser)
    {
        java.util.LinkedList r0;
        org.simpleframework.xml.core.PathParser $r1;

        $r1 := @parameter0: org.simpleframework.xml.core.PathParser;

        r0 = $r1.<org.simpleframework.xml.core.PathParser: java.util.LinkedList names>;

        return r0;
    }

    static java.lang.String access$200(org.simpleframework.xml.core.PathParser, java.lang.String, java.lang.String)
    {
        java.lang.String $r0, $r1, $r3;
        org.simpleframework.xml.core.PathParser $r2;

        $r2 := @parameter0: org.simpleframework.xml.core.PathParser;

        $r0 := @parameter1: java.lang.String;

        $r1 := @parameter2: java.lang.String;

        $r3 = specialinvoke $r2.<org.simpleframework.xml.core.PathParser: java.lang.String getElementPath(java.lang.String,java.lang.String)>($r0, $r1);

        return $r3;
    }

    static java.lang.String access$300(org.simpleframework.xml.core.PathParser, java.lang.String, java.lang.String)
    {
        java.lang.String $r0, $r1, $r3;
        org.simpleframework.xml.core.PathParser $r2;

        $r2 := @parameter0: org.simpleframework.xml.core.PathParser;

        $r0 := @parameter1: java.lang.String;

        $r1 := @parameter2: java.lang.String;

        $r3 = specialinvoke $r2.<org.simpleframework.xml.core.PathParser: java.lang.String getAttributePath(java.lang.String,java.lang.String)>($r0, $r1);

        return $r3;
    }

    static java.util.LinkedList access$400(org.simpleframework.xml.core.PathParser)
    {
        java.util.LinkedList r0;
        org.simpleframework.xml.core.PathParser $r1;

        $r1 := @parameter0: org.simpleframework.xml.core.PathParser;

        r0 = $r1.<org.simpleframework.xml.core.PathParser: java.util.LinkedList indexes>;

        return r0;
    }

    static java.util.LinkedList access$500(org.simpleframework.xml.core.PathParser)
    {
        java.util.LinkedList r0;
        org.simpleframework.xml.core.PathParser $r1;

        $r1 := @parameter0: org.simpleframework.xml.core.PathParser;

        r0 = $r1.<org.simpleframework.xml.core.PathParser: java.util.LinkedList prefixes>;

        return r0;
    }

    static java.lang.String access$600(org.simpleframework.xml.core.PathParser)
    {
        java.lang.String r0;
        org.simpleframework.xml.core.PathParser $r1;

        $r1 := @parameter0: org.simpleframework.xml.core.PathParser;

        r0 = $r1.<org.simpleframework.xml.core.PathParser: java.lang.String location>;

        return r0;
    }

    static int access$700(org.simpleframework.xml.core.PathParser)
    {
        int i0;
        org.simpleframework.xml.core.PathParser $r0;

        $r0 := @parameter0: org.simpleframework.xml.core.PathParser;

        i0 = $r0.<org.simpleframework.xml.core.PathParser: int start>;

        return i0;
    }

    static int access$800(org.simpleframework.xml.core.PathParser)
    {
        int i0;
        org.simpleframework.xml.core.PathParser $r0;

        $r0 := @parameter0: org.simpleframework.xml.core.PathParser;

        i0 = $r0.<org.simpleframework.xml.core.PathParser: int count>;

        return i0;
    }

    static char[] access$900(org.simpleframework.xml.core.PathParser)
    {
        char[] r0;
        org.simpleframework.xml.core.PathParser $r1;

        $r1 := @parameter0: org.simpleframework.xml.core.PathParser;

        r0 = $r1.<org.simpleframework.xml.core.PathParser: char[] data>;

        return r0;
    }

    private void align() throws java.lang.Exception
    {
        java.lang.Integer $r0;
        int $i0, $i1;
        java.util.LinkedList $r1, $r3, $r4;
        org.simpleframework.xml.core.PathParser $r2;

        $r2 := @this: org.simpleframework.xml.core.PathParser;

        $r1 = $r2.<org.simpleframework.xml.core.PathParser: java.util.LinkedList names>;

        $i0 = virtualinvoke $r1.<java.util.LinkedList: int size()>();

        $r3 = $r2.<org.simpleframework.xml.core.PathParser: java.util.LinkedList indexes>;

        $i1 = virtualinvoke $r3.<java.util.LinkedList: int size()>();

        if $i0 <= $i1 goto label1;

        $r4 = $r2.<org.simpleframework.xml.core.PathParser: java.util.LinkedList indexes>;

        $r0 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        virtualinvoke $r4.<java.util.LinkedList: boolean add(java.lang.Object)>($r0);

        return;

     label1:
        return;
    }

    private void attribute() throws java.lang.Exception
    {
        org.simpleframework.xml.strategy.Type $r0, $r10;
        java.lang.String $r1, $r9;
        java.lang.Character $r2;
        java.lang.Object[] $r3, $r8;
        org.simpleframework.xml.core.PathException $r4, $r7;
        char[] $r5;
        boolean $z0;
        char $c0;
        int $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        org.simpleframework.xml.core.PathParser $r6;

        $r6 := @this: org.simpleframework.xml.core.PathParser;

        $i1 = $r6.<org.simpleframework.xml.core.PathParser: int off>;

        $i4 = $i1 + 1;

        $r6.<org.simpleframework.xml.core.PathParser: int off> = $i4;

     label1:
        $i3 = $r6.<org.simpleframework.xml.core.PathParser: int off>;

        $i2 = $r6.<org.simpleframework.xml.core.PathParser: int count>;

        if $i3 >= $i2 goto label2;

        $r5 = $r6.<org.simpleframework.xml.core.PathParser: char[] data>;

        $i5 = $r6.<org.simpleframework.xml.core.PathParser: int off>;

        $i6 = $i5 + 1;

        $r6.<org.simpleframework.xml.core.PathParser: int off> = $i6;

        $c0 = $r5[$i5];

        $z0 = specialinvoke $r6.<org.simpleframework.xml.core.PathParser: boolean isValid(char)>($c0);

        if $z0 != 0 goto label1;

        $r4 = new org.simpleframework.xml.core.PathException;

        $r3 = newarray (java.lang.Object)[3];

        $r2 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>($c0);

        $r3[0] = $r2;

        $r1 = $r6.<org.simpleframework.xml.core.PathParser: java.lang.String path>;

        $r3[1] = $r1;

        $r0 = $r6.<org.simpleframework.xml.core.PathParser: org.simpleframework.xml.strategy.Type type>;

        $r3[2] = $r0;

        specialinvoke $r4.<org.simpleframework.xml.core.PathException: void <init>(java.lang.String,java.lang.Object[])>("Illegal character \'%s\' in attribute for \'%s\' in %s", $r3);

        throw $r4;

     label2:
        $i7 = $r6.<org.simpleframework.xml.core.PathParser: int off>;

        if $i7 > $i4 goto label3;

        $r7 = new org.simpleframework.xml.core.PathException;

        $r8 = newarray (java.lang.Object)[2];

        $r9 = $r6.<org.simpleframework.xml.core.PathParser: java.lang.String path>;

        $r8[0] = $r9;

        $r10 = $r6.<org.simpleframework.xml.core.PathParser: org.simpleframework.xml.strategy.Type type>;

        $r8[1] = $r10;

        specialinvoke $r7.<org.simpleframework.xml.core.PathException: void <init>(java.lang.String,java.lang.Object[])>("Attribute reference in \'%s\' for %s is empty", $r8);

        throw $r7;

     label3:
        $r6.<org.simpleframework.xml.core.PathParser: boolean attribute> = 1;

        $i8 = $r6.<org.simpleframework.xml.core.PathParser: int off>;

        $i9 = $i8 - $i4;

        specialinvoke $r6.<org.simpleframework.xml.core.PathParser: void attribute(int,int)>($i4, $i9);

        return;
    }

    private void attribute(int, int)
    {
        char[] $r0;
        java.lang.String $r1;
        int $i0, $i1;
        org.simpleframework.xml.core.PathParser $r2;

        $r2 := @this: org.simpleframework.xml.core.PathParser;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $r1 = new java.lang.String;

        $r0 = $r2.<org.simpleframework.xml.core.PathParser: char[] data>;

        specialinvoke $r1.<java.lang.String: void <init>(char[],int,int)>($r0, $i0, $i1);

        if $i1 <= 0 goto label1;

        specialinvoke $r2.<org.simpleframework.xml.core.PathParser: void attribute(java.lang.String)>($r1);

        return;

     label1:
        return;
    }

    private void attribute(java.lang.String)
    {
        java.util.LinkedList $r0, $r6;
        org.simpleframework.xml.stream.Style $r1;
        org.simpleframework.xml.stream.Format $r2;
        java.lang.String $r3, $r5;
        org.simpleframework.xml.core.PathParser $r4;

        $r4 := @this: org.simpleframework.xml.core.PathParser;

        $r3 := @parameter0: java.lang.String;

        $r2 = $r4.<org.simpleframework.xml.core.PathParser: org.simpleframework.xml.stream.Format format>;

        $r1 = virtualinvoke $r2.<org.simpleframework.xml.stream.Format: org.simpleframework.xml.stream.Style getStyle()>();

        $r5 = interfaceinvoke $r1.<org.simpleframework.xml.stream.Style: java.lang.String getAttribute(java.lang.String)>($r3);

        $r0 = $r4.<org.simpleframework.xml.core.PathParser: java.util.LinkedList prefixes>;

        virtualinvoke $r0.<java.util.LinkedList: boolean add(java.lang.Object)>(null);

        $r6 = $r4.<org.simpleframework.xml.core.PathParser: java.util.LinkedList names>;

        virtualinvoke $r6.<java.util.LinkedList: boolean add(java.lang.Object)>($r5);

        return;
    }

    private void build()
    {
        boolean $z0;
        java.lang.StringBuilder $r0, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20;
        java.lang.Integer $r1;
        java.lang.String $r2, $r3, $r21;
        java.lang.Object $r4, $r9, $r11;
        java.util.LinkedList $r5, $r7, $r8, $r10;
        int $i0, $i1, $i2, $i3;
        org.simpleframework.xml.core.PathParser $r6;

        $r6 := @this: org.simpleframework.xml.core.PathParser;

        $r5 = $r6.<org.simpleframework.xml.core.PathParser: java.util.LinkedList names>;

        $i2 = virtualinvoke $r5.<java.util.LinkedList: int size()>();

        $i1 = $i2 + -1;

        $i0 = 0;

     label1:
        if $i0 >= $i2 goto label6;

        $r7 = $r6.<org.simpleframework.xml.core.PathParser: java.util.LinkedList prefixes>;

        $r4 = virtualinvoke $r7.<java.util.LinkedList: java.lang.Object get(int)>($i0);

        $r2 = (java.lang.String) $r4;

        $r8 = $r6.<org.simpleframework.xml.core.PathParser: java.util.LinkedList names>;

        $r9 = virtualinvoke $r8.<java.util.LinkedList: java.lang.Object get(int)>($i0);

        $r3 = (java.lang.String) $r9;

        $r10 = $r6.<org.simpleframework.xml.core.PathParser: java.util.LinkedList indexes>;

        $r11 = virtualinvoke $r10.<java.util.LinkedList: java.lang.Object get(int)>($i0);

        $r1 = (java.lang.Integer) $r11;

        $i3 = virtualinvoke $r1.<java.lang.Integer: int intValue()>();

        if $i0 <= 0 goto label2;

        $r0 = $r6.<org.simpleframework.xml.core.PathParser: java.lang.StringBuilder builder>;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(47);

     label2:
        $z0 = $r6.<org.simpleframework.xml.core.PathParser: boolean attribute>;

        if $z0 == 0 goto label4;

        if $i0 != $i1 goto label4;

        $r12 = $r6.<org.simpleframework.xml.core.PathParser: java.lang.StringBuilder builder>;

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(64);

        $r13 = $r6.<org.simpleframework.xml.core.PathParser: java.lang.StringBuilder builder>;

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

     label3:
        $i0 = $i0 + 1;

        goto label1;

     label4:
        if $r2 == null goto label5;

        $r14 = $r6.<org.simpleframework.xml.core.PathParser: java.lang.StringBuilder builder>;

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r15 = $r6.<org.simpleframework.xml.core.PathParser: java.lang.StringBuilder builder>;

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(58);

     label5:
        $r16 = $r6.<org.simpleframework.xml.core.PathParser: java.lang.StringBuilder builder>;

        virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r17 = $r6.<org.simpleframework.xml.core.PathParser: java.lang.StringBuilder builder>;

        virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(91);

        $r18 = $r6.<org.simpleframework.xml.core.PathParser: java.lang.StringBuilder builder>;

        virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r19 = $r6.<org.simpleframework.xml.core.PathParser: java.lang.StringBuilder builder>;

        virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(93);

        goto label3;

     label6:
        $r20 = $r6.<org.simpleframework.xml.core.PathParser: java.lang.StringBuilder builder>;

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        $r6.<org.simpleframework.xml.core.PathParser: java.lang.String location> = $r21;

        return;
    }

    private void element() throws java.lang.Exception
    {
        org.simpleframework.xml.strategy.Type $r0;
        java.lang.String $r1;
        java.lang.Character $r2;
        java.lang.Object[] $r3;
        org.simpleframework.xml.core.PathException $r4;
        char[] $r5;
        boolean $z0;
        char $c0;
        int $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;
        org.simpleframework.xml.core.PathParser $r6;

        $r6 := @this: org.simpleframework.xml.core.PathParser;

        $i1 = $r6.<org.simpleframework.xml.core.PathParser: int off>;

        $i2 = 0;

     label1:
        $i3 = $r6.<org.simpleframework.xml.core.PathParser: int off>;

        $i4 = $r6.<org.simpleframework.xml.core.PathParser: int count>;

        if $i3 >= $i4 goto label2;

        $r5 = $r6.<org.simpleframework.xml.core.PathParser: char[] data>;

        $i5 = $r6.<org.simpleframework.xml.core.PathParser: int off>;

        $i6 = $i5 + 1;

        $r6.<org.simpleframework.xml.core.PathParser: int off> = $i6;

        $c0 = $r5[$i5];

        $z0 = specialinvoke $r6.<org.simpleframework.xml.core.PathParser: boolean isValid(char)>($c0);

        if $z0 != 0 goto label5;

        if $c0 != 64 goto label3;

        $i7 = $r6.<org.simpleframework.xml.core.PathParser: int off>;

        $i8 = $i7 + -1;

        $r6.<org.simpleframework.xml.core.PathParser: int off> = $i8;

     label2:
        specialinvoke $r6.<org.simpleframework.xml.core.PathParser: void element(int,int)>($i1, $i2);

        return;

     label3:
        if $c0 != 91 goto label4;

        specialinvoke $r6.<org.simpleframework.xml.core.PathParser: void index()>();

        goto label2;

     label4:
        if $c0 == 47 goto label2;

        $r4 = new org.simpleframework.xml.core.PathException;

        $r3 = newarray (java.lang.Object)[3];

        $r2 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>($c0);

        $r3[0] = $r2;

        $r1 = $r6.<org.simpleframework.xml.core.PathParser: java.lang.String path>;

        $r3[1] = $r1;

        $r0 = $r6.<org.simpleframework.xml.core.PathParser: org.simpleframework.xml.strategy.Type type>;

        $r3[2] = $r0;

        specialinvoke $r4.<org.simpleframework.xml.core.PathException: void <init>(java.lang.String,java.lang.Object[])>("Illegal character \'%s\' in element for \'%s\' in %s", $r3);

        throw $r4;

     label5:
        $i2 = $i2 + 1;

        goto label1;
    }

    private void element(int, int)
    {
        char[] $r0;
        java.lang.String $r1;
        int $i0, $i1;
        org.simpleframework.xml.core.PathParser $r2;

        $r2 := @this: org.simpleframework.xml.core.PathParser;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $r1 = new java.lang.String;

        $r0 = $r2.<org.simpleframework.xml.core.PathParser: char[] data>;

        specialinvoke $r1.<java.lang.String: void <init>(char[],int,int)>($r0, $i0, $i1);

        if $i1 <= 0 goto label1;

        specialinvoke $r2.<org.simpleframework.xml.core.PathParser: void element(java.lang.String)>($r1);

        return;

     label1:
        return;
    }

    private void element(java.lang.String)
    {
        java.util.LinkedList $r0, $r7;
        org.simpleframework.xml.stream.Style $r1;
        org.simpleframework.xml.stream.Format $r2;
        int $i0, $i1;
        java.lang.String $r3, $r4, $r6;
        org.simpleframework.xml.core.PathParser $r5;

        $r5 := @this: org.simpleframework.xml.core.PathParser;

        $r3 := @parameter0: java.lang.String;

        $i0 = virtualinvoke $r3.<java.lang.String: int indexOf(int)>(58);

        $r4 = null;

        if $i0 <= 0 goto label1;

        $r4 = virtualinvoke $r3.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

        $i1 = $i0 + 1;

        $r3 = virtualinvoke $r3.<java.lang.String: java.lang.String substring(int)>($i1);

     label1:
        $r2 = $r5.<org.simpleframework.xml.core.PathParser: org.simpleframework.xml.stream.Format format>;

        $r1 = virtualinvoke $r2.<org.simpleframework.xml.stream.Format: org.simpleframework.xml.stream.Style getStyle()>();

        $r6 = interfaceinvoke $r1.<org.simpleframework.xml.stream.Style: java.lang.String getElement(java.lang.String)>($r3);

        $r0 = $r5.<org.simpleframework.xml.core.PathParser: java.util.LinkedList prefixes>;

        virtualinvoke $r0.<java.util.LinkedList: boolean add(java.lang.Object)>($r4);

        $r7 = $r5.<org.simpleframework.xml.core.PathParser: java.util.LinkedList names>;

        virtualinvoke $r7.<java.util.LinkedList: boolean add(java.lang.Object)>($r6);

        return;
    }

    private java.lang.String getAttributePath(java.lang.String, java.lang.String)
    {
        java.lang.StringBuilder $r0, $r7, $r8, $r9;
        boolean $z0;
        org.simpleframework.xml.stream.Style $r1;
        org.simpleframework.xml.stream.Format $r2;
        java.lang.String $r3, $r4, $r6, $r10;
        org.simpleframework.xml.core.PathParser $r5;

        $r5 := @this: org.simpleframework.xml.core.PathParser;

        $r3 := @parameter0: java.lang.String;

        $r4 := @parameter1: java.lang.String;

        $r2 = $r5.<org.simpleframework.xml.core.PathParser: org.simpleframework.xml.stream.Format format>;

        $r1 = virtualinvoke $r2.<org.simpleframework.xml.stream.Format: org.simpleframework.xml.stream.Style getStyle()>();

        $r6 = interfaceinvoke $r1.<org.simpleframework.xml.stream.Style: java.lang.String getAttribute(java.lang.String)>($r4);

        $z0 = specialinvoke $r5.<org.simpleframework.xml.core.PathParser: boolean isEmpty(java.lang.String)>($r3);

        if $z0 == 0 goto label1;

        return $r6;

     label1:
        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/@");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r10;
    }

    private java.lang.String getElementPath(java.lang.String, java.lang.String)
    {
        java.lang.StringBuilder $r0, $r7, $r8, $r9, $r10;
        boolean $z0, $z1;
        org.simpleframework.xml.stream.Style $r1;
        org.simpleframework.xml.stream.Format $r2;
        java.lang.String $r3, $r4, $r6, $r11;
        org.simpleframework.xml.core.PathParser $r5;

        $r5 := @this: org.simpleframework.xml.core.PathParser;

        $r3 := @parameter0: java.lang.String;

        $r4 := @parameter1: java.lang.String;

        $r2 = $r5.<org.simpleframework.xml.core.PathParser: org.simpleframework.xml.stream.Format format>;

        $r1 = virtualinvoke $r2.<org.simpleframework.xml.stream.Format: org.simpleframework.xml.stream.Style getStyle()>();

        $r6 = interfaceinvoke $r1.<org.simpleframework.xml.stream.Style: java.lang.String getElement(java.lang.String)>($r4);

        $z0 = specialinvoke $r5.<org.simpleframework.xml.core.PathParser: boolean isEmpty(java.lang.String)>($r6);

        if $z0 == 0 goto label1;

        return $r3;

     label1:
        $z1 = specialinvoke $r5.<org.simpleframework.xml.core.PathParser: boolean isEmpty(java.lang.String)>($r3);

        if $z1 == 0 goto label2;

        return $r6;

     label2:
        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[1]");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r11;
    }

    private void index() throws java.lang.Exception
    {
        java.lang.Integer $r0;
        java.util.LinkedList $r1;
        org.simpleframework.xml.strategy.Type $r2;
        java.lang.Object[] $r3;
        org.simpleframework.xml.core.PathException $r4;
        boolean $z0;
        java.lang.String $r5;
        char[] $r6, $r8, $r9;
        int $i0, $i1, $i2, $i4, $i5, $i6, $i7, $i9, $i10, $i11, $i13, $i14;
        char $c3, $c8, $c12;
        org.simpleframework.xml.core.PathParser $r7;

        $r7 := @this: org.simpleframework.xml.core.PathParser;

        $i0 = 0;

        $r6 = $r7.<org.simpleframework.xml.core.PathParser: char[] data>;

        $i1 = $r7.<org.simpleframework.xml.core.PathParser: int off>;

        $i4 = $i1 + -1;

        $c3 = $r6[$i4];

        if $c3 != 91 goto label2;

     label1:
        $i5 = $r7.<org.simpleframework.xml.core.PathParser: int off>;

        $i2 = $r7.<org.simpleframework.xml.core.PathParser: int count>;

        if $i5 >= $i2 goto label2;

        $r8 = $r7.<org.simpleframework.xml.core.PathParser: char[] data>;

        $i6 = $r7.<org.simpleframework.xml.core.PathParser: int off>;

        $i7 = $i6 + 1;

        $r7.<org.simpleframework.xml.core.PathParser: int off> = $i7;

        $c8 = $r8[$i6];

        $z0 = specialinvoke $r7.<org.simpleframework.xml.core.PathParser: boolean isDigit(char)>($c8);

        if $z0 != 0 goto label3;

     label2:
        $r9 = $r7.<org.simpleframework.xml.core.PathParser: char[] data>;

        $i9 = $r7.<org.simpleframework.xml.core.PathParser: int off>;

        $i10 = $i9 + 1;

        $r7.<org.simpleframework.xml.core.PathParser: int off> = $i10;

        $i11 = $i9 + -1;

        $c12 = $r9[$i11];

        if $c12 == 93 goto label4;

        $r4 = new org.simpleframework.xml.core.PathException;

        $r3 = newarray (java.lang.Object)[2];

        $r5 = $r7.<org.simpleframework.xml.core.PathParser: java.lang.String path>;

        $r3[0] = $r5;

        $r2 = $r7.<org.simpleframework.xml.core.PathParser: org.simpleframework.xml.strategy.Type type>;

        $r3[1] = $r2;

        specialinvoke $r4.<org.simpleframework.xml.core.PathException: void <init>(java.lang.String,java.lang.Object[])>("Invalid index for path \'%s\' in %s", $r3);

        throw $r4;

     label3:
        $i13 = $i0 * 10;

        $i14 = $i13 + $c8;

        $i0 = $i14 + -48;

        goto label1;

     label4:
        $r1 = $r7.<org.simpleframework.xml.core.PathParser: java.util.LinkedList indexes>;

        $r0 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        virtualinvoke $r1.<java.util.LinkedList: boolean add(java.lang.Object)>($r0);

        return;
    }

    private boolean isDigit(char)
    {
        boolean $z0;
        char $c0;
        org.simpleframework.xml.core.PathParser $r0;

        $r0 := @this: org.simpleframework.xml.core.PathParser;

        $c0 := @parameter0: char;

        $z0 = staticinvoke <java.lang.Character: boolean isDigit(char)>($c0);

        return $z0;
    }

    private boolean isEmpty(java.lang.String)
    {
        int $i0;
        java.lang.String $r0;
        org.simpleframework.xml.core.PathParser $r1;

        $r1 := @this: org.simpleframework.xml.core.PathParser;

        $r0 := @parameter0: java.lang.String;

        if $r0 == null goto label1;

        $i0 = virtualinvoke $r0.<java.lang.String: int length()>();

        if $i0 != 0 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }

    private boolean isLetter(char)
    {
        boolean $z0;
        char $c0;
        org.simpleframework.xml.core.PathParser $r0;

        $r0 := @this: org.simpleframework.xml.core.PathParser;

        $c0 := @parameter0: char;

        $z0 = staticinvoke <java.lang.Character: boolean isLetterOrDigit(char)>($c0);

        return $z0;
    }

    private boolean isSpecial(char)
    {
        char $c0;
        org.simpleframework.xml.core.PathParser $r0;

        $r0 := @this: org.simpleframework.xml.core.PathParser;

        $c0 := @parameter0: char;

        if $c0 == 95 goto label1;

        if $c0 == 45 goto label1;

        if $c0 != 58 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }

    private boolean isValid(char)
    {
        boolean $z0, $z1;
        char $c0;
        org.simpleframework.xml.core.PathParser $r0;

        $r0 := @this: org.simpleframework.xml.core.PathParser;

        $c0 := @parameter0: char;

        $z0 = specialinvoke $r0.<org.simpleframework.xml.core.PathParser: boolean isLetter(char)>($c0);

        if $z0 != 0 goto label1;

        $z1 = specialinvoke $r0.<org.simpleframework.xml.core.PathParser: boolean isSpecial(char)>($c0);

        if $z1 == 0 goto label2;

     label1:
        return 1;

     label2:
        return 0;
    }

    private void parse(java.lang.String) throws java.lang.Exception
    {
        int $i0, $i1, $i2;
        char[] $r0, $r3;
        java.lang.String $r1;
        org.simpleframework.xml.core.PathParser $r2;

        $r2 := @this: org.simpleframework.xml.core.PathParser;

        $r1 := @parameter0: java.lang.String;

        if $r1 == null goto label1;

        $i0 = virtualinvoke $r1.<java.lang.String: int length()>();

        $r2.<org.simpleframework.xml.core.PathParser: int count> = $i0;

        $i1 = $r2.<org.simpleframework.xml.core.PathParser: int count>;

        $r0 = newarray (char)[$i1];

        $r2.<org.simpleframework.xml.core.PathParser: char[] data> = $r0;

        $i2 = $r2.<org.simpleframework.xml.core.PathParser: int count>;

        $r3 = $r2.<org.simpleframework.xml.core.PathParser: char[] data>;

        virtualinvoke $r1.<java.lang.String: void getChars(int,int,char[],int)>(0, $i2, $r3, 0);

     label1:
        specialinvoke $r2.<org.simpleframework.xml.core.PathParser: void path()>();

        return;
    }

    private void path() throws java.lang.Exception
    {
        boolean $z0;
        org.simpleframework.xml.strategy.Type $r0, $r10;
        java.lang.Object[] $r1, $r8;
        org.simpleframework.xml.core.PathException $r2, $r7;
        char $c0, $c4;
        java.lang.String $r3, $r9;
        int $i1, $i2, $i3, $i5;
        char[] $r4, $r6;
        org.simpleframework.xml.core.PathParser $r5;

        $r5 := @this: org.simpleframework.xml.core.PathParser;

        $r4 = $r5.<org.simpleframework.xml.core.PathParser: char[] data>;

        $i1 = $r5.<org.simpleframework.xml.core.PathParser: int off>;

        $c0 = $r4[$i1];

        if $c0 != 47 goto label1;

        $r2 = new org.simpleframework.xml.core.PathException;

        $r1 = newarray (java.lang.Object)[2];

        $r3 = $r5.<org.simpleframework.xml.core.PathParser: java.lang.String path>;

        $r1[0] = $r3;

        $r0 = $r5.<org.simpleframework.xml.core.PathParser: org.simpleframework.xml.strategy.Type type>;

        $r1[1] = $r0;

        specialinvoke $r2.<org.simpleframework.xml.core.PathException: void <init>(java.lang.String,java.lang.Object[])>("Path \'%s\' in %s references document root", $r1);

        throw $r2;

     label1:
        $r6 = $r5.<org.simpleframework.xml.core.PathParser: char[] data>;

        $i3 = $r5.<org.simpleframework.xml.core.PathParser: int off>;

        $c4 = $r6[$i3];

        if $c4 != 46 goto label2;

        specialinvoke $r5.<org.simpleframework.xml.core.PathParser: void skip()>();

     label2:
        $i5 = $r5.<org.simpleframework.xml.core.PathParser: int off>;

        $i2 = $r5.<org.simpleframework.xml.core.PathParser: int count>;

        if $i5 >= $i2 goto label4;

        $z0 = $r5.<org.simpleframework.xml.core.PathParser: boolean attribute>;

        if $z0 == 0 goto label3;

        $r7 = new org.simpleframework.xml.core.PathException;

        $r8 = newarray (java.lang.Object)[2];

        $r9 = $r5.<org.simpleframework.xml.core.PathParser: java.lang.String path>;

        $r8[0] = $r9;

        $r10 = $r5.<org.simpleframework.xml.core.PathParser: org.simpleframework.xml.strategy.Type type>;

        $r8[1] = $r10;

        specialinvoke $r7.<org.simpleframework.xml.core.PathException: void <init>(java.lang.String,java.lang.Object[])>("Path \'%s\' in %s references an invalid attribute", $r8);

        throw $r7;

     label3:
        specialinvoke $r5.<org.simpleframework.xml.core.PathParser: void segment()>();

        goto label2;

     label4:
        specialinvoke $r5.<org.simpleframework.xml.core.PathParser: void truncate()>();

        specialinvoke $r5.<org.simpleframework.xml.core.PathParser: void build()>();

        return;
    }

    private void segment() throws java.lang.Exception
    {
        org.simpleframework.xml.strategy.Type $r0;
        java.lang.Object[] $r1;
        org.simpleframework.xml.core.PathException $r2;
        java.lang.String $r3;
        int $i0;
        char[] $r4;
        char $c1;
        org.simpleframework.xml.core.PathParser $r5;

        $r5 := @this: org.simpleframework.xml.core.PathParser;

        $r4 = $r5.<org.simpleframework.xml.core.PathParser: char[] data>;

        $i0 = $r5.<org.simpleframework.xml.core.PathParser: int off>;

        $c1 = $r4[$i0];

        if $c1 != 47 goto label1;

        $r2 = new org.simpleframework.xml.core.PathException;

        $r1 = newarray (java.lang.Object)[2];

        $r3 = $r5.<org.simpleframework.xml.core.PathParser: java.lang.String path>;

        $r1[0] = $r3;

        $r0 = $r5.<org.simpleframework.xml.core.PathParser: org.simpleframework.xml.strategy.Type type>;

        $r1[1] = $r0;

        specialinvoke $r2.<org.simpleframework.xml.core.PathException: void <init>(java.lang.String,java.lang.Object[])>("Invalid path expression \'%s\' in %s", $r1);

        throw $r2;

     label1:
        if $c1 != 64 goto label3;

        specialinvoke $r5.<org.simpleframework.xml.core.PathParser: void attribute()>();

     label2:
        specialinvoke $r5.<org.simpleframework.xml.core.PathParser: void align()>();

        return;

     label3:
        specialinvoke $r5.<org.simpleframework.xml.core.PathParser: void element()>();

        goto label2;
    }

    private void skip() throws java.lang.Exception
    {
        org.simpleframework.xml.strategy.Type $r0;
        java.lang.Object[] $r1;
        org.simpleframework.xml.core.PathException $r2;
        char $c0;
        java.lang.String $r3;
        int $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        char[] $r4, $r6;
        org.simpleframework.xml.core.PathParser $r5;

        $r5 := @this: org.simpleframework.xml.core.PathParser;

        $r4 = $r5.<org.simpleframework.xml.core.PathParser: char[] data>;

        $i1 = lengthof $r4;

        if $i1 <= 1 goto label2;

        $r6 = $r5.<org.simpleframework.xml.core.PathParser: char[] data>;

        $i2 = $r5.<org.simpleframework.xml.core.PathParser: int off>;

        $i3 = $i2 + 1;

        $c0 = $r6[$i3];

        if $c0 == 47 goto label1;

        $r2 = new org.simpleframework.xml.core.PathException;

        $r1 = newarray (java.lang.Object)[2];

        $r3 = $r5.<org.simpleframework.xml.core.PathParser: java.lang.String path>;

        $r1[0] = $r3;

        $r0 = $r5.<org.simpleframework.xml.core.PathParser: org.simpleframework.xml.strategy.Type type>;

        $r1[1] = $r0;

        specialinvoke $r2.<org.simpleframework.xml.core.PathException: void <init>(java.lang.String,java.lang.Object[])>("Path \'%s\' in %s has an illegal syntax", $r1);

        throw $r2;

     label1:
        $i4 = $r5.<org.simpleframework.xml.core.PathParser: int off>;

        $i5 = $i4 + 1;

        $r5.<org.simpleframework.xml.core.PathParser: int off> = $i5;

     label2:
        $i6 = $r5.<org.simpleframework.xml.core.PathParser: int off>;

        $i7 = $i6 + 1;

        $r5.<org.simpleframework.xml.core.PathParser: int off> = $i7;

        $r5.<org.simpleframework.xml.core.PathParser: int start> = $i7;

        return;
    }

    private void truncate() throws java.lang.Exception
    {
        char $c0;
        char[] $r0, $r2;
        int $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        org.simpleframework.xml.core.PathParser $r1;

        $r1 := @this: org.simpleframework.xml.core.PathParser;

        $i1 = $r1.<org.simpleframework.xml.core.PathParser: int off>;

        $i3 = $i1 + -1;

        $r0 = $r1.<org.simpleframework.xml.core.PathParser: char[] data>;

        $i2 = lengthof $r0;

        if $i3 < $i2 goto label1;

        $i4 = $r1.<org.simpleframework.xml.core.PathParser: int off>;

        $i5 = $i4 + -1;

        $r1.<org.simpleframework.xml.core.PathParser: int off> = $i5;

        return;

     label1:
        $r2 = $r1.<org.simpleframework.xml.core.PathParser: char[] data>;

        $i6 = $r1.<org.simpleframework.xml.core.PathParser: int off>;

        $i7 = $i6 + -1;

        $c0 = $r2[$i7];

        if $c0 != 47 goto label2;

        $i8 = $r1.<org.simpleframework.xml.core.PathParser: int off>;

        $i9 = $i8 + -1;

        $r1.<org.simpleframework.xml.core.PathParser: int off> = $i9;

        return;

     label2:
        return;
    }

    public java.lang.String getAttribute(java.lang.String)
    {
        java.lang.Object $r0;
        org.simpleframework.xml.core.PathParser$Cache $r1, $r7;
        java.lang.String $r2, $r3, $r5, $r6;
        org.simpleframework.xml.core.PathParser $r4;

        $r4 := @this: org.simpleframework.xml.core.PathParser;

        $r2 := @parameter0: java.lang.String;

        $r1 = $r4.<org.simpleframework.xml.core.PathParser: org.simpleframework.xml.core.PathParser$Cache attributes>;

        $r0 = virtualinvoke $r1.<org.simpleframework.xml.core.PathParser$Cache: java.lang.Object get(java.lang.Object)>($r2);

        $r3 = (java.lang.String) $r0;

        if $r3 != null goto label1;

        $r5 = $r4.<org.simpleframework.xml.core.PathParser: java.lang.String location>;

        $r6 = specialinvoke $r4.<org.simpleframework.xml.core.PathParser: java.lang.String getAttributePath(java.lang.String,java.lang.String)>($r5, $r2);

        if $r6 == null goto label2;

        $r7 = $r4.<org.simpleframework.xml.core.PathParser: org.simpleframework.xml.core.PathParser$Cache attributes>;

        virtualinvoke $r7.<org.simpleframework.xml.core.PathParser$Cache: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, $r6);

        return $r6;

     label1:
        return $r3;

     label2:
        return $r6;
    }

    public java.lang.String getElement(java.lang.String)
    {
        java.lang.Object $r0;
        org.simpleframework.xml.core.PathParser$Cache $r1, $r7;
        java.lang.String $r2, $r3, $r5, $r6;
        org.simpleframework.xml.core.PathParser $r4;

        $r4 := @this: org.simpleframework.xml.core.PathParser;

        $r2 := @parameter0: java.lang.String;

        $r1 = $r4.<org.simpleframework.xml.core.PathParser: org.simpleframework.xml.core.PathParser$Cache elements>;

        $r0 = virtualinvoke $r1.<org.simpleframework.xml.core.PathParser$Cache: java.lang.Object get(java.lang.Object)>($r2);

        $r3 = (java.lang.String) $r0;

        if $r3 != null goto label1;

        $r5 = $r4.<org.simpleframework.xml.core.PathParser: java.lang.String location>;

        $r6 = specialinvoke $r4.<org.simpleframework.xml.core.PathParser: java.lang.String getElementPath(java.lang.String,java.lang.String)>($r5, $r2);

        if $r6 == null goto label2;

        $r7 = $r4.<org.simpleframework.xml.core.PathParser: org.simpleframework.xml.core.PathParser$Cache elements>;

        virtualinvoke $r7.<org.simpleframework.xml.core.PathParser$Cache: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, $r6);

        return $r6;

     label1:
        return $r3;

     label2:
        return $r6;
    }

    public java.lang.String getFirst()
    {
        java.lang.String $r0;
        java.lang.Object $r1;
        java.util.LinkedList $r2;
        org.simpleframework.xml.core.PathParser $r3;

        $r3 := @this: org.simpleframework.xml.core.PathParser;

        $r2 = $r3.<org.simpleframework.xml.core.PathParser: java.util.LinkedList names>;

        $r1 = virtualinvoke $r2.<java.util.LinkedList: java.lang.Object getFirst()>();

        $r0 = (java.lang.String) $r1;

        return $r0;
    }

    public int getIndex()
    {
        int $i0;
        java.lang.Integer $r0;
        java.lang.Object $r1;
        java.util.LinkedList $r2;
        org.simpleframework.xml.core.PathParser $r3;

        $r3 := @this: org.simpleframework.xml.core.PathParser;

        $r2 = $r3.<org.simpleframework.xml.core.PathParser: java.util.LinkedList indexes>;

        $r1 = virtualinvoke $r2.<java.util.LinkedList: java.lang.Object getFirst()>();

        $r0 = (java.lang.Integer) $r1;

        $i0 = virtualinvoke $r0.<java.lang.Integer: int intValue()>();

        return $i0;
    }

    public java.lang.String getLast()
    {
        java.lang.String $r0;
        java.lang.Object $r1;
        java.util.LinkedList $r2;
        org.simpleframework.xml.core.PathParser $r3;

        $r3 := @this: org.simpleframework.xml.core.PathParser;

        $r2 = $r3.<org.simpleframework.xml.core.PathParser: java.util.LinkedList names>;

        $r1 = virtualinvoke $r2.<java.util.LinkedList: java.lang.Object getLast()>();

        $r0 = (java.lang.String) $r1;

        return $r0;
    }

    public java.lang.String getPath()
    {
        java.lang.String r0;
        org.simpleframework.xml.core.PathParser $r1;

        $r1 := @this: org.simpleframework.xml.core.PathParser;

        r0 = $r1.<org.simpleframework.xml.core.PathParser: java.lang.String location>;

        return r0;
    }

    public org.simpleframework.xml.core.Expression getPath(int)
    {
        org.simpleframework.xml.core.Expression $r0;
        int $i0;
        org.simpleframework.xml.core.PathParser $r1;

        $r1 := @this: org.simpleframework.xml.core.PathParser;

        $i0 := @parameter0: int;

        $r0 = virtualinvoke $r1.<org.simpleframework.xml.core.PathParser: org.simpleframework.xml.core.Expression getPath(int,int)>($i0, 0);

        return $r0;
    }

    public org.simpleframework.xml.core.Expression getPath(int, int)
    {
        org.simpleframework.xml.core.PathParser$PathSection $r0, $r3;
        java.util.LinkedList $r1;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        org.simpleframework.xml.core.PathParser $r2;

        $r2 := @this: org.simpleframework.xml.core.PathParser;

        $i0 := @parameter0: int;

        $i1 := @parameter1: int;

        $r1 = $r2.<org.simpleframework.xml.core.PathParser: java.util.LinkedList names>;

        $i2 = virtualinvoke $r1.<java.util.LinkedList: int size()>();

        $i4 = $i2 + -1;

        $i3 = $i4 - $i1;

        if $i3 < $i0 goto label1;

        $r0 = new org.simpleframework.xml.core.PathParser$PathSection;

        $i5 = $i4 - $i1;

        specialinvoke $r0.<org.simpleframework.xml.core.PathParser$PathSection: void <init>(org.simpleframework.xml.core.PathParser,int,int)>($r2, $i0, $i5);

        return $r0;

     label1:
        $r3 = new org.simpleframework.xml.core.PathParser$PathSection;

        specialinvoke $r3.<org.simpleframework.xml.core.PathParser$PathSection: void <init>(org.simpleframework.xml.core.PathParser,int,int)>($r2, $i0, $i0);

        return $r3;
    }

    public java.lang.String getPrefix()
    {
        java.lang.String $r0;
        java.lang.Object $r1;
        java.util.LinkedList $r2;
        org.simpleframework.xml.core.PathParser $r3;

        $r3 := @this: org.simpleframework.xml.core.PathParser;

        $r2 = $r3.<org.simpleframework.xml.core.PathParser: java.util.LinkedList prefixes>;

        $r1 = virtualinvoke $r2.<java.util.LinkedList: java.lang.Object getFirst()>();

        $r0 = (java.lang.String) $r1;

        return $r0;
    }

    public boolean isAttribute()
    {
        boolean z0;
        org.simpleframework.xml.core.PathParser $r0;

        $r0 := @this: org.simpleframework.xml.core.PathParser;

        z0 = $r0.<org.simpleframework.xml.core.PathParser: boolean attribute>;

        return z0;
    }

    public boolean isEmpty()
    {
        boolean $z0;
        java.lang.String $r0;
        org.simpleframework.xml.core.PathParser $r1;

        $r1 := @this: org.simpleframework.xml.core.PathParser;

        $r0 = $r1.<org.simpleframework.xml.core.PathParser: java.lang.String location>;

        $z0 = specialinvoke $r1.<org.simpleframework.xml.core.PathParser: boolean isEmpty(java.lang.String)>($r0);

        return $z0;
    }

    public boolean isPath()
    {
        int $i0;
        java.util.LinkedList $r0;
        org.simpleframework.xml.core.PathParser $r1;

        $r1 := @this: org.simpleframework.xml.core.PathParser;

        $r0 = $r1.<org.simpleframework.xml.core.PathParser: java.util.LinkedList names>;

        $i0 = virtualinvoke $r0.<java.util.LinkedList: int size()>();

        if $i0 <= 1 goto label1;

        return 1;

     label1:
        return 0;
    }

    public java.util.Iterator iterator()
    {
        java.util.Iterator $r0;
        java.util.LinkedList $r1;
        org.simpleframework.xml.core.PathParser $r2;

        $r2 := @this: org.simpleframework.xml.core.PathParser;

        $r1 = $r2.<org.simpleframework.xml.core.PathParser: java.util.LinkedList names>;

        $r0 = virtualinvoke $r1.<java.util.LinkedList: java.util.Iterator iterator()>();

        return $r0;
    }

    public java.lang.String toString()
    {
        char[] $r0;
        java.lang.String $r1, $r3, $r4;
        int $i0, $i1, $i2, $i3;
        org.simpleframework.xml.core.PathParser $r2;

        $r2 := @this: org.simpleframework.xml.core.PathParser;

        $i0 = $r2.<org.simpleframework.xml.core.PathParser: int off>;

        $i1 = $r2.<org.simpleframework.xml.core.PathParser: int start>;

        $i2 = $i0 - $i1;

        $r1 = $r2.<org.simpleframework.xml.core.PathParser: java.lang.String cache>;

        if $r1 != null goto label1;

        $r3 = new java.lang.String;

        $r0 = $r2.<org.simpleframework.xml.core.PathParser: char[] data>;

        $i3 = $r2.<org.simpleframework.xml.core.PathParser: int start>;

        specialinvoke $r3.<java.lang.String: void <init>(char[],int,int)>($r0, $i3, $i2);

        $r2.<org.simpleframework.xml.core.PathParser: java.lang.String cache> = $r3;

     label1:
        $r4 = $r2.<org.simpleframework.xml.core.PathParser: java.lang.String cache>;

        return $r4;
    }
}
