class org.simpleframework.xml.stream.DocumentReader extends java.lang.Object implements org.simpleframework.xml.stream.EventReader
{
    private static final java.lang.String RESERVED;
    private org.simpleframework.xml.stream.EventNode peek;
    private org.simpleframework.xml.stream.NodeExtractor queue;
    private org.simpleframework.xml.stream.NodeStack stack;

    public void <init>(org.w3c.dom.Document)
    {
        org.simpleframework.xml.stream.NodeStack $r0, $r4;
        org.simpleframework.xml.stream.NodeExtractor $r1;
        org.w3c.dom.Document $r2;
        org.simpleframework.xml.stream.DocumentReader $r3;

        $r3 := @this: org.simpleframework.xml.stream.DocumentReader;

        $r2 := @parameter0: org.w3c.dom.Document;

        specialinvoke $r3.<java.lang.Object: void <init>()>();

        $r1 = new org.simpleframework.xml.stream.NodeExtractor;

        specialinvoke $r1.<org.simpleframework.xml.stream.NodeExtractor: void <init>(org.w3c.dom.Document)>($r2);

        $r3.<org.simpleframework.xml.stream.DocumentReader: org.simpleframework.xml.stream.NodeExtractor queue> = $r1;

        $r0 = new org.simpleframework.xml.stream.NodeStack;

        specialinvoke $r0.<org.simpleframework.xml.stream.NodeStack: void <init>()>();

        $r3.<org.simpleframework.xml.stream.DocumentReader: org.simpleframework.xml.stream.NodeStack stack> = $r0;

        $r4 = $r3.<org.simpleframework.xml.stream.DocumentReader: org.simpleframework.xml.stream.NodeStack stack>;

        virtualinvoke $r4.<org.simpleframework.xml.stream.NodeStack: java.lang.Object push(java.lang.Object)>($r2);

        return;
    }

    private org.simpleframework.xml.stream.DocumentReader$Entry attribute(org.w3c.dom.Node)
    {
        org.simpleframework.xml.stream.DocumentReader$Entry $r0;
        org.w3c.dom.Node $r1;
        org.simpleframework.xml.stream.DocumentReader $r2;

        $r2 := @this: org.simpleframework.xml.stream.DocumentReader;

        $r1 := @parameter0: org.w3c.dom.Node;

        $r0 = new org.simpleframework.xml.stream.DocumentReader$Entry;

        specialinvoke $r0.<org.simpleframework.xml.stream.DocumentReader$Entry: void <init>(org.w3c.dom.Node)>($r1);

        return $r0;
    }

    private org.simpleframework.xml.stream.DocumentReader$Start build(org.simpleframework.xml.stream.DocumentReader$Start)
    {
        boolean $z0;
        org.simpleframework.xml.stream.DocumentReader$Entry $r0;
        org.w3c.dom.Node $r1;
        org.w3c.dom.NamedNodeMap $r2;
        int $i0, $i1;
        org.simpleframework.xml.stream.DocumentReader$Start $r3;
        org.simpleframework.xml.stream.DocumentReader $r4;

        $r4 := @this: org.simpleframework.xml.stream.DocumentReader;

        $r3 := @parameter0: org.simpleframework.xml.stream.DocumentReader$Start;

        $r2 = virtualinvoke $r3.<org.simpleframework.xml.stream.DocumentReader$Start: org.w3c.dom.NamedNodeMap getAttributes()>();

        $i1 = interfaceinvoke $r2.<org.w3c.dom.NamedNodeMap: int getLength()>();

        $i0 = 0;

     label1:
        if $i0 >= $i1 goto label3;

        $r1 = interfaceinvoke $r2.<org.w3c.dom.NamedNodeMap: org.w3c.dom.Node item(int)>($i0);

        $r0 = specialinvoke $r4.<org.simpleframework.xml.stream.DocumentReader: org.simpleframework.xml.stream.DocumentReader$Entry attribute(org.w3c.dom.Node)>($r1);

        $z0 = interfaceinvoke $r0.<org.simpleframework.xml.stream.Attribute: boolean isReserved()>();

        if $z0 != 0 goto label2;

        virtualinvoke $r3.<org.simpleframework.xml.stream.DocumentReader$Start: boolean add(java.lang.Object)>($r0);

     label2:
        $i0 = $i0 + 1;

        goto label1;

     label3:
        return $r3;
    }

    private org.simpleframework.xml.stream.EventNode convert(org.w3c.dom.Node) throws java.lang.Exception
    {
        org.simpleframework.xml.stream.DocumentReader$Text $r0;
        org.simpleframework.xml.stream.DocumentReader$Start $r1;
        org.simpleframework.xml.stream.NodeStack $r2;
        short $s0;
        org.w3c.dom.Node $r3;
        org.simpleframework.xml.stream.DocumentReader $r4;

        $r4 := @this: org.simpleframework.xml.stream.DocumentReader;

        $r3 := @parameter0: org.w3c.dom.Node;

        $s0 = interfaceinvoke $r3.<org.w3c.dom.Node: short getNodeType()>();

        if $s0 != 1 goto label2;

        if $r3 == null goto label1;

        $r2 = $r4.<org.simpleframework.xml.stream.DocumentReader: org.simpleframework.xml.stream.NodeStack stack>;

        virtualinvoke $r2.<org.simpleframework.xml.stream.NodeStack: java.lang.Object push(java.lang.Object)>($r3);

     label1:
        $r1 = specialinvoke $r4.<org.simpleframework.xml.stream.DocumentReader: org.simpleframework.xml.stream.DocumentReader$Start start(org.w3c.dom.Node)>($r3);

        return $r1;

     label2:
        $r0 = specialinvoke $r4.<org.simpleframework.xml.stream.DocumentReader: org.simpleframework.xml.stream.DocumentReader$Text text(org.w3c.dom.Node)>($r3);

        return $r0;
    }

    private org.simpleframework.xml.stream.DocumentReader$End end()
    {
        org.simpleframework.xml.stream.DocumentReader$End $r0;
        org.simpleframework.xml.stream.DocumentReader $r1;

        $r1 := @this: org.simpleframework.xml.stream.DocumentReader;

        $r0 = new org.simpleframework.xml.stream.DocumentReader$End;

        specialinvoke $r0.<org.simpleframework.xml.stream.DocumentReader$End: void <init>(org.simpleframework.xml.stream.DocumentReader$1)>(null);

        return $r0;
    }

    private org.simpleframework.xml.stream.EventNode read() throws java.lang.Exception
    {
        org.simpleframework.xml.stream.EventNode $r0;
        org.simpleframework.xml.stream.DocumentReader$End $r1;
        org.w3c.dom.Node $r2;
        java.lang.Object $r3;
        org.simpleframework.xml.stream.NodeExtractor $r4;
        org.simpleframework.xml.stream.DocumentReader $r5;

        $r5 := @this: org.simpleframework.xml.stream.DocumentReader;

        $r4 = $r5.<org.simpleframework.xml.stream.DocumentReader: org.simpleframework.xml.stream.NodeExtractor queue>;

        $r3 = virtualinvoke $r4.<org.simpleframework.xml.stream.NodeExtractor: java.lang.Object peek()>();

        $r2 = (org.w3c.dom.Node) $r3;

        if $r2 != null goto label1;

        $r1 = specialinvoke $r5.<org.simpleframework.xml.stream.DocumentReader: org.simpleframework.xml.stream.DocumentReader$End end()>();

        return $r1;

     label1:
        $r0 = specialinvoke $r5.<org.simpleframework.xml.stream.DocumentReader: org.simpleframework.xml.stream.EventNode read(org.w3c.dom.Node)>($r2);

        return $r0;
    }

    private org.simpleframework.xml.stream.EventNode read(org.w3c.dom.Node) throws java.lang.Exception
    {
        org.simpleframework.xml.stream.EventNode $r0;
        org.simpleframework.xml.stream.NodeExtractor $r1;
        org.simpleframework.xml.stream.DocumentReader$End $r2;
        java.lang.Object $r3;
        org.simpleframework.xml.stream.NodeStack $r4, $r9;
        org.w3c.dom.Node $r5, $r6, $r7;
        org.simpleframework.xml.stream.DocumentReader $r8;

        $r8 := @this: org.simpleframework.xml.stream.DocumentReader;

        $r5 := @parameter0: org.w3c.dom.Node;

        $r6 = interfaceinvoke $r5.<org.w3c.dom.Node: org.w3c.dom.Node getParentNode()>();

        $r4 = $r8.<org.simpleframework.xml.stream.DocumentReader: org.simpleframework.xml.stream.NodeStack stack>;

        $r3 = virtualinvoke $r4.<org.simpleframework.xml.stream.NodeStack: java.lang.Object top()>();

        $r7 = (org.w3c.dom.Node) $r3;

        if $r6 == $r7 goto label2;

        if $r7 == null goto label1;

        $r9 = $r8.<org.simpleframework.xml.stream.DocumentReader: org.simpleframework.xml.stream.NodeStack stack>;

        virtualinvoke $r9.<org.simpleframework.xml.stream.NodeStack: java.lang.Object pop()>();

     label1:
        $r2 = specialinvoke $r8.<org.simpleframework.xml.stream.DocumentReader: org.simpleframework.xml.stream.DocumentReader$End end()>();

        return $r2;

     label2:
        if $r5 == null goto label3;

        $r1 = $r8.<org.simpleframework.xml.stream.DocumentReader: org.simpleframework.xml.stream.NodeExtractor queue>;

        virtualinvoke $r1.<org.simpleframework.xml.stream.NodeExtractor: java.lang.Object poll()>();

     label3:
        $r0 = specialinvoke $r8.<org.simpleframework.xml.stream.DocumentReader: org.simpleframework.xml.stream.EventNode convert(org.w3c.dom.Node)>($r5);

        return $r0;
    }

    private org.simpleframework.xml.stream.DocumentReader$Start start(org.w3c.dom.Node)
    {
        boolean $z0;
        org.simpleframework.xml.stream.DocumentReader$Start $r0, $r3;
        org.w3c.dom.Node $r1;
        org.simpleframework.xml.stream.DocumentReader $r2;

        $r2 := @this: org.simpleframework.xml.stream.DocumentReader;

        $r1 := @parameter0: org.w3c.dom.Node;

        $r0 = new org.simpleframework.xml.stream.DocumentReader$Start;

        specialinvoke $r0.<org.simpleframework.xml.stream.DocumentReader$Start: void <init>(org.w3c.dom.Node)>($r1);

        $z0 = virtualinvoke $r0.<org.simpleframework.xml.stream.DocumentReader$Start: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        $r3 = specialinvoke $r2.<org.simpleframework.xml.stream.DocumentReader: org.simpleframework.xml.stream.DocumentReader$Start build(org.simpleframework.xml.stream.DocumentReader$Start)>($r0);

        return $r3;

     label1:
        return $r0;
    }

    private org.simpleframework.xml.stream.DocumentReader$Text text(org.w3c.dom.Node)
    {
        org.simpleframework.xml.stream.DocumentReader$Text $r0;
        org.w3c.dom.Node $r1;
        org.simpleframework.xml.stream.DocumentReader $r2;

        $r2 := @this: org.simpleframework.xml.stream.DocumentReader;

        $r1 := @parameter0: org.w3c.dom.Node;

        $r0 = new org.simpleframework.xml.stream.DocumentReader$Text;

        specialinvoke $r0.<org.simpleframework.xml.stream.DocumentReader$Text: void <init>(org.w3c.dom.Node)>($r1);

        return $r0;
    }

    public org.simpleframework.xml.stream.EventNode next() throws java.lang.Exception
    {
        org.simpleframework.xml.stream.EventNode $r0, $r2;
        org.simpleframework.xml.stream.DocumentReader $r1;

        $r1 := @this: org.simpleframework.xml.stream.DocumentReader;

        $r0 = $r1.<org.simpleframework.xml.stream.DocumentReader: org.simpleframework.xml.stream.EventNode peek>;

        if $r0 != null goto label1;

        $r2 = specialinvoke $r1.<org.simpleframework.xml.stream.DocumentReader: org.simpleframework.xml.stream.EventNode read()>();

        return $r2;

     label1:
        $r1.<org.simpleframework.xml.stream.DocumentReader: org.simpleframework.xml.stream.EventNode peek> = null;

        return $r0;
    }

    public org.simpleframework.xml.stream.EventNode peek() throws java.lang.Exception
    {
        org.simpleframework.xml.stream.EventNode $r0, $r2, $r3;
        org.simpleframework.xml.stream.DocumentReader $r1;

        $r1 := @this: org.simpleframework.xml.stream.DocumentReader;

        $r0 = $r1.<org.simpleframework.xml.stream.DocumentReader: org.simpleframework.xml.stream.EventNode peek>;

        if $r0 != null goto label1;

        $r2 = virtualinvoke $r1.<org.simpleframework.xml.stream.DocumentReader: org.simpleframework.xml.stream.EventNode next()>();

        $r1.<org.simpleframework.xml.stream.DocumentReader: org.simpleframework.xml.stream.EventNode peek> = $r2;

     label1:
        $r3 = $r1.<org.simpleframework.xml.stream.DocumentReader: org.simpleframework.xml.stream.EventNode peek>;

        return $r3;
    }

    public static void <clinit>()
    {
        <org.simpleframework.xml.stream.DocumentReader: java.lang.String RESERVED> = "xml";

        <org.simpleframework.xml.stream.DocumentReader: java.lang.String RESERVED> = "xml";

        return;
    }
}
