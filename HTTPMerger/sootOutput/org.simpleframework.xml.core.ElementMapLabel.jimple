class org.simpleframework.xml.core.ElementMapLabel extends org.simpleframework.xml.core.TemplateLabel
{
    private org.simpleframework.xml.core.Decorator decorator;
    private org.simpleframework.xml.core.Introspector detail;
    private org.simpleframework.xml.core.Entry entry;
    private org.simpleframework.xml.stream.Format format;
    private java.lang.Class[] items;
    private org.simpleframework.xml.ElementMap label;
    private java.lang.String name;
    private java.lang.String parent;
    private java.lang.Class type;

    public void <init>(org.simpleframework.xml.core.Contact, org.simpleframework.xml.ElementMap, org.simpleframework.xml.stream.Format)
    {
        java.lang.String $r0;
        org.simpleframework.xml.core.Entry $r1;
        org.simpleframework.xml.core.Qualifier $r2;
        java.lang.Class $r3;
        org.simpleframework.xml.core.Introspector $r4;
        org.simpleframework.xml.stream.Format $r5;
        org.simpleframework.xml.ElementMap $r6;
        org.simpleframework.xml.core.Contact $r7;
        org.simpleframework.xml.core.ElementMapLabel $r8;

        $r8 := @this: org.simpleframework.xml.core.ElementMapLabel;

        $r7 := @parameter0: org.simpleframework.xml.core.Contact;

        $r6 := @parameter1: org.simpleframework.xml.ElementMap;

        $r5 := @parameter2: org.simpleframework.xml.stream.Format;

        specialinvoke $r8.<org.simpleframework.xml.core.TemplateLabel: void <init>()>();

        $r4 = new org.simpleframework.xml.core.Introspector;

        specialinvoke $r4.<org.simpleframework.xml.core.Introspector: void <init>(org.simpleframework.xml.core.Contact,org.simpleframework.xml.core.Label,org.simpleframework.xml.stream.Format)>($r7, $r8, $r5);

        $r8.<org.simpleframework.xml.core.ElementMapLabel: org.simpleframework.xml.core.Introspector detail> = $r4;

        $r2 = new org.simpleframework.xml.core.Qualifier;

        specialinvoke $r2.<org.simpleframework.xml.core.Qualifier: void <init>(org.simpleframework.xml.core.Contact)>($r7);

        $r8.<org.simpleframework.xml.core.ElementMapLabel: org.simpleframework.xml.core.Decorator decorator> = $r2;

        $r1 = new org.simpleframework.xml.core.Entry;

        specialinvoke $r1.<org.simpleframework.xml.core.Entry: void <init>(org.simpleframework.xml.core.Contact,org.simpleframework.xml.ElementMap)>($r7, $r6);

        $r8.<org.simpleframework.xml.core.ElementMapLabel: org.simpleframework.xml.core.Entry entry> = $r1;

        $r3 = interfaceinvoke $r7.<org.simpleframework.xml.core.Contact: java.lang.Class getType()>();

        $r8.<org.simpleframework.xml.core.ElementMapLabel: java.lang.Class type> = $r3;

        $r0 = interfaceinvoke $r6.<org.simpleframework.xml.ElementMap: java.lang.String name()>();

        $r8.<org.simpleframework.xml.core.ElementMapLabel: java.lang.String name> = $r0;

        $r8.<org.simpleframework.xml.core.ElementMapLabel: org.simpleframework.xml.stream.Format format> = $r5;

        $r8.<org.simpleframework.xml.core.ElementMapLabel: org.simpleframework.xml.ElementMap label> = $r6;

        return;
    }

    private org.simpleframework.xml.strategy.Type getMap()
    {
        java.lang.Class $r0;
        org.simpleframework.xml.core.ClassType $r1;
        org.simpleframework.xml.core.ElementMapLabel $r2;

        $r2 := @this: org.simpleframework.xml.core.ElementMapLabel;

        $r1 = new org.simpleframework.xml.core.ClassType;

        $r0 = $r2.<org.simpleframework.xml.core.ElementMapLabel: java.lang.Class type>;

        specialinvoke $r1.<org.simpleframework.xml.core.ClassType: void <init>(java.lang.Class)>($r0);

        return $r1;
    }

    public java.lang.annotation.Annotation getAnnotation()
    {
        org.simpleframework.xml.ElementMap r0;
        org.simpleframework.xml.core.ElementMapLabel $r1;

        $r1 := @this: org.simpleframework.xml.core.ElementMapLabel;

        r0 = $r1.<org.simpleframework.xml.core.ElementMapLabel: org.simpleframework.xml.ElementMap label>;

        return r0;
    }

    public org.simpleframework.xml.core.Contact getContact()
    {
        org.simpleframework.xml.core.Contact $r0;
        org.simpleframework.xml.core.Introspector $r1;
        org.simpleframework.xml.core.ElementMapLabel $r2;

        $r2 := @this: org.simpleframework.xml.core.ElementMapLabel;

        $r1 = $r2.<org.simpleframework.xml.core.ElementMapLabel: org.simpleframework.xml.core.Introspector detail>;

        $r0 = virtualinvoke $r1.<org.simpleframework.xml.core.Introspector: org.simpleframework.xml.core.Contact getContact()>();

        return $r0;
    }

    public org.simpleframework.xml.core.Converter getConverter(org.simpleframework.xml.core.Context) throws java.lang.Exception
    {
        org.simpleframework.xml.core.CompositeInlineMap r0;
        org.simpleframework.xml.core.CompositeMap r1;
        boolean $z0;
        org.simpleframework.xml.strategy.Type $r2;
        org.simpleframework.xml.core.Entry $r3, $r7;
        org.simpleframework.xml.ElementMap $r4;
        org.simpleframework.xml.core.Context $r5;
        org.simpleframework.xml.core.ElementMapLabel $r6;

        $r6 := @this: org.simpleframework.xml.core.ElementMapLabel;

        $r5 := @parameter0: org.simpleframework.xml.core.Context;

        $r2 = specialinvoke $r6.<org.simpleframework.xml.core.ElementMapLabel: org.simpleframework.xml.strategy.Type getMap()>();

        $r4 = $r6.<org.simpleframework.xml.core.ElementMapLabel: org.simpleframework.xml.ElementMap label>;

        $z0 = interfaceinvoke $r4.<org.simpleframework.xml.ElementMap: boolean inline()>();

        if $z0 != 0 goto label1;

        r1 = new org.simpleframework.xml.core.CompositeMap;

        $r3 = $r6.<org.simpleframework.xml.core.ElementMapLabel: org.simpleframework.xml.core.Entry entry>;

        specialinvoke r1.<org.simpleframework.xml.core.CompositeMap: void <init>(org.simpleframework.xml.core.Context,org.simpleframework.xml.core.Entry,org.simpleframework.xml.strategy.Type)>($r5, $r3, $r2);

        return r1;

     label1:
        r0 = new org.simpleframework.xml.core.CompositeInlineMap;

        $r7 = $r6.<org.simpleframework.xml.core.ElementMapLabel: org.simpleframework.xml.core.Entry entry>;

        specialinvoke r0.<org.simpleframework.xml.core.CompositeInlineMap: void <init>(org.simpleframework.xml.core.Context,org.simpleframework.xml.core.Entry,org.simpleframework.xml.strategy.Type)>($r5, $r7, $r2);

        return r0;
    }

    public org.simpleframework.xml.core.Decorator getDecorator() throws java.lang.Exception
    {
        org.simpleframework.xml.core.Decorator r0;
        org.simpleframework.xml.core.ElementMapLabel $r1;

        $r1 := @this: org.simpleframework.xml.core.ElementMapLabel;

        r0 = $r1.<org.simpleframework.xml.core.ElementMapLabel: org.simpleframework.xml.core.Decorator decorator>;

        return r0;
    }

    public org.simpleframework.xml.strategy.Type getDependent() throws java.lang.Exception
    {
        java.lang.Class $r0;
        org.simpleframework.xml.core.ClassType $r1, $r10;
        int $i0;
        java.lang.Object[] $r2;
        org.simpleframework.xml.core.ElementException $r3;
        org.simpleframework.xml.core.Contact $r4;
        java.lang.Class[] $r5, $r7, $r8, $r9, $r11;
        org.simpleframework.xml.core.ElementMapLabel $r6;

        $r6 := @this: org.simpleframework.xml.core.ElementMapLabel;

        $r4 = virtualinvoke $r6.<org.simpleframework.xml.core.ElementMapLabel: org.simpleframework.xml.core.Contact getContact()>();

        $r5 = $r6.<org.simpleframework.xml.core.ElementMapLabel: java.lang.Class[] items>;

        if $r5 != null goto label1;

        $r7 = interfaceinvoke $r4.<org.simpleframework.xml.core.Contact: java.lang.Class[] getDependents()>();

        $r6.<org.simpleframework.xml.core.ElementMapLabel: java.lang.Class[] items> = $r7;

     label1:
        $r8 = $r6.<org.simpleframework.xml.core.ElementMapLabel: java.lang.Class[] items>;

        if $r8 != null goto label2;

        $r3 = new org.simpleframework.xml.core.ElementException;

        $r2 = newarray (java.lang.Object)[1];

        $r2[0] = $r4;

        specialinvoke $r3.<org.simpleframework.xml.core.ElementException: void <init>(java.lang.String,java.lang.Object[])>("Unable to determine type for %s", $r2);

        throw $r3;

     label2:
        $r9 = $r6.<org.simpleframework.xml.core.ElementMapLabel: java.lang.Class[] items>;

        $i0 = lengthof $r9;

        if $i0 != 0 goto label3;

        $r1 = new org.simpleframework.xml.core.ClassType;

        specialinvoke $r1.<org.simpleframework.xml.core.ClassType: void <init>(java.lang.Class)>(class "java/lang/Object");

        return $r1;

     label3:
        $r10 = new org.simpleframework.xml.core.ClassType;

        $r11 = $r6.<org.simpleframework.xml.core.ElementMapLabel: java.lang.Class[] items>;

        $r0 = $r11[0];

        specialinvoke $r10.<org.simpleframework.xml.core.ClassType: void <init>(java.lang.Class)>($r0);

        return $r10;
    }

    public java.lang.Object getEmpty(org.simpleframework.xml.core.Context) throws java.lang.Exception
    {
        java.lang.Object $r0;
        org.simpleframework.xml.ElementMap $r1;
        boolean $z0;
        java.lang.Class $r2;
        org.simpleframework.xml.core.ClassType $r3;
        org.simpleframework.xml.core.MapFactory $r4;
        org.simpleframework.xml.core.Context $r5;
        org.simpleframework.xml.core.ElementMapLabel $r6;

        $r6 := @this: org.simpleframework.xml.core.ElementMapLabel;

        $r5 := @parameter0: org.simpleframework.xml.core.Context;

        $r3 = new org.simpleframework.xml.core.ClassType;

        $r2 = $r6.<org.simpleframework.xml.core.ElementMapLabel: java.lang.Class type>;

        specialinvoke $r3.<org.simpleframework.xml.core.ClassType: void <init>(java.lang.Class)>($r2);

        $r4 = new org.simpleframework.xml.core.MapFactory;

        specialinvoke $r4.<org.simpleframework.xml.core.MapFactory: void <init>(org.simpleframework.xml.core.Context,org.simpleframework.xml.strategy.Type)>($r5, $r3);

        $r1 = $r6.<org.simpleframework.xml.core.ElementMapLabel: org.simpleframework.xml.ElementMap label>;

        $z0 = interfaceinvoke $r1.<org.simpleframework.xml.ElementMap: boolean empty()>();

        if $z0 != 0 goto label1;

        $r0 = virtualinvoke $r4.<org.simpleframework.xml.core.Factory: java.lang.Object getInstance()>();

        return $r0;

     label1:
        return null;
    }

    public java.lang.String getEntry() throws java.lang.Exception
    {
        boolean $z0;
        org.simpleframework.xml.core.Introspector $r0, $r5;
        org.simpleframework.xml.stream.Style $r1;
        java.lang.String $r2, $r6, $r7, $r8;
        org.simpleframework.xml.stream.Format $r3;
        org.simpleframework.xml.core.ElementMapLabel $r4;

        $r4 := @this: org.simpleframework.xml.core.ElementMapLabel;

        $r3 = $r4.<org.simpleframework.xml.core.ElementMapLabel: org.simpleframework.xml.stream.Format format>;

        $r1 = virtualinvoke $r3.<org.simpleframework.xml.stream.Format: org.simpleframework.xml.stream.Style getStyle()>();

        $r0 = $r4.<org.simpleframework.xml.core.ElementMapLabel: org.simpleframework.xml.core.Introspector detail>;

        $r2 = $r4.<org.simpleframework.xml.core.ElementMapLabel: java.lang.String parent>;

        $z0 = virtualinvoke $r0.<org.simpleframework.xml.core.Introspector: boolean isEmpty(java.lang.String)>($r2);

        if $z0 == 0 goto label1;

        $r5 = $r4.<org.simpleframework.xml.core.ElementMapLabel: org.simpleframework.xml.core.Introspector detail>;

        $r6 = virtualinvoke $r5.<org.simpleframework.xml.core.Introspector: java.lang.String getEntry()>();

        $r4.<org.simpleframework.xml.core.ElementMapLabel: java.lang.String parent> = $r6;

     label1:
        $r7 = $r4.<org.simpleframework.xml.core.ElementMapLabel: java.lang.String parent>;

        $r8 = interfaceinvoke $r1.<org.simpleframework.xml.stream.Style: java.lang.String getElement(java.lang.String)>($r7);

        return $r8;
    }

    public org.simpleframework.xml.core.Expression getExpression() throws java.lang.Exception
    {
        org.simpleframework.xml.core.Expression $r0;
        org.simpleframework.xml.core.Introspector $r1;
        org.simpleframework.xml.core.ElementMapLabel $r2;

        $r2 := @this: org.simpleframework.xml.core.ElementMapLabel;

        $r1 = $r2.<org.simpleframework.xml.core.ElementMapLabel: org.simpleframework.xml.core.Introspector detail>;

        $r0 = virtualinvoke $r1.<org.simpleframework.xml.core.Introspector: org.simpleframework.xml.core.Expression getExpression()>();

        return $r0;
    }

    public java.lang.String getName() throws java.lang.Exception
    {
        org.simpleframework.xml.core.Introspector $r0;
        boolean $z0;
        org.simpleframework.xml.ElementMap $r1;
        org.simpleframework.xml.core.Entry $r2;
        org.simpleframework.xml.stream.Style $r3;
        org.simpleframework.xml.stream.Format $r4;
        java.lang.String $r5, $r7;
        org.simpleframework.xml.core.ElementMapLabel $r6;

        $r6 := @this: org.simpleframework.xml.core.ElementMapLabel;

        $r4 = $r6.<org.simpleframework.xml.core.ElementMapLabel: org.simpleframework.xml.stream.Format format>;

        $r3 = virtualinvoke $r4.<org.simpleframework.xml.stream.Format: org.simpleframework.xml.stream.Style getStyle()>();

        $r2 = $r6.<org.simpleframework.xml.core.ElementMapLabel: org.simpleframework.xml.core.Entry entry>;

        $r5 = virtualinvoke $r2.<org.simpleframework.xml.core.Entry: java.lang.String getEntry()>();

        $r1 = $r6.<org.simpleframework.xml.core.ElementMapLabel: org.simpleframework.xml.ElementMap label>;

        $z0 = interfaceinvoke $r1.<org.simpleframework.xml.ElementMap: boolean inline()>();

        if $z0 != 0 goto label1;

        $r0 = $r6.<org.simpleframework.xml.core.ElementMapLabel: org.simpleframework.xml.core.Introspector detail>;

        $r5 = virtualinvoke $r0.<org.simpleframework.xml.core.Introspector: java.lang.String getName()>();

     label1:
        $r7 = interfaceinvoke $r3.<org.simpleframework.xml.stream.Style: java.lang.String getElement(java.lang.String)>($r5);

        return $r7;
    }

    public java.lang.String getOverride()
    {
        java.lang.String r0;
        org.simpleframework.xml.core.ElementMapLabel $r1;

        $r1 := @this: org.simpleframework.xml.core.ElementMapLabel;

        r0 = $r1.<org.simpleframework.xml.core.ElementMapLabel: java.lang.String name>;

        return r0;
    }

    public java.lang.String getPath() throws java.lang.Exception
    {
        java.lang.String $r0, $r3;
        org.simpleframework.xml.core.Expression $r1;
        org.simpleframework.xml.core.ElementMapLabel $r2;

        $r2 := @this: org.simpleframework.xml.core.ElementMapLabel;

        $r1 = virtualinvoke $r2.<org.simpleframework.xml.core.ElementMapLabel: org.simpleframework.xml.core.Expression getExpression()>();

        $r0 = virtualinvoke $r2.<org.simpleframework.xml.core.ElementMapLabel: java.lang.String getName()>();

        $r3 = interfaceinvoke $r1.<org.simpleframework.xml.core.Expression: java.lang.String getElement(java.lang.String)>($r0);

        return $r3;
    }

    public java.lang.Class getType()
    {
        java.lang.Class r0;
        org.simpleframework.xml.core.ElementMapLabel $r1;

        $r1 := @this: org.simpleframework.xml.core.ElementMapLabel;

        r0 = $r1.<org.simpleframework.xml.core.ElementMapLabel: java.lang.Class type>;

        return r0;
    }

    public boolean isCollection()
    {
        org.simpleframework.xml.core.ElementMapLabel $r0;

        $r0 := @this: org.simpleframework.xml.core.ElementMapLabel;

        return 1;
    }

    public boolean isData()
    {
        boolean $z0;
        org.simpleframework.xml.ElementMap $r0;
        org.simpleframework.xml.core.ElementMapLabel $r1;

        $r1 := @this: org.simpleframework.xml.core.ElementMapLabel;

        $r0 = $r1.<org.simpleframework.xml.core.ElementMapLabel: org.simpleframework.xml.ElementMap label>;

        $z0 = interfaceinvoke $r0.<org.simpleframework.xml.ElementMap: boolean data()>();

        return $z0;
    }

    public boolean isInline()
    {
        boolean $z0;
        org.simpleframework.xml.ElementMap $r0;
        org.simpleframework.xml.core.ElementMapLabel $r1;

        $r1 := @this: org.simpleframework.xml.core.ElementMapLabel;

        $r0 = $r1.<org.simpleframework.xml.core.ElementMapLabel: org.simpleframework.xml.ElementMap label>;

        $z0 = interfaceinvoke $r0.<org.simpleframework.xml.ElementMap: boolean inline()>();

        return $z0;
    }

    public boolean isRequired()
    {
        boolean $z0;
        org.simpleframework.xml.ElementMap $r0;
        org.simpleframework.xml.core.ElementMapLabel $r1;

        $r1 := @this: org.simpleframework.xml.core.ElementMapLabel;

        $r0 = $r1.<org.simpleframework.xml.core.ElementMapLabel: org.simpleframework.xml.ElementMap label>;

        $z0 = interfaceinvoke $r0.<org.simpleframework.xml.ElementMap: boolean required()>();

        return $z0;
    }

    public java.lang.String toString()
    {
        java.lang.String $r0;
        org.simpleframework.xml.core.Introspector $r1;
        org.simpleframework.xml.core.ElementMapLabel $r2;

        $r2 := @this: org.simpleframework.xml.core.ElementMapLabel;

        $r1 = $r2.<org.simpleframework.xml.core.ElementMapLabel: org.simpleframework.xml.core.Introspector detail>;

        $r0 = virtualinvoke $r1.<org.simpleframework.xml.core.Introspector: java.lang.String toString()>();

        return $r0;
    }
}
