class org.simpleframework.xml.stream.InputNodeMap extends java.util.LinkedHashMap implements org.simpleframework.xml.stream.NodeMap
{
    private final org.simpleframework.xml.stream.InputNode source;

    protected void <init>(org.simpleframework.xml.stream.InputNode)
    {
        org.simpleframework.xml.stream.InputNode $r0;
        org.simpleframework.xml.stream.InputNodeMap $r1;

        $r1 := @this: org.simpleframework.xml.stream.InputNodeMap;

        $r0 := @parameter0: org.simpleframework.xml.stream.InputNode;

        specialinvoke $r1.<java.util.LinkedHashMap: void <init>()>();

        $r1.<org.simpleframework.xml.stream.InputNodeMap: org.simpleframework.xml.stream.InputNode source> = $r0;

        return;
    }

    public void <init>(org.simpleframework.xml.stream.InputNode, org.simpleframework.xml.stream.EventNode)
    {
        org.simpleframework.xml.stream.EventNode $r0;
        org.simpleframework.xml.stream.InputNode $r1;
        org.simpleframework.xml.stream.InputNodeMap $r2;

        $r2 := @this: org.simpleframework.xml.stream.InputNodeMap;

        $r1 := @parameter0: org.simpleframework.xml.stream.InputNode;

        $r0 := @parameter1: org.simpleframework.xml.stream.EventNode;

        specialinvoke $r2.<java.util.LinkedHashMap: void <init>()>();

        $r2.<org.simpleframework.xml.stream.InputNodeMap: org.simpleframework.xml.stream.InputNode source> = $r1;

        specialinvoke $r2.<org.simpleframework.xml.stream.InputNodeMap: void build(org.simpleframework.xml.stream.EventNode)>($r0);

        return;
    }

    private void build(org.simpleframework.xml.stream.EventNode)
    {
        java.lang.String $r0;
        org.simpleframework.xml.stream.InputNode $r1;
        org.simpleframework.xml.stream.Attribute $r2;
        java.lang.Object $r3;
        boolean $z0, $z1;
        java.util.Iterator $r4;
        org.simpleframework.xml.stream.InputAttribute $r5;
        org.simpleframework.xml.stream.EventNode $r6;
        org.simpleframework.xml.stream.InputNodeMap $r7;

        $r7 := @this: org.simpleframework.xml.stream.InputNodeMap;

        $r6 := @parameter0: org.simpleframework.xml.stream.EventNode;

        $r4 = interfaceinvoke $r6.<org.simpleframework.xml.stream.EventNode: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke $r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke $r4.<java.util.Iterator: java.lang.Object next()>();

        $r2 = (org.simpleframework.xml.stream.Attribute) $r3;

        $r5 = new org.simpleframework.xml.stream.InputAttribute;

        $r1 = $r7.<org.simpleframework.xml.stream.InputNodeMap: org.simpleframework.xml.stream.InputNode source>;

        specialinvoke $r5.<org.simpleframework.xml.stream.InputAttribute: void <init>(org.simpleframework.xml.stream.InputNode,org.simpleframework.xml.stream.Attribute)>($r1, $r2);

        $z1 = interfaceinvoke $r2.<org.simpleframework.xml.stream.Attribute: boolean isReserved()>();

        if $z1 != 0 goto label1;

        $r0 = virtualinvoke $r5.<org.simpleframework.xml.stream.InputAttribute: java.lang.String getName()>();

        virtualinvoke $r7.<org.simpleframework.xml.stream.InputNodeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r0, $r5);

        goto label1;

     label2:
        return;
    }

    public org.simpleframework.xml.stream.InputNode get(java.lang.String)
    {
        org.simpleframework.xml.stream.InputNode $r0;
        java.lang.Object $r1;
        java.lang.String $r2;
        org.simpleframework.xml.stream.InputNodeMap $r3;

        $r3 := @this: org.simpleframework.xml.stream.InputNodeMap;

        $r2 := @parameter0: java.lang.String;

        $r1 = specialinvoke $r3.<java.util.LinkedHashMap: java.lang.Object get(java.lang.Object)>($r2);

        $r0 = (org.simpleframework.xml.stream.InputNode) $r1;

        return $r0;
    }

    public volatile org.simpleframework.xml.stream.Node get(java.lang.String)
    {
        org.simpleframework.xml.stream.InputNode $r0;
        java.lang.String $r1;
        org.simpleframework.xml.stream.InputNodeMap $r2;

        $r2 := @this: org.simpleframework.xml.stream.InputNodeMap;

        $r1 := @parameter0: java.lang.String;

        $r0 = virtualinvoke $r2.<org.simpleframework.xml.stream.InputNodeMap: org.simpleframework.xml.stream.InputNode get(java.lang.String)>($r1);

        return $r0;
    }

    public java.lang.String getName()
    {
        java.lang.String $r0;
        org.simpleframework.xml.stream.InputNode $r1;
        org.simpleframework.xml.stream.InputNodeMap $r2;

        $r2 := @this: org.simpleframework.xml.stream.InputNodeMap;

        $r1 = $r2.<org.simpleframework.xml.stream.InputNodeMap: org.simpleframework.xml.stream.InputNode source>;

        $r0 = interfaceinvoke $r1.<org.simpleframework.xml.stream.InputNode: java.lang.String getName()>();

        return $r0;
    }

    public org.simpleframework.xml.stream.InputNode getNode()
    {
        org.simpleframework.xml.stream.InputNode r0;
        org.simpleframework.xml.stream.InputNodeMap $r1;

        $r1 := @this: org.simpleframework.xml.stream.InputNodeMap;

        r0 = $r1.<org.simpleframework.xml.stream.InputNodeMap: org.simpleframework.xml.stream.InputNode source>;

        return r0;
    }

    public volatile org.simpleframework.xml.stream.Node getNode()
    {
        org.simpleframework.xml.stream.InputNode $r0;
        org.simpleframework.xml.stream.InputNodeMap $r1;

        $r1 := @this: org.simpleframework.xml.stream.InputNodeMap;

        $r0 = virtualinvoke $r1.<org.simpleframework.xml.stream.InputNodeMap: org.simpleframework.xml.stream.InputNode getNode()>();

        return $r0;
    }

    public java.util.Iterator iterator()
    {
        java.util.Iterator $r0;
        java.util.Set $r1;
        org.simpleframework.xml.stream.InputNodeMap $r2;

        $r2 := @this: org.simpleframework.xml.stream.InputNodeMap;

        $r1 = virtualinvoke $r2.<org.simpleframework.xml.stream.InputNodeMap: java.util.Set keySet()>();

        $r0 = interfaceinvoke $r1.<java.util.Set: java.util.Iterator iterator()>();

        return $r0;
    }

    public org.simpleframework.xml.stream.InputNode put(java.lang.String, java.lang.String)
    {
        org.simpleframework.xml.stream.InputNode $r0;
        org.simpleframework.xml.stream.InputAttribute $r1;
        java.lang.String $r2, $r3;
        org.simpleframework.xml.stream.InputNodeMap $r4;

        $r4 := @this: org.simpleframework.xml.stream.InputNodeMap;

        $r2 := @parameter0: java.lang.String;

        $r3 := @parameter1: java.lang.String;

        $r1 = new org.simpleframework.xml.stream.InputAttribute;

        $r0 = $r4.<org.simpleframework.xml.stream.InputNodeMap: org.simpleframework.xml.stream.InputNode source>;

        specialinvoke $r1.<org.simpleframework.xml.stream.InputAttribute: void <init>(org.simpleframework.xml.stream.InputNode,java.lang.String,java.lang.String)>($r0, $r2, $r3);

        if $r2 == null goto label1;

        virtualinvoke $r4.<org.simpleframework.xml.stream.InputNodeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, $r1);

        return $r1;

     label1:
        return $r1;
    }

    public volatile org.simpleframework.xml.stream.Node put(java.lang.String, java.lang.String)
    {
        org.simpleframework.xml.stream.InputNode $r0;
        java.lang.String $r1, $r2;
        org.simpleframework.xml.stream.InputNodeMap $r3;

        $r3 := @this: org.simpleframework.xml.stream.InputNodeMap;

        $r1 := @parameter0: java.lang.String;

        $r2 := @parameter1: java.lang.String;

        $r0 = virtualinvoke $r3.<org.simpleframework.xml.stream.InputNodeMap: org.simpleframework.xml.stream.InputNode put(java.lang.String,java.lang.String)>($r1, $r2);

        return $r0;
    }

    public org.simpleframework.xml.stream.InputNode remove(java.lang.String)
    {
        org.simpleframework.xml.stream.InputNode $r0;
        java.lang.Object $r1;
        java.lang.String $r2;
        org.simpleframework.xml.stream.InputNodeMap $r3;

        $r3 := @this: org.simpleframework.xml.stream.InputNodeMap;

        $r2 := @parameter0: java.lang.String;

        $r1 = specialinvoke $r3.<java.util.LinkedHashMap: java.lang.Object remove(java.lang.Object)>($r2);

        $r0 = (org.simpleframework.xml.stream.InputNode) $r1;

        return $r0;
    }

    public volatile org.simpleframework.xml.stream.Node remove(java.lang.String)
    {
        org.simpleframework.xml.stream.InputNode $r0;
        java.lang.String $r1;
        org.simpleframework.xml.stream.InputNodeMap $r2;

        $r2 := @this: org.simpleframework.xml.stream.InputNodeMap;

        $r1 := @parameter0: java.lang.String;

        $r0 = virtualinvoke $r2.<org.simpleframework.xml.stream.InputNodeMap: org.simpleframework.xml.stream.InputNode remove(java.lang.String)>($r1);

        return $r0;
    }
}
